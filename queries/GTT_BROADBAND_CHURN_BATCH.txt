USE WAREHOUSE ANALYTICS_WH;


/*BROARDBAND CHURN TRAINING DATASET BUILD
 * 
 * Created date: 2021-04-23
 * Created by: Kevin Fournier and Shevon Morris
 * 
 * RUNTIME: appox 35 min
 * 
 * Purpose
 * To build a training dataset to be used to train a model to predict churn
 * This dataset captures the following feature types
 * 
 * 
 * 
 * Updated by:Shevon Morris
 * Updated on: 2021-10-11
 * Updated Fibre MRC values. Chnage done due plan cost changes
 */
----SUBSCRIBERS ENDING ACTIVE AS OF MARCH 31ST
 
CREATE OR REPLACE TEMP TABLE GTT_REPORTING.SUBSCRIBER_END_ACTIVE AS 
 SELECT 
DATESTART
,ACCOUNTNUMBER 
,BID 
,SUBLINE_OF_SERVICE_SEGMENT
,DATEIN
,DATEOUT
,FEAT_DATEIN 
,FEAT_DATEOUT 
,RATEPLAN_NAME
,RATEPLANCODE
,PROPRODUCTNAME
,PROPRODUCTCODE
,0 HAS_CHURNED
FROM(
 SELECT DISTINCT 
			SU.LAST_SC_RUN_DATE AS DATESTART
			,SUB.ACCOUNTNUMBER 
			,SUB.BID 
			,SUB.SUBLINE_OF_SERVICE_SEGMENT
			,SUB.DATEIN
			,SUB.DATEOUT
			,NVL(FEAT.DATEIN,'9999-12-31') AS FEAT_DATEIN ---ONLY RELEVANT TO GPON, ADDING THIS TO FILTER OUT GPON SUBS WITH MULTIPLE INTERNET PLANS. 
			,NVL(FEAT.DATEOUT,'9999-12-31') AS FEAT_DATEOUT ---ONLY RELEVANT TO GPON, ADDING THIS TO FILTER OUT GPON SUBS WITH MULTIPLE INTERNET PLANS.
			--CAN SOMETIMES HAVE MUTLIPLE FEATURES IN THE SAME MONTH WITH NO DEACT ... LIKELY AN UPGRADE(THIS WAS FOUND TO BE AN ANOMALY. GPON SUB WAS ON BILLED FOR ONE INTERNET FEATURE. REQUIRES DEPUPE)
			,SUB.PRODUCT_NAME AS RATEPLAN_NAME
			,SUB.PRODUCT_CODE AS RATEPLANCODE
			,CASE WHEN SUB.SUBLINE_OF_SERVICE_SEGMENT  = 'GPON' AND FEAT.FEATURE_NAME IS NOT NULL THEN FEAT.FEATURE_NAME ELSE SUB.PRODUCT_NAME END AS PROPRODUCTNAME
			,CASE WHEN SUB.SUBLINE_OF_SERVICE_SEGMENT  = 'GPON' AND FEAT.FEATURE_CODE IS NOT NULL THEN FEAT.FEATURE_CODE ELSE SUB.PRODUCT_CODE END AS PROPRODUCTCODE
			,SUM(CASE
                  WHEN SUB.DATASET_TYPE='BG_MONTHLY_SNAPSHOT' THEN SUB.BEGINNING_ACTIVE
                  WHEN SUB.DATASET_TYPE='DAILY_SUB_ACTIVITY' THEN  SUB.NET_ACTIVATIONS
             END) AS ENDING_ACTIVE
			
		FROM ATNI_PROD.ATNI_ANALYTICS.SV_SUBSCRIBER_BG_END_WEEKLY_MONTHLY_SNAPSHOT_DAILYACTIVITY SUB
		LEFT JOIN ATNI_PROD.ATNI_ANALYTICS.SV_FEATURE_BG_END_WEEKLY_MONTHLY_SNAPSHOT_DAILYACTIVITY FEAT
			ON 	SUB.ACCOUNTNUMBER = FEAT.ACCOUNTNUMBER
				AND DATE_TRUNC('MONTH',SUB.DATESTART)=DATE_TRUNC('MONTH',FEAT.DATESTART)
				AND SUB.BID = FEAT.BID
				AND SUB.DATASET_TYPE=FEAT.DATASET_TYPE
				AND FEATURE_LEAF_LEVEL_NAME='Internet'
				AND FEATURETYPE='MP'
				AND FEAT.FEATURE_REVENUE_COUNTABLE = 1
				AND FEAT.FEATURE_UNIT_COUNTABLE = 1 
	    LEFT JOIN 
	    (
	      SELECT
	      MAX(DATESTART) AS LAST_SC_RUN_DATE
	      FROM 
	      ATNI_PROD.ATNI_ANALYTICS.SV_SUBSCRIBER_BG_END_WEEKLY_MONTHLY_SNAPSHOT_DAILYACTIVITY 
	      WHERE
	      OPERATING_COMPANY_CODE=1
	      AND DATASET_TYPE='DAILY_SUB_ACTIVITY'
	    
	    ) AS SU ON DATE_TRUNC('MONTH',SUB.DATESTART)=DATE_TRUNC('MONTH',SU.LAST_SC_RUN_DATE)
		WHERE 
			
			SUB.DATASET_TYPE IN ('BG_MONTHLY_SNAPSHOT','DAILY_SUB_ACTIVITY')
			-- IGNORE suspended subscribers.Instead train on behaviour of active subscribers for early detection in churn.
			-- Subscribers in suspend state can be there for prolong period. Can be near deact date by billing system
			--AND SUB.STATUSCODE<>'S' ------------------------------------------------TBD
			AND SUB.CUSTOMER_TYPE_SUB_CATEGORY = 'Residential Or General Subscriber'
			AND SUB.SUBLINE_OF_SERVICE  = 'Broadband Postpaid'
			AND SUB.REVENUE_COUNTABLE = 1
			AND SUB.UNIT_COUNTABLE = 1
			AND SUB.OPERATING_COMPANY_NAME = 'GTT'
			AND DATE_TRUNC('MONTH',SUB.DATESTART)=DATE_TRUNC('MONTH',CURRENT_DATE)
		GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12
	) AS Q 	
	WHERE 
	ENDING_ACTIVE=1

   ;
 --Subscribers deactivating between Oct 20 to Mar 21(Getting more churned subscribers to train model on)
 ---Filters out subscribers who reactivated after
---Filter out those who upgraded to Blaze
CREATE OR REPLACE TEMP TABLE GTT_REPORTING.CHURNED_SUBS AS 
SELECT 
SUB.*
,SUBD.STATUSCODE AS PREV_STATUSCODE
,SUBD.SUSPENDDATE
,DATEDIFF('DAY',SUBD.SUSPENDDATE::DATE,SUB.DATESTART) AS ELAPSED_DAYS_BEFORE_DEACT
FROM(
                    SELECT 
                    SUBC.*
                    ,CASE -------CHECK TO FLAG CHURNED DSL SUB WITH ACTIVE GPON GPON SERVICE
                       WHEN GSUB.ID_NUMBER IS NOT NULL OR GSUB.ACCOUNT_EMAIL IS NOT NULL AND  SUBLINE_OF_SERVICE_SEGMENT<>'GPON' THEN 1
                       ELSE 
                         0
                      END AS DSL_ASSOC_WITH_GPON
                    FROM(
		                   
		                    SELECT DISTINCT 
							 SUB.DATESTART
							,SUB.ACCOUNTNUMBER 
							,SUB.BID 
							,SUB.SUBLINE_OF_SERVICE_SEGMENT
							,SUB.DATEIN
							,SUB.DATEOUT
							,NVL(FEAT.DATEIN,'9999-12-31') AS FEAT_DATEIN ---ONLY RELEVANT TO GPON, ADDING THIS TO FILTER OUT GPON SUBS WITH MULTIPLE INTERNET PLANS.
							,NVL(FEAT.DATEOUT,'9999-12-31') AS FEAT_DATEOUT ---ONLY RELEVANT TO GPON, ADDING THIS TO FILTER OUT GPON SUBS WITH MULTIPLE INTERNET PLANS.
							,SUB.PRODUCT_NAME AS RATEPLAN_NAME
							,SUB.PRODUCT_CODE AS RATEPLANCODE
							--CAN SOMETIMES HAVE MUTLIPLE FEATURES IN THE SAME MONTH WITH NO DEACT ... LIKELY AN UPGRADE(THIS WAS FOUND TO BE AN ANOMALY. GPON SUB WAS ON BILLED FOR ONE INTERNET FEATURE. REQUIRES DEPUPE)
							,CASE WHEN SUB.SUBLINE_OF_SERVICE_SEGMENT  = 'GPON' AND FEAT.FEATURE_NAME IS NOT NULL THEN FEAT.FEATURE_NAME ELSE SUB.PRODUCT_NAME END AS PROPRODUCTNAME
							,CASE WHEN SUB.SUBLINE_OF_SERVICE_SEGMENT  = 'GPON' AND FEAT.FEATURE_CODE IS NOT NULL THEN FEAT.FEATURE_CODE ELSE SUB.PRODUCT_CODE END AS PROPRODUCTCODE
							,SUB.TOTALOUTS AS HAS_CHURNED
							,CRM.ID_NUMBER
							,CRM.ACCOUNT_EMAIL
							,WSD.SUBMITTED
                            ,WSD.REASON_FOR_TERMINATION1
                            ,WSD.WHAT_SERVICE_DO_YOU_WANT_TO_CANCEL		
							
						FROM ATNI_PROD.ATNI_ANALYTICS.SV_SUBSCRIBER_BG_END_WEEKLY_MONTHLY_SNAPSHOT_DAILYACTIVITY SUB
						LEFT JOIN ATNI_PROD.ATNI_ANALYTICS.SV_FEATURE_BG_END_WEEKLY_MONTHLY_SNAPSHOT_DAILYACTIVITY FEAT
							ON 	SUB.ACCOUNTNUMBER = FEAT.ACCOUNTNUMBER
								AND DATE_TRUNC('MONTH',SUB.DATESTART)=DATE_TRUNC('MONTH',FEAT.DATESTART)
								AND SUB.BID = FEAT.BID
								AND SUB.DATASET_TYPE=FEAT.DATASET_TYPE
								AND FEATURE_LEAF_LEVEL_NAME='Internet'
								AND FEATURETYPE='MP'
								AND FEAT.FEATURE_REVENUE_COUNTABLE = 1
								AND FEAT.FEATURE_UNIT_COUNTABLE = 1 
						LEFT JOIN 
						   SALESFORCE.GTT_CRM_ACCOUNTS CRM ON SUB.ACCOUNTNUMBER=CRM.ACCOUNTNUMBER
						LEFT JOIN----GET SUBS WHO SUBMIITED REQUEST TO TERMINATE SERVICE
                        GTT_REPORTING.VW_GTT_WEBSITE_SERVICE_DISCONTINUATION_SUBMISSION WSD ON ((WSD.WHAT_SERVICE_DO_YOU_WANT_TO_CANCEL='Blaze' AND SUB.BID='592'||REPLACE(WSD.BLAZE_NUMBER,'-',''))
                                                        OR (WSD.WHAT_SERVICE_DO_YOU_WANT_TO_CANCEL='DSL' AND SUB.BID='592'||REPLACE(WSD.LAND_LINE_NUMBER,'-','')) 
                                                        OR (WSD.WHAT_SERVICE_DO_YOU_WANT_TO_CANCEL='DSL' AND SUB.BID='592'||WSD.LAND_LINE_NUMBER) 
                                                        OR (WSD.WHAT_SERVICE_DO_YOU_WANT_TO_CANCEL='DSL' AND SUB.BID=WSD.LAND_LINE_NUMBER)) 
						WHERE 
							SUB.DATASET_TYPE IN ('DAILY_SUB_ACTIVITY')
							AND SUB.CUSTOMER_TYPE_SUB_CATEGORY = 'Residential Or General Subscriber'
							AND SUB.SUBLINE_OF_SERVICE  = 'Broadband Postpaid'
							AND SUB.REVENUE_COUNTABLE = 1
							AND SUB.UNIT_COUNTABLE = 1
							AND SUB.OPERATING_COMPANY_NAME = 'GTT'
							AND SUB.DATESTART BETWEEN '2020-10-01' AND CURRENT_DATE
							AND SUB.NET_DEACTIVATIONS<>0 AND SUB.TOTALOUTS=1
						    AND (SUB.ACCOUNTNUMBER, SUB.BID) NOT IN(SELECT ACCOUNTNUMBER, BID FROM GTT_REPORTING.SUBSCRIBER_END_ACTIVE) --REMOVE SUBSCRIBERS WHO REACTIVATED
               )AS SUBC
                 LEFT JOIN(
	               --------------------GPON subscribers ID Numbers and ACCOUNT EMAIL--------------------
			              SELECT 
			                DISTINCT
							 NVL(a.ID_NUMBER,'') AS ID_NUMBER
							,NVL(a.ACCOUNT_EMAIL,'') AS ACCOUNT_EMAIL
							,RATEPLAN_CURRENT_STATE_DESCRIPTION
							FROM 
							SALESFORCE.GTT_CRM_ACCOUNTS a
							LEFT JOIN
							SALESFORCE.GTT_CRM_SUBSCRIBERS b USING(ACCOUNTNUMBER)
							WHERE
							b.SUBLINE_OF_SERVICE_CODE IN(24)
							AND b.RATEPLAN_CURRENT_STATE_CODE IN(2)
							AND a.ID_NUMBER IS NOT NULL
          )AS GSUB ON ((SUBC.ID_NUMBER=GSUB.ID_NUMBER AND GSUB.ID_NUMBER<>'11111111') OR (SUBC.ACCOUNT_EMAIL=GSUB.ACCOUNT_EMAIL AND SUBC.ACCOUNT_EMAIL LIKE '%@%'))
 ) AS SUB
LEFT JOIN
---------------------GET PREV STATUS CODE BEEFORE CHURN STATUS----------------------------------------------
GTT_REPORTING.GTT_SAA_SUBSCRIBER_FEED_DETAIL SUBD ON SUB.ACCOUNTNUMBER=SUBD.ACCOUNTNUMBER AND SUB.BID=SUBD.BID AND SUB.DATESTART::DATE-1 =SUBD.DATESTART::DATE 
WHERE 
 ---------------------FILTER OUT SUBS WHO TERMINATED BECAUSE THE UPGRADED TO BLAZE .THIS IS NOT REAL CHURN-----------------------------------
(REASON_FOR_TERMINATION1 NOT IN('UpgradetoBlaze','UpgradedtootherGTTservice') OR REASON_FOR_TERMINATION1 IS NULL AND DSL_ASSOC_WITH_GPON=0 )
;

CREATE OR REPLACE TEMP TABLE GTT_REPORTING.SUBSCRIBER_MERGE AS 
-------MERGE SUBSCRIBER_END_ACTIVE AND CHURN SUBS, SET  DATEOUT
SELECT
 DATESTART
,ACCOUNTNUMBER 
,BID 
,SUBLINE_OF_SERVICE_SEGMENT
,DATEIN
,DATEOUT
,DATEOUT AS MOD_DATEOUT
,'9999-12-31' AS TERM_REQUEST_DATE
,'9999-12-31' AS LAST_SUSPENDDATE 
, NULL REASON_FOR_TERMINATION1
,FEAT_DATEIN 
,FEAT_DATEOUT 
,RATEPLAN_NAME
,RATEPLANCODE
,PROPRODUCTNAME
,PROPRODUCTCODE
,HAS_CHURNED
FROM 
GTT_REPORTING.SUBSCRIBER_END_ACTIVE
UNION
SELECT
DATESTART
,ACCOUNTNUMBER 
,BID 
,SUBLINE_OF_SERVICE_SEGMENT
,DATEIN
,DATEOUT
,CASE
   ---THESE ARE VOLUNTARY DEACTS. SUBMITTED IS THE DATE TERMINATION REQUEST WAS MADE.THIS DATE IS PREFERRED OVER THE ACTUAL DEACT DATE SINCE IT THERE IS A GAP WHEN ACTION IS TAKEN.
   ---INSTEAD GET SUB HISTORY BEFORE TERM REQUEST WAS MADE
   WHEN REASON_FOR_TERMINATION1 IS NOT NULL THEN DATE(SUBMITTED)
   ----MOSTLY INVOLUNTARY DEACTS. USE LAST SUSPEND DATE INSTEAD OF ACTUAL DEACT DATE
   ----UNDERSTAND WHAT WAS THE BEHAVIOUR of SUB WHILE IN ACTIVE STATUS
   WHEN REASON_FOR_TERMINATION1 IS NULL AND PREV_STATUSCODE='S' THEN DATE(SUSPENDDATE)
   ELSE 
     DATEOUT
 END AS  MOD_DATEOUT
,DATE(SUBMITTED) AS TERM_REQUEST_DATE
,SUSPENDDATE AS LAST_SUSPENDDATE 
,REASON_FOR_TERMINATION1
,FEAT_DATEIN 
,FEAT_DATEOUT 
,RATEPLAN_NAME
,RATEPLANCODE
,PROPRODUCTNAME
,PROPRODUCTCODE
,HAS_CHURNED
FROM 
GTT_REPORTING.CHURNED_SUBS
;
--MERGE AND DEDUPE, SET DATEOUT
CREATE OR REPLACE TEMP TABLE GTT_REPORTING.SUBSCRIBER_DEPUPE AS
SELECT
   DATESTART
  ,ACCOUNTNUMBER 
  ,BID 
  ,SUBLINE_OF_SERVICE_SEGMENT
  ,DATEIN
  ,DATEOUT
  ,TERM_REQUEST_DATE
  ,LAST_SUSPENDDATE 
  ,REASON_FOR_TERMINATION1
  ,HISTORY_START_DATE
  ,HISTORY_END_DATE 
  ,CUSTOMER_TENURE_MTHS 
  ,RATEPLAN_NAME
  ,RATEPLANCODE
  ,PROPRODUCTNAME
  ,PROPRODUCTCODE
  ,HAS_CHURNED
  ,SUM(ACTIVATION_FEE_DISCOUNT) AS ACTIVATION_FEE_DISCOUNT
  ,SUM(ACCESSORY_DISCOUNT) AS ACCESSORY_DISCOUNT
  ,SUM(MRC_DISCOUNT) AS MRC_DISCOUNT
  ,SUM(HAS_PLUMES_POD) AS HAS_PLUMES_POD
FROM(
SELECT 
  DISTINCT 
   A.DATESTART
  ,A.ACCOUNTNUMBER 
  ,A.BID 
  ,A.SUBLINE_OF_SERVICE_SEGMENT
  ,A.DATEIN
  ,A.DATEOUT
  ,A.TERM_REQUEST_DATE
  ,A.LAST_SUSPENDDATE 
  ,A.REASON_FOR_TERMINATION1
  ,CASE 
    WHEN A.HAS_CHURNED=0 AND A.DATEIN<DATEADD('MONTH',-6,A.DATESTART) THEN DATEADD('MONTH',-6,A.DATESTART)
    WHEN A.HAS_CHURNED=0 AND A.DATEIN>DATEADD('MONTH',-6,A.DATESTART) THEN A.DATEIN
    ELSE
      DATEADD('MONTH',-6,A.MOD_DATEOUT)
   END AS HISTORY_START_DATE
  ,CASE 
    WHEN A.HAS_CHURNED=0 THEN A.DATESTART
    ELSE
       A.MOD_DATEOUT
   END AS HISTORY_END_DATE 
   
  ,CASE
     WHEN A.HAS_CHURNED=0 THEN DATEDIFF('MONTH', TO_DATE(A.DATEIN), LAST_DAY(A.DATESTART))
     ELSE
       DATEDIFF('MONTH', TO_DATE(A.DATEIN), A.DATEOUT) 
    END AS CUSTOMER_TENURE_MTHS 
  ,A.RATEPLAN_NAME
  ,A.RATEPLANCODE
  ,A.PROPRODUCTNAME
  ,A.PROPRODUCTCODE
  ,HAS_CHURNED
  --------------------------DISCOUNT RECEIVED-------------------------------
  ,CASE
     WHEN UPPER(B.FEATURE_NAME) LIKE '%ACTIVATION FEE%' THEN 1
     ELSE
      0
   END AS ACTIVATION_FEE_DISCOUNT
  ,CASE
    WHEN (UPPER(B.FEATURE_NAME) LIKE '%BLAZE POD%' OR  UPPER(B.FEATURE_NAME) LIKE '%BLAZE SUPER POD%') AND  UPPER(B.FEATURE_NAME) LIKE '%DISCOUNT%' THEN 1
    ELSE
     0
   END AS ACCESSORY_DISCOUNT
 ,CASE
   WHEN UPPER(B.FEATURE_NAME) LIKE '%MONTH%' AND  UPPER(B.FEATURE_NAME) LIKE '%DISCOUNT%' THEN 1
   WHEN UPPER(B.FEATURE_NAME) LIKE 'DSL MRC%' THEN 1
   WHEN UPPER(B.FEATURE_NAME) LIKE 'GPON MRC%' THEN 1
   ELSE
     0
  END AS MRC_DISCOUNT

  ,CASE
    WHEN UPPER(B.FEATURE_NAME) LIKE '%BLAZE POD%' OR  UPPER(B.FEATURE_NAME) LIKE '%BLAZE SUPER POD%' THEN 1
    ELSE
     0
   END AS HAS_PLUMES_POD
 FROM
 GTT_REPORTING.SUBSCRIBER_MERGE A
 LEFT JOIN
 ATNI_PROD.ATNI_ANALYTICS.SV_FEATURE_BG_END_WEEKLY_MONTHLY_SNAPSHOT_DAILYACTIVITY B  ON A.ACCOUNTNUMBER=B.ACCOUNTNUMBER AND A.BID=B.BID
                                                                                          AND B.FEATURETYPE='MP' AND B.LINE_OF_FEATURE='Discount'
 
 WHERE
  (A.ACCOUNTNUMBER,A.BID,A.DATEOUT,A.FEAT_DATEIN,A.FEAT_DATEOUT,NVL(TERM_REQUEST_DATE,'9999-12-31')) IN(
																	     SELECT 
																	      ACCOUNTNUMBER
																	     ,BID
																	     ,MAX(DATEOUT) AS DATEOUT
																	     ,MAX(FEAT_DATEIN) AS FEAT_DATEIN
																	     ,MAX(FEAT_DATEOUT) AS FEAT_DATEOUT
																	     ,MAX(NVL(TERM_REQUEST_DATE,'9999-12-31')) AS TERM_REQUEST_DATE
																	     FROM 
																	     GTT_REPORTING.SUBSCRIBER_MERGE
																	     WHERE
																	     (ACCOUNTNUMBER, BID, DATEIN) IN(
																					 SELECT 
																					 ACCOUNTNUMBER
																					 ,BID
																					 ,MAX(DATEIN) AS DATEIN
																					 FROM 
																					 GTT_REPORTING.SUBSCRIBER_MERGE
																					 GROUP BY 1,2
																	             )
																	      GROUP BY 1,2
                                                                   )
   ) AS Q
   GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17
 ;
-------------found three gpon subs with mutiple blaze offers. checks show that both plans were activated on the same day. there isn't a good way to filter out the duplicates.
-------------therefore, setting the product name to the rateplan name(residential fiber)
UPDATE 
GTT_REPORTING.SUBSCRIBER_DEPUPE
   SET PROPRODUCTNAME=RATEPLAN_NAME, PROPRODUCTCODE=RATEPLANCODE
WHERE 
(ACCOUNTNUMBER,BID) IN(
					SELECT 
					ACCOUNTNUMBER,
					BID
					FROM 
					GTT_REPORTING.SUBSCRIBER_DEPUPE
					GROUP BY 1,2 HAVING COUNT(1)>1
);

CREATE OR REPLACE TEMP TABLE GTT_REPORTING.SUBSCRIBER_DEMOGRAPHICS1 AS 
SELECT 
DISTINCT A.*
FROM 
GTT_REPORTING.SUBSCRIBER_DEPUPE A
;


------------------ADDRESSES DUPES CAUSED BY  UPGRADES/DOWNGRADES DONE--------------
CREATE OR REPLACE  TEMP TABLE GTT_REPORTING.SUBSCRIBER_DEMOGRAPHICS_A AS 
SELECT 
A.DATESTART,
A.ACCOUNTNUMBER,
A.BID,
A.SUBLINE_OF_SERVICE_SEGMENT,
A.DATEIN,
A.DATEOUT,
A.TERM_REQUEST_DATE,
A.LAST_SUSPENDDATE,
A.REASON_FOR_TERMINATION1,
A.HISTORY_START_DATE,
A.HISTORY_END_DATE,
A.CUSTOMER_TENURE_MTHS,
A.RATEPLAN_NAME,
A.RATEPLANCODE,
B.PROPRODUCTNAME, ---MOST RECENT PLAN
A.PROPRODUCTCODE,
A.HAS_CHURNED,
A.ACTIVATION_FEE_DISCOUNT,
A.ACCESSORY_DISCOUNT,
A.MRC_DISCOUNT,
A.HAS_PLUMES_POD
FROM(

		SELECT 
		*
		FROM
		GTT_REPORTING.SUBSCRIBER_DEMOGRAPHICS1
		WHERE
		(ACCOUNTNUMBER, BID, DATEIN) IN(
										SELECT 
										ACCOUNTNUMBER, BID, MIN(DATEIN) AS DATEIN
										FROM 
										GTT_REPORTING.SUBSCRIBER_DEMOGRAPHICS1 A
										GROUP BY 1,2
		) 
) AS A

LEFT JOIN 
(
    SELECT 
		*
		FROM
		GTT_REPORTING.SUBSCRIBER_DEMOGRAPHICS1
		WHERE
		(ACCOUNTNUMBER, BID, DATEIN) IN(
										SELECT 
										ACCOUNTNUMBER, BID, MAX(DATEIN) AS DATEIN
										FROM 
										GTT_REPORTING.SUBSCRIBER_DEMOGRAPHICS1 A
										GROUP BY 1,2
		) 


) AS B ON A.ACCOUNTNUMBER=B.ACCOUNTNUMBER AND A.BID=B.BID
;
--------------------------------------------------------------------------MRC------------------------------------------------
CREATE OR REPLACE TEMP TABLE SUB_MRC AS 
SELECT 
		SUBD.ACCOUNTNUMBER,
		SUB.BID,
		SUB.SUBLINE_OF_SERVICE_SEGMENT,
		SUB.RATEPLAN_NAME,
		SUB.DATEIN,
		RC.STATEMENT_DATE,
		SUB.HAS_CHURNED,
		RC.LAST_MRC 
		FROM 
		GTT_REPORTING.SUBSCRIBER_DEMOGRAPHICS_A SUB
		LEFT JOIN 
		GTT_REPORTING.GTT_SAA_SUBSCRIBER_FEED_DETAIL SUBD ON SUBD.DATESTART=SUB.DATESTART AND SUB.ACCOUNTNUMBER=SUBD.ACCOUNTNUMBER AND SUB.BID=SUBD.BID
		LEFT JOIN
		(
		
		    SELECT
		    ACCOUNT_NO,
		    SUBSCR_NO,
		    STATEMENT_DATE,
		    ROUND(SUM(AMOUNT+TOTAL_DISCOUNT_AMT)/100)  AS LAST_MRC
		    FROM
		    GTT_REPORTING.BILL_INVOICE 
		    INNER JOIN
		    GTT_REPORTING.BILL_INVOICE_DETAIL_EXTRACT USING(BILL_REF_NO)
		    WHERE
		    (ACCOUNT_NO,SUBSCR_NO,STATEMENT_DATE ) IN(
		    
													    SELECT
													    ACCOUNT_NO,
													    SUBSCR_NO,
													    MAX(STATEMENT_DATE) AS STATEMENT_DATE 
													    FROM
													    GTT_REPORTING.BILL_INVOICE 
													    INNER JOIN
													    GTT_REPORTING.BILL_INVOICE_DETAIL_EXTRACT USING(BILL_REF_NO)
													    WHERE
													    DATE_TRUNC('MONTH',STATEMENT_DATE)<>DATE_TRUNC('MONTH',CURRENT_DATE)
													    GROUP BY 1,2
		       )
		     AND TYPE_CODE=2
		     GROUP BY 1,2,3
			
        ) AS RC ON SUBD.ACCOUNTNUMBER=RC.ACCOUNT_NO AND SUBD.SUBSCR_NO=RC.SUBSCR_NO
        
;
        
CREATE OR REPLACE TEMP TABLE GTT_REPORTING.SUBSCRIBER_DEMOGRAPHICS AS 

SELECT
A.*,
B.LAST_MRC,
CASE 
   WHEN B.LAST_MRC>=12999  AND SUBLINE_OF_SERVICE_SEGMENT='GPON' THEN 'HIGH'
   WHEN B.LAST_MRC BETWEEN 10999 AND 12998 AND SUBLINE_OF_SERVICE_SEGMENT='GPON'  THEN 'MEDIUM'
   WHEN B.LAST_MRC<10999 AND  SUBLINE_OF_SERVICE_SEGMENT='GPON' THEN 'LOW'
   WHEN B.LAST_MRC>=9000  AND SUBLINE_OF_SERVICE_SEGMENT='DSL' THEN 'HIGH'
   WHEN B.LAST_MRC  BETWEEN 6000 AND 8999 AND SUBLINE_OF_SERVICE_SEGMENT='DSL' THEN 'MEDIUM'
   WHEN B.LAST_MRC<6000 AND  SUBLINE_OF_SERVICE_SEGMENT='DSL' THEN 'LOW'
   ELSE 
     'LOW'
END CUSTOMER_VALUE
FROM 
GTT_REPORTING.SUBSCRIBER_DEMOGRAPHICS_A A
LEFT JOIN
SUB_MRC B USING(ACCOUNTNUMBER,BID)

;


CREATE OR REPLACE TEMP TABLE GTT_REPORTING.CRM_SUPPORT_CASES AS 
-------------------------------------CRM CASES--------------------------------------------------------------------------
SELECT
*
FROM(
			SELECT
			SUB.ACCOUNTNUMBER,
			SUB.BID,
			SUB.SUBLINE_OF_SERVICE_SEGMENT AS PRODUCT_FOCUS,
		    SUM(CAS.BROWSING) AS BROWSING,
		    SUM(CAS.BAD_EQUIPMENT) AS BAD_EQUIPMENT,
		    SUM(CAS.MISAPPLIED_PAYMENT_OR_CHARGE) AS MISAPPLIED_PAYMENT_OR_CHARGE,
		    SUM(CAS.CALLING_PROBLEM) AS CALLING_PROBLEM,
		    SUM(CAS.POOR_OR_NO_CONNECTIVITY) AS POOR_OR_NO_CONNECTIVITY,
		    SUM(CAS.FEE_QUESTIONS) AS FEE_QUESTIONS,
		    SUM(CAS.REQUEST_INFORMATION) AS REQUEST_INFORMATION,
		    SUM(CAS.BALANCE_INQUIRY) AS BALANCE_INQUIRY,
		    SUM(CAS.UPGRADE_DOWNGRADE_SERVICE) AS UPGRADE_DOWNGRADE_SERVICE,
		    SUM(CAS.REBATE_OR_REFUND) AS REBATE_OR_REFUND,
		    SUM(CAS.TRANSFER_SERVICE) AS TRANSFER_SERVICE,
		    SUM(CAS.MISCELLANEOUS) AS MISCELLANEOUS,
			SUM(CASE
			     WHEN UPPER(STATUS)='RESOLVED' AND (BROWSING>0 OR BAD_EQUIPMENT>0 OR MISAPPLIED_PAYMENT_OR_CHARGE>0 OR CALLING_PROBLEM>0 OR POOR_OR_NO_CONNECTIVITY>0) THEN 1
			    ELSE 
			     0
			END) RESOLVED_CASES,
			
			SUM(CASE
			     WHEN UPPER(STATUS)<>'RESOLVED' AND (BROWSING>0 OR BAD_EQUIPMENT>0 OR MISAPPLIED_PAYMENT_OR_CHARGE>0 OR CALLING_PROBLEM>0 OR POOR_OR_NO_CONNECTIVITY>0) THEN 1
			    ELSE 
			     0
			END) UNRESOLVED_CASES
			FROM
			GTT_REPORTING.SUBSCRIBER_DEMOGRAPHICS SUB
		   INNER JOIN 
			(
			SELECT 
			DATE(A.CREATEDDATE) AS CREATEDDATE,
			A.CASENUMBER,
			B.GTT_ACCOUNT_NUMBER__C,
			CASE 
			  WHEN C.TELEPHONE_NUMBER__C IS NOT NULL THEN C.TELEPHONE_NUMBER__C
			  ELSE
			     A.C1_SUBSCRIBER_DESCRIPTION__C
			END AS TELEPHONE_NUMBER,
			C.TELEPHONE_NUMBER__C,
			A.STATUS,
			CASE 
			 WHEN CALL_REASON  IN('Slow browsing','Intermittent Browsing') THEN 1
			 ELSE 
			   0
			END AS BROWSING,
			CASE 
			 WHEN CALL_REASON  IN('Faulty Modem','Faulty ONT','Red Alarm Light') THEN 1
			 ELSE 
			   0
			END AS BAD_EQUIPMENT,
						
			CASE 
			 WHEN CALL_REASON  IN('Charged incorrectly for service offering',
			                            'Promotional offer not added',
			                             'Unapplied payments',
			                             'Charged for incorrect billing period',
			                             'Payment not processed',
			                             'Incorrect Billing/Charges/Credits',
			                             'Misapplied Payment (s)'
			                            )  THEN 1
			 ELSE 
			   0
			END AS MISAPPLIED_PAYMENT_OR_CHARGE,
			CASE 
			 WHEN CALL_REASON IN('Cant break dial tone', 'Can?t Break Dial Tone','Line noisy/static/radio interference', 'Calls cutting off','Calls Cut-Off','Calls Dropped and Poor Call Quality',
			                           'Unable to make calls (postpaid)', 'Unable to make calls (prepaid)', 'Unable to receive a call (prepaid)','Cant Send/Receive Calls', 'Consistent Dropped Calls','International Calls Problem',
			                           'Unable to make calls'
			             
			                         ) THEN 1
			 ELSE 
			   0
			END AS CALLING_PROBLEM,
		    CASE 
			 WHEN CALL_REASON  IN('Intermittent connectivity', 'No connectivity','Equipment Malfunctioning - Unable to Browse','No LAN/Ethernet Light','No Status ADSL/DSL Light',
			                      'Unable to Browse', 'No Activity/Internet Light','Poor Signal (WAN/LAN on PRO/Easy ST)'
			                     ) THEN 1
			 ELSE 
			   0
			END AS POOR_OR_NO_CONNECTIVITY,
			CASE 
			 WHEN CALL_REASON  IN('Promise to pay','Reconnection Fee','Querying Disconnection /Reconnection Fee','Querying Late Payment Fee') THEN 1
			 ELSE 
			   0
			END AS FEE_QUESTIONS,			
		    CASE 
			 WHEN CALL_REASON IN('MMG -How does it work?','WiFi setup/ Wifi password reset','How to apply','MMG -Registration Follow Up',
			                          'New Service application Follow up', 'New service request follow up/past due','Payment location','Promotions',
			                          'Sign-Up Questions/Issues'
			                          )    THEN 1
			 ELSE 
			   0
			END AS REQUEST_INFORMATION,
			CASE 
			  WHEN CALL_REASON IN('Outstanding Balance/Due Date','Balance Inquiry') THEN 1
			  ELSE 
			    0
			END BALANCE_INQUIRY,
			
		    CASE 
			  WHEN CALL_REASON IN('Upgrade/ downgrade','Upsell Customer') THEN 1
			  ELSE 
			    0
			END UPGRADE_DOWNGRADE_SERVICE,
			CASE 
			  WHEN CALL_REASON IN('Rebate Request','Rebate for faults','Rental Rebate','Rental Rebate for Faults/Suspension') THEN 1
			  ELSE 
			    0
			END REBATE_OR_REFUND,
		    CASE 
			  WHEN CALL_REASON IN('Transfer of location/number','Transfer Service Location Query') THEN 1
			  ELSE 
			    0
			 END TRANSFER_SERVICE,
			 CASE 
			  WHEN CALL_REASON IN('Miscellaneous problem','Miscellaneous - DSL Problem') THEN 1
			  ELSE 
			    0
			 END MISCELLANEOUS

			FROM 
			(
				  SELECT
				  CREATEDDATE,
				  ACCOUNTID,
				  CASENUMBER,
				  C1_SUBSCRIBER_DESCRIPTION__C,
				  CASE 
				    WHEN TYPE_2ND_TIER__C IS NOT NULL THEN TYPE_2ND_TIER__C
				    ELSE
				       SUBJECT
				  END AS CALL_REASON,
				  ORIGIN,
				  STATUS
				  FROM
				  SALESFORCE."CASE"
			)AS  A
			LEFT JOIN
			SALESFORCE."ACCOUNT" B ON A.ACCOUNTID=B.ID
			LEFT JOIN
			SALESFORCE.ASSET C ON B.ID=C.ACCOUNTID
	      )AS CAS ON    SUB.ACCOUNTNUMBER=CAS.GTT_ACCOUNT_NUMBER__C     
			            AND CAS.CREATEDDATE BETWEEN SUB.HISTORY_START_DATE AND SUB.HISTORY_END_DATE
			          
	   GROUP BY 1,2,3
	) AS Q
;	

CREATE OR REPLACE TEMP TABLE GTT_REPORTING.SUBSCRIBER_REVENUES AS 

	SELECT 
		--Get subcriber last six months of billed revenue prior to churn(dateout)
		 SUB.ACCOUNTNUMBER
		,SUB.BID
		,BIL.ACCOUNT_TYPE
		,SUB.SUBLINE_OF_SERVICE_SEGMENT
	   --last 6 months
		,COUNT(DISTINCT CASE WHEN BIL.BILL_DATE BETWEEN  SUB.HISTORY_START_DATE AND SUB.HISTORY_END_DATE THEN BIL.BILL_DATE END) AS SIX_MONTH_NUM_BILLING_MONTHS
	     --revenue
		,ROUND(SUM(CASE WHEN BIL.BILL_DATE BETWEEN  SUB.HISTORY_START_DATE AND SUB.HISTORY_END_DATE THEN NVL(BILLED_MRC_GYD,0) ELSE 0 END)/210.00 ,2) AS SIX_MONTH_BILLED_MRC_USD
		,ROUND(SUM(CASE WHEN BIL.BILL_DATE BETWEEN  SUB.HISTORY_START_DATE AND SUB.HISTORY_END_DATE THEN NVL(BILLED_NRC_GYD,0) ELSE 0 END)/210.00 ,2) AS SIX_MONTH_BILLED_NRC_USD
		--overages
		,SUM(CASE WHEN BIL.TOTAL_BILLED_USAGE_GYD <>0 AND BIL.BILL_DATE BETWEEN  SUB.HISTORY_START_DATE AND SUB.HISTORY_END_DATE THEN 1 ELSE 0 END) AS SIX_MONTH_NUM_OVERAGES
		,ROUND(SUM(CASE WHEN BIL.BILL_DATE BETWEEN  SUB.HISTORY_START_DATE AND SUB.HISTORY_END_DATE THEN NVL(BIL.TOTAL_BILLED_USAGE_GYD,0) ELSE 0 END)/210.00,2) AS SIX_MONTH_TOTAL_OVREAGE_USD
		,ROUND(MAX(CASE WHEN BIL.BILL_DATE BETWEEN  SUB.HISTORY_START_DATE AND SUB.HISTORY_END_DATE THEN NVL(BIL.TOTAL_BILLED_USAGE_GYD,0) ELSE 0 END)/210.00 ,2) AS SIX_MONTH_MAX_OVERAGE_USD
		--averages
		,ROUND((SUM(CASE WHEN BIL.BILL_DATE BETWEEN SUB.HISTORY_START_DATE AND SUB.HISTORY_END_DATE THEN NVL(TOTAL_BILLED_USAGE_GYD,0) ELSE 0 END)/210.00) / NULLIF(COUNT(DISTINCT CASE WHEN BIL.BILL_DATE BETWEEN  SUB.HISTORY_START_DATE AND SUB.HISTORY_END_DATE THEN  BIL.BILL_DATE END),0),2) AS SIX_MONTH_AVERAGE_OVERAGE_USD
		,ROUND((SUM(CASE WHEN BIL.BILL_DATE BETWEEN SUB.HISTORY_START_DATE AND SUB.HISTORY_END_DATE THEN NVL(BILLED_MRC_GYD,0) ELSE 0 END)/210.00) /NULLIF(COUNT(DISTINCT CASE WHEN BIL.BILL_DATE BETWEEN  SUB.HISTORY_START_DATE AND SUB.HISTORY_END_DATE THEN  BIL.BILL_DATE END),0),2) AS SIX_MONTH_AVERAGE_BILLED_MRC_USD
		,ROUND((SUM(CASE WHEN BIL.BILL_DATE BETWEEN SUB.HISTORY_START_DATE AND SUB.HISTORY_END_DATE THEN NVL(BILLED_NRC_GYD,0) ELSE 0 END)/210.00)/ NULLIF(COUNT(DISTINCT CASE WHEN BIL.BILL_DATE BETWEEN  SUB.HISTORY_START_DATE AND SUB.HISTORY_END_DATE THEN  BIL.BILL_DATE END),0),2) AS SIX_MONTH_AVERAGE_BILLED_NRC_USD
		
	--lifetime
		--revenue
		,COUNT(DISTINCT CASE WHEN BIL.BILL_DATE<=SUB.HISTORY_END_DATE THEN BIL.BILL_DATE END) AS LIFETIME_NUM_BILLING_MONTHS
		,ROUND(SUM(CASE WHEN BIL.BILL_DATE<=SUB.HISTORY_END_DATE THEN NVL(BILLED_MRC_GYD,0) ELSE 0 END)/210.00 ,2)AS LIFETIME_BILLED_MRC_USD 
		,ROUND(SUM(CASE WHEN BIL.BILL_DATE<=SUB.HISTORY_END_DATE THEN NVL(BILLED_NRC_GYD,0) ELSE 0 END)/210.00 ,2) AS LIFETIME_BILLED_NRC_USD
		,SUM(CASE WHEN BIL.BILLED_NRC_GYD <>0 AND  BIL.BILL_DATE<=SUB.HISTORY_END_DATE THEN 1 ELSE 0 END) AS LIFETIME_NUM_NRCS
		--overages
		,SUM(CASE WHEN BIL.TOTAL_BILLED_USAGE_GYD <>0 AND BIL.BILL_DATE<=SUB.HISTORY_END_DATE  THEN 1 ELSE 0 END) AS LIFETIME_NUM_OVERAGES
		,ROUND(SUM(CASE WHEN BIL.BILL_DATE<=SUB.HISTORY_END_DATE THEN  NVL(BIL.TOTAL_BILLED_USAGE_GYD,0) ELSE 0 END)/210.00,2) AS LIFETIME_TOTAL_OVREAGE_USD
		,ROUND(MAX(CASE WHEN BIL.BILL_DATE<=SUB.HISTORY_END_DATE THEN NVL(BIL.TOTAL_BILLED_USAGE_GYD,0) ELSE 0 END)/210.00,2) AS LIFETIME_MAX_OVERAGE_USD
		--AVERAGES
		,ROUND((SUM(CASE WHEN BIL.BILL_DATE<=SUB.HISTORY_END_DATE THEN NVL(BIL.BILLED_MRC_GYD,0) ELSE 0 END) / NULLIF(COUNT(DISTINCT CASE WHEN BIL.BILL_DATE<=SUB.HISTORY_END_DATE THEN BIL.BILL_DATE END),0))/210.00,2) AS LIFETIME_AVG_BILLED_MRC_USD
		,ROUND((SUM(CASE WHEN BIL.BILL_DATE<=SUB.HISTORY_END_DATE THEN NVL(BIL.BILLED_NRC_GYD,0) ELSE 0 END) / NULLIF(COUNT(DISTINCT CASE WHEN BIL.BILL_DATE<=SUB.HISTORY_END_DATE THEN BIL.BILL_DATE END),0))/210.00,2) AS LIFETIME_AVG_BILLED_NRC_USD
		,ROUND((SUM(CASE WHEN BIL.BILL_DATE<=SUB.HISTORY_END_DATE THEN NVL(BIL.TOTAL_BILLED_USAGE_GYD,0) ELSE 0 END) / NULLIF(COUNT(DISTINCT CASE WHEN BIL.BILL_DATE<=SUB.HISTORY_END_DATE THEN BIL.BILL_DATE END),0))/210.00,2) AS LIFETIME_AVG_BILLED_OVERAGES_USD
	FROM
	(---Get subscr_no
		  SELECT
		  A.*,
		  B.SUBSCR_NO
		  FROM
		  GTT_REPORTING.SUBSCRIBER_DEMOGRAPHICS A
		  LEFT JOIN 
		  GTT_REPORTING.GTT_SAA_SUBSCRIBER_FEED_DETAIL B  ON A.ACCOUNTNUMBER=B.ACCOUNTNUMBER AND A.BID=B.BID 
		                                                    AND A.DATESTART=B.DATESTART
	) AS SUB
	INNER JOIN
	(
		SELECT
		BILL_MONTH,
		BILL_DATE,
		ACCOUNT_NO,
		SUBSCR_NO,
		ACCOUNT_TYPE,
		CASE
		  WHEN LINE_OF_BUSINESS IS NULL AND PRODUCT_LINE_VALUE LIKE '%DSL%' THEN 'DSL'
		  WHEN LINE_OF_BUSINESS IS NULL AND PRODUCT_LINE_VALUE LIKE '%GPON%' THEN 'GPON'
		  WHEN LINE_OF_BUSINESS IS NULL AND PRODUCT_LINE_VALUE LIKE '%Wireline%' THEN 'Wireline'
		  WHEN LINE_OF_BUSINESS IS NULL AND PRODUCT_LINE_VALUE LIKE '%Wireless%' THEN 'GSM Mobile'
		  WHEN LINE_OF_BUSINESS IS NULL AND PRODUCT_LINE_VALUE LIKE '%PBX%' THEN 'Wireline'
		  WHEN LINE_OF_BUSINESS = 'Not Defined' THEN NULL --want to do a max later to roll up all the not defined'
		  ELSE
		     LINE_OF_BUSINESS
		END AS SUBLINE_OF_SERVICE_SEGMENT,
		--BILLING_CATEGORY,
		OFFER_ID,
		DISPLAY_VALUE AS OFFER,
		TOTAL_BILLED_USAGE_GYD,
		BILLED_DATA_USAGE_GYD,
		BILLED_SMS_USAGE_GYD,
		BILLED_VOICE_USAGE_GYD,
		BILLED_UNDEFINED_USAGE_GYD,
		BILLED_MRC_GYD,
		BILLED_NRC_GYD
		FROM(
		SELECT
		    TO_CHAR(BI.STATEMENT_DATE - INTERVAL '1 MONTH','YYYY-MM') AS BILL_MONTH,
		    TO_CHAR(BI.STATEMENT_DATE - INTERVAL '1 MONTH','YYYY-MM-DD') AS BILL_DATE,
		    BI.ACCOUNT_NO,
		    BID.SUBSCR_NO,
		    ACV.DISPLAY_VALUE AS ACCOUNT_TYPE,
		    BID.PRODUCT_LINE_ID,
		    PLV.DISPLAY_VALUE AS PRODUCT_LINE_VALUE,
		    CASE
		        WHEN OFR.SERVICE_CATEGORY_ID = 4 THEN 'GSM Mobile'
		        WHEN OFR.SERVICE_CATEGORY_ID = 8 THEN 'Wireline'
		        WHEN OFR.SERVICE_CATEGORY_ID = 12 THEN 'DSL'
		        WHEN OFR.SERVICE_CATEGORY_ID = 15 THEN 'Leased Line'
		        WHEN OFR.SERVICE_CATEGORY_ID = 17 THEN 'Calling Card'
		        WHEN OFR.SERVICE_CATEGORY_ID = 18 THEN 'WiMax'
		        WHEN OFR.SERVICE_CATEGORY_ID = 22 THEN 'Interconnect'
		        WHEN OFR.SERVICE_CATEGORY_ID = 24 THEN 'GPON'
		        ELSE 'Not Defined'
		   END AS LINE_OF_BUSINESS,
		   BID.OFFER_ID,
		   OFV.DISPLAY_VALUE,
		    SUM(CASE WHEN BID.TYPE_CODE=7 THEN NVL(AMOUNT+TOTAL_DISCOUNT_AMT,0)/100 ELSE 0 END) AS TOTAL_BILLED_USAGE_GYD, --overage 
		    SUM(CASE WHEN BID.TYPE_CODE=7 AND AGM.AUT_GROUP_ID IN(33,34) THEN NVL(AMOUNT+TOTAL_DISCOUNT_AMT,0)/100 ELSE 0 END) AS BILLED_DATA_USAGE_GYD, --overage
		    SUM(CASE WHEN BID.TYPE_CODE=7 AND AGM.AUT_GROUP_ID IN(24,38,41,42) THEN NVL(AMOUNT+TOTAL_DISCOUNT_AMT,0)/100 ELSE 0 END) AS BILLED_SMS_USAGE_GYD,--overage
		    SUM(CASE WHEN BID.TYPE_CODE=7 AND AGM.AUT_GROUP_ID IN(16,18,20,21,22,25,26,27,28,29,31,35,40,43,44,47,48,49,50,51,53,54) THEN NVL(AMOUNT+TOTAL_DISCOUNT_AMT,0)/100 ELSE 0 END) AS BILLED_VOICE_USAGE_GYD,
		    SUM(CASE WHEN BID.TYPE_CODE=7 AND (AGM.AUT_GROUP_ID IS NULL OR AUT_GROUP_ID=45) THEN NVL(AMOUNT+TOTAL_DISCOUNT_AMT,0)/100 ELSE 0 END) AS BILLED_UNDEFINED_USAGE_GYD,
		    SUM(CASE WHEN BID.TYPE_CODE=2 THEN NVL(AMOUNT+TOTAL_DISCOUNT_AMT,0)/100 ELSE 0 END) AS BILLED_MRC_GYD,
		    SUM(CASE WHEN BID.TYPE_CODE=3 THEN NVL(AMOUNT+TOTAL_DISCOUNT_AMT,0)/100 ELSE 0 END) AS BILLED_NRC_GYD
		    FROM
		    GTT_REPORTING.BILL_INVOICE BI 
		    INNER JOIN 
		    GTT_REPORTING.BILL_INVOICE_DETAIL_EXTRACT BID ON BI.BILL_REF_NO=BID.BILL_REF_NO
		    LEFT JOIN  GTT_REPORTING.AUT_GROUP_MAP AGM ON BID.SUBTYPE_CODE = AGM.AUT_ID
		                                                AND AGM.RESELLER_VERSION_ID =(SELECT MAX(RESELLER_VERSION_ID) FROM GTT_REPORTING.AUT_GROUP_MAP)
		    LEFT JOIN
		    GTT_REPORTING.CMF_EXTRACT CM ON BI.ACCOUNT_NO=CM.ACCOUNT_NO AND DATE(CM.EXTRACT_FILE_DATE)=CURRENT_DATE
		    LEFT JOIN
		    GTT_REPORTING.ACCOUNT_CATEGORY_VALUES ACV ON CM.ACCOUNT_CATEGORY=ACV.ACCOUNT_CATEGORY AND ACV.SERVICE_VERSION_ID=(SELECT MAX(SERVICE_VERSION_ID) FROM GTT_REPORTING.SERVICE_VERSION)
		    	AND acv.DISPLAY_VALUE='Residential / General Subscriber'
		    LEFT JOIN
		    GTT_REPORTING.OFFER_VALUES OFV ON BID.OFFER_ID=OFV.OFFER_ID AND OFV.RESELLER_VERSION_ID=(SELECT MAX(RESELLER_VERSION_ID) FROM GTT_REPORTING.RESELLER_VERSION)
		    LEFT JOIN
		    GTT_REPORTING.OFFER_REF OFR ON OFV.OFFER_ID=OFR.OFFER_ID AND OFR.RESELLER_VERSION_ID=(SELECT MAX(RESELLER_VERSION_ID) FROM GTT_REPORTING.RESELLER_VERSION)
		    LEFT JOIN 
		    GTT_REPORTING.PRODUCT_LINE_VALUES PLV ON PLV.PRODUCT_LINE_ID= BID.PRODUCT_LINE_ID  AND PLV.RESELLER_VERSION_ID=(SELECT MAX(RESELLER_VERSION_ID) FROM GTT_REPORTING.RESELLER_VERSION)
		    WHERE
		    BI.PREP_ERROR_CODE IS NULL
		    AND BI.PREP_STATUS =1
		    AND BI.BACKOUT_STATUS=0
		    AND BI.STATEMENT_DATE <=CURRENT_DATE
		    GROUP BY 1,2,3,4,5,6,7,8,9,10
		   ) AS Q	
		WHERE LINE_OF_BUSINESS NOT IN ('GSM Mobile','Wireline')
	)AS BIL
	     ON SUB.ACCOUNTNUMBER=BIL.ACCOUNT_NO AND SUB.SUBSCR_NO=BIL.SUBSCR_NO
	    
	GROUP BY
		1,2,3,4

;
------------------------------------------BILL PAYMENTS-----------------------------------------
CREATE OR REPLACE TEMP TABLE GTT_REPORTING.BILLED_PAYMENTS AS

SELECT DISTINCT
	 ACCOUNTNUMBER
	,MODE(P.PAYMENT_CHANNEL) AS  MOST_USED_PAYMENT_CHANNEL_6MTHS
	,SUM((P.TRANS_AMOUNT/100))/210 AS PAYMENT_AMOUNT_USD_6MTHS
	,SUM(1) AS NUM_OF_PAYMENTS_6MTHS
FROM(
		SELECT 
		DISTINCT
		 SUB.ACCOUNTNUMBER
		,BMF.POST_DATE
		,BMF.TRANS_DATE
		,BMF.TRANS_AMOUNT
		,CASE 
	       WHEN TRIM(BMF.TRANS_SOURCE)=1 AND BMF.TRANS_SUBMITTER<>'MMGUSER' THEN 'Retail Store'
	       WHEN TRIM(TRANS_SOURCE)=1 AND TRANS_SUBMITTER='MMGUSER'  THEN 'MMG'
	       WHEN TRANS_SOURCE=103 THEN 'MMG'
	       WHEN TRIM(TRANS_SUBMITTER)='AWAREX'  THEN 'MyAccount'
	       WHEN TRIM(UPPER(TRANS_SUBMITTER)) IN('LBX','GTTSAPI') AND TRANS_SOURCE<>103 THEN 'Agents' 
	       ELSE  
	           'User'
		   END AS PAYMENT_CHANNEL
	
		FROM 
		GTT_REPORTING.SUBSCRIBER_DEMOGRAPHICS SUB 
		LEFT JOIN
		GTT_REPORTING.BMF_EXTRACT BMF ON SUB.ACCOUNTNUMBER=BMF.ACCOUNT_NO 
		                                 AND BMF.TRANS_DATE BETWEEN SUB.HISTORY_START_DATE AND SUB.HISTORY_END_DATE
		                                 AND TRIM(BMF.ACTION_CODE)='APP' --APPLIED PAYMENTS
		                                 AND BMF.BMF_TRANS_TYPE NOT IN(16,33,51,52,53,80,90)
		                                 AND BMF.NO_BILL=0 --BILLABLE PAYMENTS
		                                 AND DATE(BMF.EXTRACT_FILE_DATE)<=CURRENT_DATE
) AS P
GROUP BY 1
;
----------------------------GET DSL AND GPON USAGE-----------------------------
CREATE OR REPLACE TEMP TABLE GTT_REPORTING.WIRELINE_WEBSITE_ACTIVITY AS 
SELECT
	ACCOUNTNUMBER
	,BID
	--ACTIVITY BLOCKS...at least one activity within 3 hour block
	,SUM(iff(WEBSITE_CATEGORY='BITTORRENT',ACTIVITY_BLOCKS,0)) AS ACTIVITY_BLOCKS_BITTORRENT_LAST90DAY
	,SUM(iff(WEBSITE_CATEGORY='COMPETITOR',ACTIVITY_BLOCKS,0)) AS ACTIVITY_BLOCKS_COMPETITOR_LAST90DAY
	,SUM(iff(WEBSITE_CATEGORY='SPEEDTEST',ACTIVITY_BLOCKS,0)) AS ACTIVITY_BLOCKS_SPEEDTEST_LAST90DAY
	,SUM(iff(WEBSITE_CATEGORY='OTT_VIDEO',ACTIVITY_BLOCKS,0)) AS ACTIVITY_BLOCKS_OTT_VIDEO_LAST90DAY
	,SUM(iff(WEBSITE_CATEGORY='GAMING',ACTIVITY_BLOCKS,0)) AS ACTIVITY_BLOCKS_GAMING_LAST90DAY
	,SUM(iff(WEBSITE_CATEGORY='OTHER',ACTIVITY_BLOCKS,0)) AS ACTIVITY_BLOCKS_OTHER_LAST90DAY
	--TRANSMITTED GB
	,SUM(iff(WEBSITE_CATEGORY='BITTORRENT',TOTAL_GIGABYTES,0)) AS TOTAL_GIGABYTES_BITTORRENT_LAST90DAY
	,SUM(iff(WEBSITE_CATEGORY='COMPETITOR',TOTAL_GIGABYTES,0)) AS TOTAL_GIGABYTES_COMPETITOR_LAST90DAY
	,SUM(iff(WEBSITE_CATEGORY='SPEEDTEST',TOTAL_GIGABYTES,0)) AS TOTAL_GIGABYTES_SPEEDTEST_LAST90DAY
	,SUM(iff(WEBSITE_CATEGORY='OTT_VIDEO',TOTAL_GIGABYTES,0)) AS TOTAL_GIGABYTES_OTT_VIDEO_LAST90DAY
	,SUM(iff(WEBSITE_CATEGORY='GAMING',TOTAL_GIGABYTES,0)) AS TOTAL_GIGABYTES_GAMING_LAST90DAY
	,SUM(iff(WEBSITE_CATEGORY='OTHER',TOTAL_GIGABYTES,0)) AS TOTAL_GIGABYTES_OTHER_LAST90DAY
	
	--AVERAGES
	,SUM(iff(WEBSITE_CATEGORY='BITTORRENT',TOTAL_GIGABYTES,0))/NULLIF(COUNT(DISTINCT DATE_PERIOD_MONTH),0) AS AVG_GIGABYTES_BITTORRENT_LAST90DAY
	,SUM(iff(WEBSITE_CATEGORY='COMPETITOR',TOTAL_GIGABYTES,0))/NULLIF(COUNT(DISTINCT DATE_PERIOD_MONTH),0) AS AVG_GIGABYTES_COMPETITOR_LAST90DAY
	,SUM(iff(WEBSITE_CATEGORY='SPEEDTEST',TOTAL_GIGABYTES,0))/NULLIF(COUNT(DISTINCT DATE_PERIOD_MONTH),0) AS AVG_GIGABYTES_SPEEDTEST_LAST90DAY
	,SUM(iff(WEBSITE_CATEGORY='OTT_VIDEO',TOTAL_GIGABYTES,0))/NULLIF(COUNT(DISTINCT DATE_PERIOD_MONTH),0) AS AVG_GIGABYTES_OTT_VIDEO_LAST90DAY
	,SUM(iff(WEBSITE_CATEGORY='GAMING',TOTAL_GIGABYTES,0))/NULLIF(COUNT(DISTINCT DATE_PERIOD_MONTH),0) AS AVG_GIGABYTES_GAMING_LAST90DAY
	,SUM(iff(WEBSITE_CATEGORY='OTHER',TOTAL_GIGABYTES,0))/NULLIF(COUNT(DISTINCT DATE_PERIOD_MONTH),0) AS AVG_GIGABYTES_OTHER_LAST90DAY
FROM 
(
	SELECT 
	    DATE_TRUNC('MONTH',TO_DATE(DATE_PERIOD)) AS DATE_PERIOD_MONTH
		,SUB.ACCOUNTNUMBER
		,SUB.BID
		,CASE
			WHEN upper(PROTOCOL) LIKE '%BITTORRENT%' THEN 'BITTORRENT'
			WHEN upper(PROTOCOL) LIKE '%DIGICEL%' THEN 'COMPETITOR'
			--need recent competitor activity...
			WHEN upper(PROTOCOL) IN ('SPEEDTEST') THEN 'SPEEDTEST'
			WHEN upper(PROTOCOL) LIKE '%NETWORK%' AND upper(PROTOCOL) <> 'PLAYSTATION NEWTORK' THEN 'OTT_VIDEO'
			WHEN upper(PROTOCOL) IN (
				'YOUNOW'
				,'CNN VIDEO'
				,'DISNEY VIDEOS'
				,'YOUTUBE'
				,'MOBDRO'
				,'MPEG'
				,'BRIGHTCOVE'
				,'VIMEO'
				,'CBS LOCAL'
				,'TBS'
				,'YOUKU'
				,'DAILYMOTION'
				,'DIRECTV'
				,'QQLIVE'
				,'NDTV'
				,'PERISCOPE'
				,'MTV'
				,'IQIYI'
				,'CBC'
				,'QVOD'
				,'DISNEYLIFE'
				,'UNIVISION'
				,'COCO'
				,'TELLY'
				,'FOOD NETWORK'
				,'CARTOON NETWORK'
				,'DISH NETWORK VOD'
				) THEN 'OTT_VIDEO'
			WHEN upper(PROTOCOL) IN (
				'ROBLOX'
				,'XBOX LIVE VIDEO'
				,'BIGO'
				,'PLAYSTATION NETWORK'
				,'GAMELOFT'
				,'GARENA'
				,'THUNDER'
				,'RESPAWNABLES'
				,'NETMARBLE'
				,'NEWCS'
				,'POKEMON Go'
				) OR upper(PROTOCOL) LIKE 'PC:%' 
				OR upper(PROTOCOL) LIKE 'PS3:%'
				OR upper(PROTOCOL) LIKE 'PS4 %' 
				OR upper(PROTOCOL) LIKE 'XBOX:%' 
				OR upper(PROTOCOL) LIKE 'ZYNGA::%' THEN 'GAMING'
			ELSE 'OTHER'
			END AS WEBSITE_CATEGORY
		,ROUND(SUM(TOTAL_TRANSMITTED_BYTES)/(1024*1024*1024),3) AS TOTAL_GIGABYTES
		,sum(TOTAL_NEW_CONNECTIONS) AS TOTAL_NEW_CONNECTIONS 
		,count(1) AS ACTIVITY_BLOCKS
	FROM 
	GTT_REPORTING.SUBSCRIBER_DEMOGRAPHICS SUB
	LEFT JOIN
	ATNI_PROD.CDR.GTT_SANDVINE_WIRELINE SAN  ON '592' || REGEXP_SUBSTR(SAN.MSIDN,'\\d{7}')=SUB.BID
	                                            AND DATE_PERIOD BETWEEN DATEADD('DAY',-90,SUB.HISTORY_END_DATE) AND SUB.HISTORY_END_DATE

	GROUP BY 1,2,3,4
	
) a 
GROUP BY 1,2
;

--------------------------RELATED TO GPON/DSL--------------------------------------
--------------------------------------DAILY USAGE ANALYSIS-----------------------
CREATE OR REPLACE TEMP TABLE GTT_REPORTING.DAILY_WIRELINE_WEBSITE_EXPERIENCE AS 
SELECT 
REGEXP_SUBSTR(MSIDN,'\\d{7}') AS MSIDN
,ACCOUNTNUMBER
,BID
,CASE 
	WHEN DATEIN>DATEADD('DAY',-90, HISTORY_END_DATE) THEN DATEDIFF('DAY',HISTORY_END_DATE,DATEIN)
	ELSE
	   90
 END USAGE_REPORTING_DAYS --NUMBER OF USAGE REPORTING DAYS 
,SUM(NUM_OF_USAGE_DAYS) AS NUM_OF_USAGE_DAYS
,SUM(NUM_OF_OUTAGES) AS NUM_OF_OUTAGE_DAYS
,SUM(NUM_OF_LOW_USAGE) AS NUM_OF_LOW_USAGE_DAYS
,SUM(NUM_OF_BELOW_PAR) AS NUM_OF_BELOW_PAR_DAYS

FROM(
	SELECT 
		DATE_TRUNC('MONTH',TO_DATE(DATE_PERIOD)) AS DATE_PERIOD_MONTH
		,MSIDN
		,ACCOUNTNUMBER
		,BID
		,DATEIN
		,HISTORY_START_DATE
		,HISTORY_END_DATE
		,SUM(OUTAGE) AS NUM_OF_OUTAGES
		,SUM(LOW_USAGE) AS NUM_OF_LOW_USAGE
		,SUM(BELOW_PAR) AS NUM_OF_BELOW_PAR
		,COUNT(MSIDN) AS NUM_OF_USAGE_DAYS
		,MAX(DATE_PERIOD) AS LAST_USAGE_DATE
	FROM(
			SELECT
			SAN.DATE_PERIOD
			,SAN.MSIDN
			,SUB.ACCOUNTNUMBER
			,SUB.BID
			,SUB.DATEIN
			,SUB.HISTORY_START_DATE
			,SUB.HISTORY_END_DATE
			,SAN.STATUSCODE
			,SAN.TOTAL_GB
			,SAN.TOTAL_GB_DELTA_TO_PREV_DAY
			
			,NVL(ROUND(SAN.TOTAL_GB_DELTA_TO_PREV_DAY/NULLIF(SAN.PREV_DAY_TOTAL_GB,0) * 100),-100) AS PERC_TOTAL_GB_DELTA
			,CASE
			 WHEN SAN.STATUSCODE='A' AND SAN.TOTAL_BYTES=0 THEN 1 -- ISSUE WITH SERVICE
			 ELSE 
			   0
			END AS OUTAGE
			,CASE
			 WHEN SAN.STATUSCODE='A' AND SAN.TOTAL_BYTES>0 AND SAN.TOTAL_GB=0  THEN 1 --SUB MIGHT HAVE POWER OUTAGE OR ISSUE WITH SERVICE
			 ELSE 
			   0
			END AS LOW_USAGE
			,CASE 
			  --------FLAG NUMBER OF TIMES CURRENT DAY USAGE WHEN MORE THAN 50% LESS THAN PREVIOUS DAY------------
			  WHEN NVL(ROUND(SAN.TOTAL_GB_DELTA_TO_PREV_DAY/NULLIF(SAN.PREV_DAY_TOTAL_GB,0) * 100),-100) BETWEEN -99 AND -50 AND SAN.TOTAL_BYTES>0 AND SAN.STATUSCODE='A' THEN 1
			  ELSE 
			  0
			 END AS BELOW_PAR
			FROM
			 GTT_REPORTING.SUBSCRIBER_DEMOGRAPHICS SUB
			 INNER JOIN( SELECT 
						 MSIDN
						 , DATE_PERIOD
						 , ACCOUNTNUMBER
						 , BID
						 , STATUSCODE
						 , TOTAL_BYTES
						 , TOTAL_GB
						 , LAG(TOTAL_GB,1,0) OVER(PARTITION BY MSIDN ORDER BY DATE_PERIOD) AS PREV_DAY_TOTAL_GB
						 , TOTAL_GB - LAG(TOTAL_GB,1,0) OVER(PARTITION BY MSIDN ORDER BY DATE_PERIOD) AS TOTAL_GB_DELTA_TO_PREV_DAY
						  FROM(
						        SELECT 
								  CDR.MSIDN
								  , CDR.DATE_PERIOD
								  , SUB.ACCOUNTNUMBER
								  , SUB.BID
								  , SUB.STATUSCODE
								  , ROUND(SUM(CDR.TOTAL_BYTES/1024/1024/1024)) AS TOTAL_GB
							      , SUM(TOTAL_BYTES) AS TOTAL_BYTES 
							      , SUM(TOTAL_NEW_CONNECTIONS) AS TOTAL_NEW_CONNECTIONS
								  FROM 
								  ATNI_PROD.CDR.GTT_SANDVINE_WIRELINE CDR
								  LEFT JOIN
								  (       -------------------------------GET CURRENT ACCOUNT BY DATESTART------------------------
								          SELECT 
								             DATESTART
											 , ACCOUNTNUMBER
											 , BID
											 , STATUSCODE 
											 FROM
											 GTT_REPORTING.GTT_SAA_SUBSCRIBER_FEED_DETAIL
											 WHERE
											 (DATESTART,BID, DATEIN) IN(
																		  SELECT 
																		  DATESTART,BID, MAX(DATEIN) AS DATEIN 
																		  FROM
																		  GTT_REPORTING.GTT_SAA_SUBSCRIBER_FEED_DETAIL
																		  WHERE
																		  REPORTABLE=1
																		  GROUP BY DATESTART,BID
											   ) 
				 			  
								  ) AS SUB ON '592' || REGEXP_SUBSTR(CDR.MSIDN,'\\d{7}')=SUB.BID AND CDR.DATE_PERIOD=SUB.DATESTART
								  GROUP BY 1,2,3,4,5
					    ) AS A 
			 )AS SAN ON SUB.ACCOUNTNUMBER=SAN.ACCOUNTNUMBER AND SUB.BID=SAN.BID
			            AND SAN.DATE_PERIOD BETWEEN DATEADD('DAY',-90,SUB.HISTORY_END_DATE) AND SUB.HISTORY_END_DATE
		) AS C
	   GROUP BY 1,2,3,4,5,6,7
	) AS Q
GROUP BY 1,2,3,4
;  


--------------------------RELATED TO GPON/DSL--------------------------------------
CREATE OR REPLACE TEMP TABLE GTT_REPORTING.WEEKLY_WIRELINE_WEBSITE_EXPERIENCE AS 
SELECT 
REGEXP_SUBSTR(MSIDN,'\\d{7}') AS MSIDN
,ACCOUNTNUMBER
,BID
,SUM(WEEKLY_NUM_OF_OUTAGES) AS WEEKLY_NUM_OF_OUTAGES
,SUM(TOTAL_GIGABYTES) AS TOTAL_GIGABYTES
,SUM(WEEKLY_NUM_OF_LOW_USAGE) AS WEEKLY_NUM_OF_LOW_USAGE
,SUM(WEEKLY_NUM_OF_BELOW_PAR) AS WEEKLY_TOTAL_NUM_OF_BELOW_PAR
,SUM(WEEKLY_AVG_BELOW_PAR) AS WEEKLY_AVG_NUM_BELOW_PAR
,SUM(NUM_OF_WEEKLY_AVG_USAGE_DECLINE) AS NUM_OF_WEEKLY_AVG_USAGE_DECLINE
,SUM(NUM_OF_WEEKLY_USAGE_DAYS_DECLINE) AS NUM_OF_WEEKLY_USAGE_DAYS_DECLINE
FROM(
	 SELECT 
	 DATE_TRUNC('MONTH',TO_DATE(WEEK_PERIOD)) AS DATE_PERIOD_MONTH
	 ,MSIDN
     ,ACCOUNTNUMBER
     ,BID
     ,SUM(WEEK_TOTAL_GB) AS TOTAL_GIGABYTES
	 ,SUM(OUTAGE) AS WEEKLY_NUM_OF_OUTAGES
	 ,SUM(LOW_USAGE) AS WEEKLY_NUM_OF_LOW_USAGE
	 ,SUM(TOTAL_USAGE_BELOW_PAR) AS WEEKLY_NUM_OF_BELOW_PAR
	 ,SUM(AVG_BELOW_PAR) AS WEEKLY_AVG_BELOW_PAR
	 ,SUM(NUM_OF_WEEKLY_AVG_USAGE_DECLINE) AS NUM_OF_WEEKLY_AVG_USAGE_DECLINE
	 ,SUM(NUM_OF_WEEKLY_USAGE_DAYS_DECLINE) AS NUM_OF_WEEKLY_USAGE_DAYS_DECLINE
	FROM(
			SELECT
			SAN.WEEK_PERIOD
			,SAN.MSIDN
			,SUB.ACCOUNTNUMBER
			,SUB.BID
			,SAN.STATUSCODE
			--------------------TOTAL USAGE--------------------
			,SAN.PREV_WEEK_TOTAL_GB
			,SAN.WEEK_TOTAL_GB
			,SAN.TOTAL_USAGE_WEEK_DELTA
			,ROUND(SAN.TOTAL_USAGE_WEEK_DELTA/NULLIF(SAN.PREV_WEEK_TOTAL_GB,0) * 100) AS PERC_TOTAL_WEEK_DELTA
			------------AVERAGE---------------------
			,PREV_AVG_WEEK_TOTAL_GB
			,AVG_WEEK_TOTAL_GB
			,AVG_WEEK_DELTA
			,ROUND(SAN.AVG_WEEK_DELTA/NULLIF(SAN.PREV_AVG_WEEK_TOTAL_GB,0) * 100) AS PERC_AVG_WEEK_DELTA

			,CASE
			 WHEN SAN.STATUSCODE='A' AND SAN.WEEK_TOTAL_BYTES=0 THEN 1 --SUB MIGHT HAVE POWER OUTAGE OR ISSUE WITH SERVICE
			 ELSE 
			   0
			END AS OUTAGE
			,CASE
			 WHEN SAN.STATUSCODE='A' AND SAN.WEEK_TOTAL_BYTES>0 AND SAN.WEEK_TOTAL_GB<4  THEN 1 --SUB MIGHT HAVE POWER OUTAGE OR ISSUE WITH SERVICE
			 ELSE 
			   0
			END AS LOW_USAGE
			
			,CASE
			 WHEN AVG_WEEK_DELTA<0 THEN 1
			 ELSE 
			   0
			 END AS NUM_OF_WEEKLY_AVG_USAGE_DECLINE
			
			,CASE 
			  --------FLAG NUMBER OF TIMES CURRENT DAY USAGE WHEN MORE THAN 50% LESS THAN PREVIOUS DAY------------
			 -- WHEN NVL(ROUND(SAN.TOTAL_GB_DELTA_TO_PREV_WEEK_DAY/NULLIF(SAN.PREV_WEEK_TOTAL_GB,0) * 100),-100) BETWEEN -99 AND -50 AND SAN.WEEK_TOTAL_BYTES>0 AND SAN.STATUSCODE='A' THEN 1
			  WHEN NVL(ROUND(SAN.AVG_WEEK_DELTA/NULLIF(SAN.PREV_AVG_WEEK_TOTAL_GB,0) * 100),-100) BETWEEN -99 AND -50 AND SAN.WEEK_TOTAL_BYTES>0 AND SAN.STATUSCODE='A' THEN 1
			  ELSE 
			  0
			 END AS AVG_BELOW_PAR
			 
			 ,CASE 
			  --------FLAG NUMBER OF TIMES CURRENT DAY USAGE WHEN MORE THAN 50% LESS THAN PREVIOUS DAY------------
			  WHEN NVL(ROUND(SAN.TOTAL_USAGE_WEEK_DELTA/NULLIF(SAN.PREV_WEEK_TOTAL_GB,0) * 100),-100) BETWEEN -99 AND -50 AND SAN.WEEK_TOTAL_BYTES>0 AND SAN.STATUSCODE='A' THEN 1
			  ELSE 
			   0
			  END AS TOTAL_USAGE_BELOW_PAR
			  
			,CASE
			 WHEN NUM_OF_USAGE_DAYS_DELTA<0 THEN 1
			 ELSE 
			   0
			 END AS NUM_OF_WEEKLY_USAGE_DAYS_DECLINE
			FROM
			GTT_REPORTING.SUBSCRIBER_DEMOGRAPHICS SUB
			 INNER JOIN( SELECT 
						 MSIDN
						 , WEEK_PERIOD
						 , ACCOUNTNUMBER
						 , BID
						 , STATUSCODE
						 -------------------TOTAL USAGE ---------------------------------------------
						 , WEEK_TOTAL_BYTES
						 , WEEK_TOTAL_GB
						 , LAG(WEEK_TOTAL_GB,1,0) OVER(PARTITION BY MSIDN ORDER BY WEEK_PERIOD) AS PREV_WEEK_TOTAL_GB
						 , WEEK_TOTAL_GB - LAG(WEEK_TOTAL_GB,1,0) OVER(PARTITION BY MSIDN ORDER BY WEEK_PERIOD) AS TOTAL_USAGE_WEEK_DELTA
						 --------------------AVERAGE USAGE-----------------------------------------------------
						 , AVG_WEEK_TOTAL_GB
						 , LAG(AVG_WEEK_TOTAL_GB,1,0) OVER(PARTITION BY MSIDN ORDER BY WEEK_PERIOD) AS PREV_AVG_WEEK_TOTAL_GB
						 , AVG_WEEK_TOTAL_GB - LAG(AVG_WEEK_TOTAL_GB,1,0) OVER(PARTITION BY MSIDN ORDER BY WEEK_PERIOD) AS AVG_WEEK_DELTA
						 -------------------NUMBER OF USAGE DAYS----------------------------------------
						 , NUM_OF_USAGE_DAYS
						 , LAG(NUM_OF_USAGE_DAYS,1,0) OVER(PARTITION BY MSIDN ORDER BY WEEK_PERIOD) AS PREV_NUM_OF_USAGE_DAYS
						 , NUM_OF_USAGE_DAYS - LAG(NUM_OF_USAGE_DAYS,1,0) OVER(PARTITION BY MSIDN ORDER BY WEEK_PERIOD) AS  NUM_OF_USAGE_DAYS_DELTA
						  FROM(
						       SELECT
						         MSIDN
							    , DATE_TRUNC('WEEK',TO_DATE(DATE_PERIOD)) AS WEEK_PERIOD
								, ACCOUNTNUMBER
								, BID
								, STATUSCODE
								, ROUND(SUM(TOTAL_GB)) AS WEEK_TOTAL_GB
								, ROUND(AVG(TOTAL_GB)) AS AVG_WEEK_TOTAL_GB
							    , SUM(TOTAL_BYTES) AS WEEK_TOTAL_BYTES 
							    , SUM(TOTAL_NEW_CONNECTIONS) AS WEEK_TOTAL_NEW_CONNECTIONS
							    , COUNT(DISTINCT DATE_PERIOD) AS NUM_OF_USAGE_DAYS
						       FROM(
						        SELECT 
								  CDR.MSIDN
								 -- , DATE_TRUNC('WEEK',CDR.DATE_PERIOD) AS WEEK_PERIOD
								  , CDR.DATE_PERIOD
								  , SUB.ACCOUNTNUMBER
								  , SUB.BID
								  , SUB.STATUSCODE
								  , ROUND(SUM(CDR.TOTAL_BYTES/1024/1024/1024)) AS TOTAL_GB
								  , SUM(TOTAL_BYTES) AS TOTAL_BYTES
							      , SUM(TOTAL_NEW_CONNECTIONS) AS TOTAL_NEW_CONNECTIONS
								  FROM 
								  ATNI_PROD.CDR.GTT_SANDVINE_WIRELINE CDR
								  LEFT JOIN
								  (       -------------------------------GET CURRENT ACCOUNT BY DATESTART------------------------
								          SELECT 
								             DATESTART
											 , ACCOUNTNUMBER
											 , BID
											 , STATUSCODE 
											 FROM
											 GTT_REPORTING.GTT_SAA_SUBSCRIBER_FEED_DETAIL
											 WHERE
											 (DATESTART,BID, DATEIN) IN(
																		  SELECT 
																		  DATESTART,BID, MAX(DATEIN) AS DATEIN 
																		  FROM
																		  GTT_REPORTING.GTT_SAA_SUBSCRIBER_FEED_DETAIL
																		  WHERE
																		  REPORTABLE=1
																		  GROUP BY DATESTART,BID
											   ) 
				 			  
								  ) AS SUB ON '592' || REGEXP_SUBSTR(CDR.MSIDN,'\\d{7}')=SUB.BID AND DATE_TRUNC('WEEK',TO_DATE(CDR.DATE_PERIOD))=SUB.DATESTART
								  GROUP BY 1,2,3,4,5
					       ) AS A 
					       GROUP BY 1,2,3,4,5
					    ) AS B
			 )AS SAN ON SUB.ACCOUNTNUMBER=SAN.ACCOUNTNUMBER AND SUB.BID=SAN.BID
			            AND SAN.WEEK_PERIOD BETWEEN DATEADD('DAY',-90,SUB.HISTORY_END_DATE) AND SUB.HISTORY_END_DATE
		) AS C
	   GROUP BY 1,2,3,4
	) AS Q
GROUP BY 1,2,3
;  

---------------------------------------------------FIXED WIRELESS USAGE----------------------------------------------------------
CREATE OR REPLACE TEMP TABLE GTT_REPORTING.FIXED_WIRELESS_USAGE_EXPERIENCE AS 
SELECT 
ACCOUNTNUMBER
, BID
, SUM(WEEK_TOTAL_GB) AS TOTAL_GIGABYTES
, SUM(
	CASE
	 WHEN  AVG_WEEK_TOTAL_USAGE_DELTA <0 THEN 1
	 ELSE
	   0
	END) AS NUM_WEEK_AVG_TOTAL_USAGE_DECLINE
, SUM(
	CASE
	 WHEN DELTA_NUM_USAGE_DAYS <0 THEN 1
	 ELSE
	   0
	END) AS NUM_OF_WEEKLY_USAGE_DAYS_DECLINE

, SUM(
	CASE
	 WHEN AVG_WEEK_TOTAL_USAGE_DELTA/NULLIF(PREV_AVG_WEEK_TOTAL_GB,0)  BETWEEN -99 AND -50 THEN 1
	 ELSE
	   0
	END) AS NUM_OF_WEEKLY_AVG_BELOW_PAR
	
, SUM(
	CASE
	 WHEN WEEK_TOTAL_GB<0 THEN 1
	 ELSE
	   0
	END) AS NUM_OF_WEEKLY_LOW_USAGE
	

FROM 
(
SELECT 
WEEK_PERIOD
, ACCOUNTNUMBER
, BID
, WEEK_TOTAL_GB
, AVG_WEEK_TOTAL_GB
, LAG(AVG_WEEK_TOTAL_GB,1,0) OVER(PARTITION BY BID ORDER BY WEEK_PERIOD) AS PREV_AVG_WEEK_TOTAL_GB
, AVG_WEEK_TOTAL_GB - LAG(AVG_WEEK_TOTAL_GB,1,0) OVER(PARTITION BY BID ORDER BY WEEK_PERIOD) AS AVG_WEEK_TOTAL_USAGE_DELTA

, NUM_USAGE_DAYS
, LAG(NUM_USAGE_DAYS,1,0) OVER(PARTITION BY BID ORDER BY WEEK_PERIOD) AS PREV_NUM_OF_USAGE_DAYS
, NUM_USAGE_DAYS - LAG(NUM_USAGE_DAYS,1,0) OVER(PARTITION BY BID ORDER BY WEEK_PERIOD) AS DELTA_NUM_USAGE_DAYS
FROM(
		SELECT 
		DATE_TRUNC('WEEK',TO_DATE(TRANS_DT)) AS WEEK_PERIOD,
		ACCOUNTNUMBER,
		BID,
		COUNT(DISTINCT DATE(TRANS_DT)) AS NUM_USAGE_DAYS,
		ROUND(SUM(TOTAL_GB),2) AS WEEK_TOTAL_GB,
		ROUND(AVG(TOTAL_GB),2) AS AVG_WEEK_TOTAL_GB
		FROM(
				SELECT 
				--DATE_TRUNC('WEEK',DATE(TRANS_DT)) AS WEEK_PERIOD,
				DATE(TRANS_DT) AS TRANS_DT,
				A.ACCOUNTNUMBER,
				A.BID,
				DATEDIFF('DAYS',HISTORY_START_DATE,HISTORY_END_DATE) AS REPORTING_DAYS,
				SUM(RATED_UNITS)/1024/1024/1024 AS TOTAL_GB
				FROM 
				GTT_REPORTING.SUBSCRIBER_DEMOGRAPHICS A
				INNER JOIN
				GTT_REPORTING.CDR_DATA  B ON A.ACCOUNTNUMBER=B.ACCOUNT_NO AND A.BID=B.EXTERNAL_ID 
				                             AND DATE(B.TRANS_DT) BETWEEN A.HISTORY_START_DATE AND A.HISTORY_END_DATE
				                             AND B.APPLICATION_ID IN(7,10)
				     
				                    
				GROUP BY 1,2,3,4       
		) AS Q
		GROUP BY 1,2,3		
   ) AS A
 ) AS B
GROUP BY 1,2
;

------SYNC RATE ANALYSIS---------------------------------
CREATE OR REPLACE TEMP TABLE GTT_REPORTING.DSL_SERVICE_EXPERIENCE AS 
SELECT 
ACCOUNTNUMBER
,BID
,SUM(NUM_OF_BELOW_PAR_SYNC_RATE) AS NUM_OF_BELOW_PAR_SYNC_RATE
,SUM(NUM_OF_SPEED_BELOW_SERVICE_PROFILE) AS NUM_OF_SPEED_BELOW_SERVICE_PROFILE
FROM(
SELECT 
ACCOUNTNUMBER
,BID
,CREATED_DATE
,PHONE_NUMBER
,SERVICE_NAME
,SYNC_VALUE
,PREV_SYNC_VALUE
,DELTA_SYNC_VALUE
,(DELTA_SYNC_VALUE/NULLIF(PREV_SYNC_VALUE,0)*100) AS PERC_DELTA
, CASE
  WHEN (DELTA_SYNC_VALUE/NULLIF(PREV_SYNC_VALUE,0)*100) BETWEEN -99 AND -50 THEN 1
  ELSE 
     0
 END AS NUM_OF_BELOW_PAR_SYNC_RATE
 , CASE ---SPEED APPROX. USED
    WHEN SYNC_VALUE<2000 AND SERVICE_NAME LIKE '%BRONZE%' THEN 1
    WHEN SYNC_VALUE<6000 AND SERVICE_NAME LIKE '%SILVER%' THEN 1
    WHEN SYNC_VALUE<10000 AND SERVICE_NAME LIKE '%GOLD%' THEN 1
    ELSE
       0
   END AS NUM_OF_SPEED_BELOW_SERVICE_PROFILE
 
FROM(
		SELECT 
		SUB.ACCOUNTNUMBER
		,SUB.BID
		,A.CREATED_DATE::DATE AS CREATED_DATE
		,A.PHONE_NUMBER
		,A.SYNC_VALUE
		,LAG(A.SYNC_VALUE,1,0) OVER(PARTITION BY A.PHONE_NUMBER ORDER BY A.CREATED_DATE::DATE) AS PREV_SYNC_VALUE
		,A.SYNC_VALUE - LAG(SYNC_VALUE,1,0) OVER(PARTITION BY A.PHONE_NUMBER ORDER BY CREATED_DATE::DATE) AS DELTA_SYNC_VALUE
		,B.SERVICE_NAME 
		FROM 
		GTT_REPORTING.SUBSCRIBER_DEMOGRAPHICS SUB
		INNER JOIN
		GTT_REPORTING.GTT_DSL_SYNC_RATE A ON SUB.BID='592'||REPLACE(A.PHONE_NUMBER,'-','') AND A.CREATED_DATE::DATE BETWEEN  SUB.HISTORY_START_DATE AND  SUB.HISTORY_END_DATE
		LEFT JOIN
		GTT_REPORTING.DSL_DUMPS_DNS_RAW B ON A.PHONE_NUMBER=B.CCT_ID AND A.CREATED_DATE::DATE=B.DUMP_TS::DATE
		
     ) AS A 
) AS B
GROUP BY 1,2
;
----------------------------------------------------------MAIN QUERY--------------------------------------------------------------
CREATE OR REPLACE TABLE ATNI_PROD.ATNI_ANALYTICS.BROADBAND_CHURN_DATASET_DETAILS AS 
SELECT 
  DISTINCT
 --------------------subscriber demographics-----------------------
  DATESTART
 ,a.ACCOUNTNUMBER 
 ,a.BID 
 ,a.HAS_CHURNED
 ,a.SUBLINE_OF_SERVICE_SEGMENT
 ,a.DATEIN
 ,a.DATEOUT
 ,a.TERM_REQUEST_DATE
 ,a.LAST_SUSPENDDATE 
 ,a.REASON_FOR_TERMINATION1
 ,a.HISTORY_START_DATE
,a.HISTORY_END_DATE 
 ,a.CUSTOMER_TENURE_MTHS 
 ,a.PROPRODUCTNAME
 ,a.PROPRODUCTCODE

 ,a.ACTIVATION_FEE_DISCOUNT
 ,a.ACCESSORY_DISCOUNT
 ,a.MRC_DISCOUNT
 ,a.HAS_PLUMES_POD
 ,a.LAST_MRC
 ,a.CUSTOMER_VALUE
 
 ----------------support cases-------------------------------------
 ,b.BROWSING
 ,b.BAD_EQUIPMENT
 ,b.MISAPPLIED_PAYMENT_OR_CHARGE
 ,b.CALLING_PROBLEM
 ,b.POOR_OR_NO_CONNECTIVITY
 ,b.FEE_QUESTIONS
 ,b.REQUEST_INFORMATION
 ,b.BALANCE_INQUIRY
 ,b.UPGRADE_DOWNGRADE_SERVICE
 ,b.REBATE_OR_REFUND
 ,b.TRANSFER_SERVICE
 ,b.MISCELLANEOUS
 ,b.RESOLVED_CASES
 ,b.UNRESOLVED_CASES
 ----revenue----------------
 ,c.SIX_MONTH_NUM_BILLING_MONTHS AS SIX_MONTH_NUM_BILLING_MONTHS
 ,c.SIX_MONTH_BILLED_MRC_USD AS SIX_MONTH_BILLED_MRC_USD
 ,c.SIX_MONTH_BILLED_NRC_USD AS SIX_MONTH_BILLED_NRC_USD
  --overages
 ,c.SIX_MONTH_NUM_OVERAGES AS SIX_MONTH_NUM_OVERAGES
 ,c.SIX_MONTH_TOTAL_OVREAGE_USD AS SIX_MONTH_TOTAL_OVREAGE_USD
 ,c.SIX_MONTH_MAX_OVERAGE_USD AS SIX_MONTH_MAX_OVERAGE_USD
  --averages
 ,c.SIX_MONTH_AVERAGE_OVERAGE_USD AS SIX_MONTH_AVERAGE_OVERAGE_USD
 ,c.SIX_MONTH_AVERAGE_BILLED_MRC_USD AS SIX_MONTH_AVERAGE_BILLED_MRC_USD
 ,c.SIX_MONTH_AVERAGE_BILLED_NRC_USD AS SIX_MONTH_AVERAGE_BILLED_NRC_USD
 -------------------lifetime-----------------------------------------------------
 --revenue
 ,c.LIFETIME_NUM_BILLING_MONTHS AS LIFETIME_NUM_BILLING_MONTHS
 ,c.LIFETIME_BILLED_MRC_USD AS LIFETIME_BILLED_MRC_USD
 ,c.LIFETIME_BILLED_NRC_USD AS LIFETIME_BILLED_NRC_USD
 ,c.LIFETIME_NUM_NRCS AS LIFETIME_NUM_NRCS
 --overages
 ,c.LIFETIME_NUM_OVERAGES AS LIFETIME_NUM_OVERAGES
 ,c.LIFETIME_TOTAL_OVREAGE_USD AS LIFETIME_TOTAL_OVREAGE_USD
 ,c.LIFETIME_MAX_OVERAGE_USD AS LIFETIME_MAX_OVERAGE_USD
	--AVERAGES
 ,c.LIFETIME_AVG_BILLED_MRC_USD AS LIFETIME_AVG_BILLED_MRC_USD
 ,c.LIFETIME_AVG_BILLED_NRC_USD AS LIFETIME_AVG_BILLED_NRC_USD
 ,c.LIFETIME_AVG_BILLED_OVERAGES_USD AS LIFETIME_AVG_BILLED_OVERAGES_USD
 -------------------------payments---------------------------------------------------
 ,e.MOST_USED_PAYMENT_CHANNEL_6MTHS AS MOST_USED_PAYMENT_CHANNEL_6MTHS
 ,e.PAYMENT_AMOUNT_USD_6MTHS AS PAYMENT_AMOUNT_USD_6MTHS
 ,e.NUM_OF_PAYMENTS_6MTHS AS NUM_OF_PAYMENTS_6MTHS
 -------------------------usage------------------------------------------------------
 --ACTIVITY BLOCKS...at least one activity within 3 hour block
 ,f.ACTIVITY_BLOCKS_BITTORRENT_LAST90DAY AS ACTIVITY_BLOCKS_BITTORRENT_LAST90DAY
 ,f.ACTIVITY_BLOCKS_COMPETITOR_LAST90DAY AS ACTIVITY_BLOCKS_COMPETITOR_LAST90DAY
 ,f.ACTIVITY_BLOCKS_SPEEDTEST_LAST90DAY AS ACTIVITY_BLOCKS_SPEEDTEST_LAST90DAY
 ,f.ACTIVITY_BLOCKS_OTT_VIDEO_LAST90DAY AS ACTIVITY_BLOCKS_OTT_VIDEO_LAST90DAY
 ,f.ACTIVITY_BLOCKS_GAMING_LAST90DAY AS ACTIVITY_BLOCKS_GAMING_LAST90DAY
 ,f.ACTIVITY_BLOCKS_OTHER_LAST90DAY AS ACTIVITY_BLOCKS_OTHER_LAST90DAY
 --TRANSMITTED GB
 ,f.TOTAL_GIGABYTES_BITTORRENT_LAST90DAY AS TOTAL_GIGABYTES_BITTORRENT_LAST90DAY
 ,f.TOTAL_GIGABYTES_COMPETITOR_LAST90DAY AS TOTAL_GIGABYTES_COMPETITOR_LAST90DAY
 ,f.TOTAL_GIGABYTES_SPEEDTEST_LAST90DAY AS TOTAL_GIGABYTES_SPEEDTEST_LAST90DAY
 ,f.TOTAL_GIGABYTES_OTT_VIDEO_LAST90DAY AS TOTAL_GIGABYTES_OTT_VIDEO_LAST90DAY
 ,f.TOTAL_GIGABYTES_GAMING_LAST90DAY AS TOTAL_GIGABYTES_GAMING_LAST90DAY
 ,f.TOTAL_GIGABYTES_OTHER_LAST90DAY AS TOTAL_GIGABYTES_OTHER_LAST90DAY
 --AVERAGES
 ,f.AVG_GIGABYTES_BITTORRENT_LAST90DAY AS AVG_GIGABYTES_BITTORRENT_LAST90DAY
 ,f.AVG_GIGABYTES_COMPETITOR_LAST90DAY AS AVG_GIGABYTES_COMPETITOR_LAST90DAY
 ,f.AVG_GIGABYTES_SPEEDTEST_LAST90DAY AS AVG_GIGABYTES_SPEEDTEST_LAST90DAY
 ,f.AVG_GIGABYTES_OTT_VIDEO_LAST90DAY AS AVG_GIGABYTES_OTT_VIDEO_LAST90DAY
 ,f.AVG_GIGABYTES_GAMING_LAST90DAY AS AVG_GIGABYTES_GAMING_LAST90DAY
 ,f.AVG_GIGABYTES_OTHER_LAST90DAY AS AVG_GIGABYTES_OTHER_LAST90DAY
 ,CASE
   WHEN a.SUBLINE_OF_SERVICE_SEGMENT IN('GPON','DSL') THEN h.TOTAL_GIGABYTES
   ELSE
      i.TOTAL_GIGABYTES ---fixed wireless
  END AS TOTAL_GIGABYTES
 ------------------------------------daily service experience------------------------------------------

 ,g.NUM_OF_OUTAGE_DAYS AS NUM_OF_OUTAGE_DAYS
 ,g.NUM_OF_LOW_USAGE_DAYS AS NUM_OF_LOW_USAGE_DAYS

 -------------------------------------weekly service experience-------------------------------------------
,h.WEEKLY_NUM_OF_OUTAGES AS WEEKLY_NUM_OF_OUTAGES

,CASE 
  WHEN a.SUBLINE_OF_SERVICE_SEGMENT IN('GPON','DSL') THEN h.WEEKLY_NUM_OF_LOW_USAGE
  ELSE
     i.NUM_OF_WEEKLY_LOW_USAGE
 END AS WEEKLY_NUM_OF_LOW_USAGE

,CASE 
  WHEN a.SUBLINE_OF_SERVICE_SEGMENT IN('GPON','DSL') THEN h.WEEKLY_AVG_NUM_BELOW_PAR
  ELSE
    i.NUM_OF_WEEKLY_AVG_BELOW_PAR
 END AS NUM_OF_WEEKLY_AVG_BELOW_PAR
 
,CASE
 WHEN a.SUBLINE_OF_SERVICE_SEGMENT IN('GPON','DSL') THEN h.NUM_OF_WEEKLY_AVG_USAGE_DECLINE
 ELSE
     i.NUM_WEEK_AVG_TOTAL_USAGE_DECLINE
 END AS NUM_WEEKLY_AVG_TOTAL_USAGE_DECLINE
 
 ,CASE 
  WHEN a.SUBLINE_OF_SERVICE_SEGMENT IN('GPON','DSL') THEN h.NUM_OF_WEEKLY_USAGE_DAYS_DECLINE
  ELSE
     i.NUM_OF_WEEKLY_USAGE_DAYS_DECLINE
  END AS NUM_OF_WEEKLY_USAGE_DAYS_DECLINE
,j.NUM_OF_BELOW_PAR_SYNC_RATE
,j.NUM_OF_SPEED_BELOW_SERVICE_PROFILE
,CURRENT_TIMESTAMP() AS LAST_UPDATED
FROM 
GTT_REPORTING.SUBSCRIBER_DEMOGRAPHICS a
LEFT JOIN
GTT_REPORTING.CRM_SUPPORT_CASES b ON a.ACCOUNTNUMBER=b.ACCOUNTNUMBER AND a.BID=b.BID AND a.SUBLINE_OF_SERVICE_SEGMENT=b.PRODUCT_FOCUS
LEFT JOIN 
GTT_REPORTING.SUBSCRIBER_REVENUES c ON a.ACCOUNTNUMBER=c.ACCOUNTNUMBER AND a.BID=c.BID
LEFT JOIN 
GTT_REPORTING.BILLED_PAYMENTS e ON a.ACCOUNTNUMBER=e.ACCOUNTNUMBER
LEFT JOIN 
GTT_REPORTING.WIRELINE_WEBSITE_ACTIVITY f ON a.ACCOUNTNUMBER=f.ACCOUNTNUMBER AND a.BID=f.BID
LEFT JOIN
GTT_REPORTING.DAILY_WIRELINE_WEBSITE_EXPERIENCE g ON a.ACCOUNTNUMBER=g.ACCOUNTNUMBER AND a.BID=g.BID
LEFT JOIN
GTT_REPORTING.WEEKLY_WIRELINE_WEBSITE_EXPERIENCE h ON a.ACCOUNTNUMBER=h.ACCOUNTNUMBER AND a.BID=h.BID
LEFT JOIN 
GTT_REPORTING.FIXED_WIRELESS_USAGE_EXPERIENCE i ON a.ACCOUNTNUMBER=i.ACCOUNTNUMBER AND a.BID=i.BID
LEFT JOIN
GTT_REPORTING.DSL_SERVICE_EXPERIENCE j ON a.ACCOUNTNUMBER=j.ACCOUNTNUMBER AND a.BID=j.BID
WHERE 
a.SUBLINE_OF_SERVICE_SEGMENT<>'WiMax'----This was replaced with Fixed Wireless
;

CREATE OR REPLACE TABLE ATNI_PROD.ATNI_ANALYTICS.BROADBAND_CHURN_DATASET AS 
SELECT 
 --------------------subscriber demographics-----------------------
 DISTINCT
  DATESTART
 ,a.ACCOUNTNUMBER 
 ,a.BID 
 ,a.HAS_CHURNED
 ,a.SUBLINE_OF_SERVICE_SEGMENT
 ,a.CUSTOMER_TENURE_MTHS 
 ,a.PROPRODUCTNAME
 ,a.PROPRODUCTCODE

 ,a.ACTIVATION_FEE_DISCOUNT
 ,a.ACCESSORY_DISCOUNT
 ,a.MRC_DISCOUNT
 ,a.HAS_PLUMES_POD
 ,a.LAST_MRC
 ,a.CUSTOMER_VALUE
 
 ----------------support cases-------------------------------------
 ,b.BROWSING
 ,b.BAD_EQUIPMENT
 ,b.MISAPPLIED_PAYMENT_OR_CHARGE
 ,b.CALLING_PROBLEM
 ,b.POOR_OR_NO_CONNECTIVITY
 ,b.FEE_QUESTIONS
 ,b.REQUEST_INFORMATION
 ,b.BALANCE_INQUIRY
 ,b.UPGRADE_DOWNGRADE_SERVICE
 ,b.REBATE_OR_REFUND
 ,b.TRANSFER_SERVICE
 ,b.MISCELLANEOUS
 ,b.RESOLVED_CASES
 ,b.UNRESOLVED_CASES
 ----revenue----------------
 ,c.SIX_MONTH_NUM_BILLING_MONTHS AS SIX_MONTH_NUM_BILLING_MONTHS
 ,c.SIX_MONTH_BILLED_MRC_USD AS SIX_MONTH_BILLED_MRC_USD
 ,c.SIX_MONTH_BILLED_NRC_USD AS SIX_MONTH_BILLED_NRC_USD
  --overages
 ,c.SIX_MONTH_NUM_OVERAGES AS SIX_MONTH_NUM_OVERAGES
 ,c.SIX_MONTH_TOTAL_OVREAGE_USD AS SIX_MONTH_TOTAL_OVREAGE_USD
 ,c.SIX_MONTH_MAX_OVERAGE_USD AS SIX_MONTH_MAX_OVERAGE_USD
  --averages
 ,c.SIX_MONTH_AVERAGE_OVERAGE_USD AS SIX_MONTH_AVERAGE_OVERAGE_USD
 ,c.SIX_MONTH_AVERAGE_BILLED_MRC_USD AS SIX_MONTH_AVERAGE_BILLED_MRC_USD
 ,c.SIX_MONTH_AVERAGE_BILLED_NRC_USD AS SIX_MONTH_AVERAGE_BILLED_NRC_USD
 -------------------lifetime-----------------------------------------------------
 --revenue
 ,c.LIFETIME_NUM_BILLING_MONTHS AS LIFETIME_NUM_BILLING_MONTHS
 ,c.LIFETIME_BILLED_MRC_USD AS LIFETIME_BILLED_MRC_USD
 ,c.LIFETIME_BILLED_NRC_USD AS LIFETIME_BILLED_NRC_USD
 ,c.LIFETIME_NUM_NRCS AS LIFETIME_NUM_NRCS
 --overages
 ,c.LIFETIME_NUM_OVERAGES AS LIFETIME_NUM_OVERAGES
 ,c.LIFETIME_TOTAL_OVREAGE_USD AS LIFETIME_TOTAL_OVREAGE_USD
 ,c.LIFETIME_MAX_OVERAGE_USD AS LIFETIME_MAX_OVERAGE_USD
	--AVERAGES
 ,c.LIFETIME_AVG_BILLED_MRC_USD AS LIFETIME_AVG_BILLED_MRC_USD
 ,c.LIFETIME_AVG_BILLED_NRC_USD AS LIFETIME_AVG_BILLED_NRC_USD
 ,c.LIFETIME_AVG_BILLED_OVERAGES_USD AS LIFETIME_AVG_BILLED_OVERAGES_USD
 -------------------------payments---------------------------------------------------
 --,NVL(e.MOST_USED_PAYMENT_CHANNEL_6MTHS,'NA') AS MOST_USED_PAYMENT_CHANNEL_6MTHS
 ,e.PAYMENT_AMOUNT_USD_6MTHS AS PAYMENT_AMOUNT_USD_6MTHS
 ,e.NUM_OF_PAYMENTS_6MTHS AS NUM_OF_PAYMENTS_6MTHS
 -------------------------usage------------------------------------------------------
 --ACTIVITY BLOCKS...at least one activity within 3 hour block
 ,f.ACTIVITY_BLOCKS_BITTORRENT_LAST90DAY AS ACTIVITY_BLOCKS_BITTORRENT_LAST90DAY
 ,f.ACTIVITY_BLOCKS_COMPETITOR_LAST90DAY AS ACTIVITY_BLOCKS_COMPETITOR_LAST90DAY
 ,f.ACTIVITY_BLOCKS_SPEEDTEST_LAST90DAY AS ACTIVITY_BLOCKS_SPEEDTEST_LAST90DAY
 ,f.ACTIVITY_BLOCKS_OTT_VIDEO_LAST90DAY AS ACTIVITY_BLOCKS_OTT_VIDEO_LAST90DAY
 ,f.ACTIVITY_BLOCKS_GAMING_LAST90DAY AS ACTIVITY_BLOCKS_GAMING_LAST90DAY
 ,f.ACTIVITY_BLOCKS_OTHER_LAST90DAY AS ACTIVITY_BLOCKS_OTHER_LAST90DAY
 --TRANSMITTED GB
 ,f.TOTAL_GIGABYTES_BITTORRENT_LAST90DAY AS TOTAL_GIGABYTES_BITTORRENT_LAST90DAY
 ,f.TOTAL_GIGABYTES_COMPETITOR_LAST90DAY AS TOTAL_GIGABYTES_COMPETITOR_LAST90DAY
 ,f.TOTAL_GIGABYTES_SPEEDTEST_LAST90DAY AS TOTAL_GIGABYTES_SPEEDTEST_LAST90DAY
 ,f.TOTAL_GIGABYTES_OTT_VIDEO_LAST90DAY AS TOTAL_GIGABYTES_OTT_VIDEO_LAST90DAY
 ,f.TOTAL_GIGABYTES_GAMING_LAST90DAY AS TOTAL_GIGABYTES_GAMING_LAST90DAY
 ,f.TOTAL_GIGABYTES_OTHER_LAST90DAY AS TOTAL_GIGABYTES_OTHER_LAST90DAY
 --AVERAGES
 ,f.AVG_GIGABYTES_BITTORRENT_LAST90DAY AS AVG_GIGABYTES_BITTORRENT_LAST90DAY
 ,f.AVG_GIGABYTES_COMPETITOR_LAST90DAY AS AVG_GIGABYTES_COMPETITOR_LAST90DAY
 ,f.AVG_GIGABYTES_SPEEDTEST_LAST90DAY AS AVG_GIGABYTES_SPEEDTEST_LAST90DAY
 ,f.AVG_GIGABYTES_OTT_VIDEO_LAST90DAY AS AVG_GIGABYTES_OTT_VIDEO_LAST90DAY
 ,f.AVG_GIGABYTES_GAMING_LAST90DAY AS AVG_GIGABYTES_GAMING_LAST90DAY
 ,f.AVG_GIGABYTES_OTHER_LAST90DAY AS AVG_GIGABYTES_OTHER_LAST90DAY
 ,CASE
   WHEN a.SUBLINE_OF_SERVICE_SEGMENT IN('GPON','DSL') THEN h.TOTAL_GIGABYTES
   ELSE
      i.TOTAL_GIGABYTES ---fixed wireless
  END AS TOTAL_GIGABYTES
 ------------------------------------daily service experience------------------------------------------
 ,g.NUM_OF_OUTAGE_DAYS AS NUM_OF_OUTAGE_DAYS
 ,g.NUM_OF_LOW_USAGE_DAYS AS NUM_OF_LOW_USAGE_DAYS

 -------------------------------------weekly service experience-------------------------------------------
,h.WEEKLY_NUM_OF_OUTAGES AS WEEKLY_NUM_OF_OUTAGES

,CASE 
  WHEN a.SUBLINE_OF_SERVICE_SEGMENT IN('GPON','DSL') THEN h.WEEKLY_NUM_OF_LOW_USAGE
  ELSE
     i.NUM_OF_WEEKLY_LOW_USAGE
 END AS WEEKLY_NUM_OF_LOW_USAGE

,CASE 
  WHEN a.SUBLINE_OF_SERVICE_SEGMENT IN('GPON','DSL') THEN h.WEEKLY_AVG_NUM_BELOW_PAR
  ELSE
    i.NUM_OF_WEEKLY_AVG_BELOW_PAR
 END AS NUM_OF_WEEKLY_AVG_BELOW_PAR
 
,CASE
 WHEN a.SUBLINE_OF_SERVICE_SEGMENT IN('GPON','DSL') THEN h.NUM_OF_WEEKLY_AVG_USAGE_DECLINE
 ELSE
    i.NUM_WEEK_AVG_TOTAL_USAGE_DECLINE
 END AS NUM_WEEKLY_AVG_TOTAL_USAGE_DECLINE
 
 ,CASE 
  WHEN a.SUBLINE_OF_SERVICE_SEGMENT IN('GPON','DSL') THEN h.NUM_OF_WEEKLY_USAGE_DAYS_DECLINE
  ELSE
     i.NUM_OF_WEEKLY_USAGE_DAYS_DECLINE
  END AS NUM_OF_WEEKLY_USAGE_DAYS_DECLINE
 ,j.NUM_OF_BELOW_PAR_SYNC_RATE
 ,j.NUM_OF_SPEED_BELOW_SERVICE_PROFILE
 ,CURRENT_TIMESTAMP() AS LAST_UPDATED
FROM 
GTT_REPORTING.SUBSCRIBER_DEMOGRAPHICS a
LEFT JOIN
GTT_REPORTING.CRM_SUPPORT_CASES b ON a.ACCOUNTNUMBER=b.ACCOUNTNUMBER AND a.BID=b.BID AND a.SUBLINE_OF_SERVICE_SEGMENT=b.PRODUCT_FOCUS
LEFT JOIN 
GTT_REPORTING.SUBSCRIBER_REVENUES c ON a.ACCOUNTNUMBER=c.ACCOUNTNUMBER AND a.BID=c.BID
LEFT JOIN 
GTT_REPORTING.BILLED_PAYMENTS e ON a.ACCOUNTNUMBER=e.ACCOUNTNUMBER
LEFT JOIN 
GTT_REPORTING.WIRELINE_WEBSITE_ACTIVITY f ON a.ACCOUNTNUMBER=f.ACCOUNTNUMBER AND a.BID=f.BID
LEFT JOIN
GTT_REPORTING.DAILY_WIRELINE_WEBSITE_EXPERIENCE g ON a.ACCOUNTNUMBER=g.ACCOUNTNUMBER AND a.BID=g.BID
LEFT JOIN
GTT_REPORTING.WEEKLY_WIRELINE_WEBSITE_EXPERIENCE h ON a.ACCOUNTNUMBER=h.ACCOUNTNUMBER AND a.BID=h.BID
LEFT JOIN 
GTT_REPORTING.FIXED_WIRELESS_USAGE_EXPERIENCE i ON a.ACCOUNTNUMBER=i.ACCOUNTNUMBER AND a.BID=i.BID
LEFT JOIN
GTT_REPORTING.DSL_SERVICE_EXPERIENCE j ON a.ACCOUNTNUMBER=j.ACCOUNTNUMBER AND a.BID=j.BID
WHERE 
a.SUBLINE_OF_SERVICE_SEGMENT<>'WiMax'----This was replaced with Fixed Wireless