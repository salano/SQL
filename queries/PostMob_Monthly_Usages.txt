--Postpaid Mobile monthly usages Custom List
SELECT
	Detail.MONTH_ID,
	Detail.ACCOUNT_NO,
	Detail.EXTERNAL_ID,
	CASE WHEN EE.IS_CURRENT = 0 THEN '60 - Disconnected' ELSE AE.CURRENT_STATE || ' - ' || SSV.DISPLAY_VALUE END AS STATE,
	EE.INACTIVE_DATE,
	AE.PRIMARY_OFFER_ID || ' - ' || OVL.DISPLAY_VALUE AS PRIMARY_OFFER,
	CME.ACCOUNT_CATEGORY || ' - ' || ACV.DISPLAY_VALUE AS ACCOUNT_CATEGORY_DESC,
	SOF.S_OFFER_ID,
	SOF.S_OFFER_DESC,
	TRIM(NVL(CME.BILL_FNAME,'') || ' ' || NVL(CME.BILL_LNAME,'')) AS BILL_NAME,
	CME.BILL_COMPANY,
	REPLACE(NVL(CME.BILL_ADDRESS1,'') || ' ' || NVL(CME.BILL_ADDRESS2,'') || ' ' || 
		NVL(CME.BILL_ADDRESS3,'') || ' ' || NVL(CME.BILL_ADDRESS4,'') || ' ' || NVL(CME.BILL_CITY,'')  
		|| ' ' || NVL(CME.BILL_COUNTY,''),'  ',' ') AS BILL_ADDRESS,
	CASE WHEN AE.LIMIT_TYPE2 = 2 THEN AE.MAX_LIMIT2
		WHEN AE.LIMIT_TYPE3 = 2 THEN AE.MAX_LIMIT3
		WHEN AE.LIMIT_TYPE4 = 2 THEN AE.MAX_LIMIT4
		WHEN AE.LIMIT_TYPE5 = 2 THEN AE.MAX_LIMIT5
		WHEN AE.LIMIT_TYPE6 = 2 THEN AE.MAX_LIMIT6
		WHEN AE.LIMIT_TYPE7 = 2 THEN AE.MAX_LIMIT7
		ELSE 0 END AS CREDIT_LIMIT,
	--Totals
	SUM(Detail.MRC) AS MRC,
	--SUM(Detail.CRLMT_CHARGES) AS CRLMT_CHARGES,
	SUM(Detail.MINUTES) AS MINUTES,
	SUM(Detail.TEXTS) AS TEXTS,
	SUM(Detail.MBYTES) AS DATA_MBYTES,
	SUM(Detail.REV_VOICE) AS VOICE_CHARGES,
	SUM(Detail.REV_SMS) AS SMS_CHARGES,
	SUM(Detail.REV_DATA) AS DATA_CHARGES,
	SUM(Detail.REV_VOICE + Detail.REV_SMS + Detail.REV_DATA) AS TOT_CHARGES
FROM (
	SELECT
		TO_CHAR(USG.TRANS_DT,'yyyy/MM') AS MONTH_ID,
		USG.SERVICE_TYPE,
		'USG' AS SPEND_TYPE,
		USG.EXTERNAL_ID,
		USG.SUBSCR_NO,
		USG.ACCOUNT_NO,
		SUM(CASE WHEN USG.APPLICATION_ID = 1 THEN NVL(USG.PRIMARY_UNITS,0) ELSE 0 END) / 60 AS MINUTES,
		SUM(CASE WHEN USG.APPLICATION_ID = 2 THEN USG.TRANS_COUNT ELSE 0 END) AS TEXTS,
		SUM(CASE WHEN USG.APPLICATION_ID IN (7,10) THEN NVL(USG.PRIMARY_UNITS,0) ELSE 0 END) / 1048576 AS MBYTES,
		SUM(CASE WHEN USG.APPLICATION_ID = 1 AND NVL(USG.BALANCE_ID,0) IN (89,101) THEN NVL(USG.AMOUNT,0) ELSE 0 END) AS REV_VOICE,
		SUM(CASE WHEN USG.APPLICATION_ID = 2 AND NVL(USG.BALANCE_ID,0) IN (89,101) THEN NVL(USG.AMOUNT,0) ELSE 0 END) AS REV_SMS,
		SUM(CASE WHEN USG.APPLICATION_ID IN (7,10) AND NVL(USG.BALANCE_ID,0) IN (89,101) THEN NVL(USG.AMOUNT,0) ELSE 0 END) AS REV_DATA,
		SUM(CASE WHEN USG.APPLICATION_ID = 1 AND NVL(USG.BALANCE_ID,0) = 101 THEN NVL(USG.AMOUNT,0) ELSE 0 END) AS CRLMT_CHARGES,
		0 AS MRC
	FROM 
		(
		SELECT
			CASE WHEN CD.APPLICATION_ID = 1 THEN 'Voice'
				WHEN CD.APPLICATION_ID = 2 THEN 'SMS'
				ELSE 'Data' END AS SERVICE_TYPE,
			CD.APPLICATION_ID,
			'C' AS TABLE_ID,
			1 AS TRANS_COUNT,
			CD.TRANS_DT,
			CD.EXTERNAL_ID,
			CD.SUBSCR_NO,
			CASE WHEN CD.ACCOUNT_NO = 0 THEN E1.ACCOUNT_NO ELSE CD.ACCOUNT_NO END AS ACCOUNT_NO,
			CD.POINT_ORIGIN,
			CD.POINT_TARGET,
			CD.PAYMENT_MODE,
			CD.BALANCE_ID,
			CD.BALANCE_COUNT,
			CD.PRIMARY_UNITS,
			BF.UNIT_TYPE,
			CD.AMOUNT / 100 AS AMOUNT,
			CD.TOTAL_TAX / 100 AS TOTAL_TAX,
			CD.CHARGED_AMOUNT / 100 AS CHARGED_AMOUNT,
			CD.COMP_STATUS,
			CD.AUT_ID,
			AV.DISPLAY_VALUE
		FROM CDR_DATA CD
			JOIN AUT_FINAL_VALUES AV
			ON CD.AUT_ID = AV.AUT_ID AND AV.RESELLER_VERSION_ID = (SELECT MAX(RESELLER_VERSION_ID) FROM AUT_FINAL_VALUES)
			LEFT JOIN BALANCE_REF BF
			ON CD.BALANCE_ID = BF.BALANCE_ID AND BF.RESELLER_VERSION_ID = (SELECT MAX(RESELLER_VERSION_ID) FROM BALANCE_REF)
			LEFT JOIN EXTERNAL_ID_EQUIP_MAP_EXTRACT E1
			ON E1.SUBSCR_NO = CD.SUBSCR_NO
			AND DATE(E1.EXTRACT_FILE_DATE) = ${end_dt}::DATE+1
			AND E1.EXTERNAL_ID_TYPE = 1
		WHERE CD.APPLICATION_ID IN (1,2,7,10)
		AND CD.EXTERNAL_ID_TYPE = 1
		AND CD.PRIMARY_UNITS > 0
		AND ((CD.EXTERNAL_ID = CD.POINT_ORIGIN) OR (CD.EXTERNAL_ID != CD.POINT_ORIGIN AND NVL(CD.CHARGED_AMOUNT,0) > 0))
		--AND NVL(CD.PAYMENT_MODE,0) != 1
		AND CD.BALANCE_COUNT <= 1
		AND DATE(CD.TRANS_DT) BETWEEN ${start_dt}::date AND ${end_dt}::date
		UNION ALL
		SELECT
			CASE WHEN C2.APPLICATION_ID = 1 THEN 'Voice'
				WHEN C2.APPLICATION_ID = 2 THEN 'SMS'
				ELSE 'Data' END AS SERVICE_TYPE,
			C2.APPLICATION_ID,
			'B' AS TABLE_ID,
			CASE WHEN CB.BALANCE_COUNTER = 1 THEN 1 ELSE 0 END AS TRANS_COUNT,
			C2.TRANS_DT,
			C2.EXTERNAL_ID,
			C2.SUBSCR_NO,
			CASE WHEN C2.ACCOUNT_NO = 0 THEN E2.ACCOUNT_NO ELSE C2.ACCOUNT_NO END AS ACCOUNT_NO,
			C2.POINT_ORIGIN,
			C2.POINT_TARGET,
			C2.PAYMENT_MODE,
			CB.BALANCE_ID,
			CB.BALANCE_COUNTER AS BALANCE_COUNT,
			CASE WHEN C2.APPLICATION_ID = 1 THEN (CASE WHEN DATE(C2.TRANS_DT) < '20180429' THEN ROUND((CB.BALANCE_AMOUNT / CASE WHEN CB.UNIT_TYPE = 1 THEN 30.16 ELSE 26.45 END) * 0.60) 
				ELSE ROUND((CB.BALANCE_AMOUNT / CASE WHEN CB.UNIT_TYPE = 1 THEN 32.00 ELSE 28.07 END) * 0.60) END)
				WHEN C2.APPLICATION_ID = 2 THEN C2.PRIMARY_UNITS
				ELSE CB.UNITS END AS PRIMARY_UNITS,
			CB.UNIT_TYPE,
			CASE WHEN C2.APPLICATION_ID = 1 THEN (CASE WHEN NVL(C2.TOTAL_TAX,0) > 0 THEN (CASE WHEN C2.REFUND_FLAG != 'Y' THEN (CASE WHEN CB.UNIT_TYPE = 1 THEN CB.BALANCE_AMOUNT / 1.14 ELSE 0 END) 
				ELSE (0 - CB.BALANCE_AMOUNT) / 1.14 END) ELSE (CASE WHEN C2.REFUND_FLAG != 'Y' THEN CB.BALANCE_AMOUNT ELSE 0 - CB.BALANCE_AMOUNT END) END)
				WHEN C2.APPLICATION_ID = 2 THEN C2.AMOUNT
				ELSE C2.AMOUNT END / 100 AS AMOUNT,
			CASE WHEN C2.APPLICATION_ID = 1 THEN (CASE WHEN NVL(C2.TOTAL_TAX,0) > 0 THEN (CASE WHEN CB.UNIT_TYPE = 1 THEN (CB.BALANCE_AMOUNT - (CB.BALANCE_AMOUNT / 1.14)) ELSE 0 END) ELSE 0 END)
				WHEN C2.APPLICATION_ID = 2 THEN C2.TOTAL_TAX
				ELSE C2.TOTAL_TAX END / 100 AS TOTAL_TAX,
			CASE WHEN C2.APPLICATION_ID = 1 THEN (CASE WHEN NVL(CB.BALANCE_AMOUNT,0) > 0 THEN (CASE WHEN C2.REFUND_FLAG != 'Y' THEN (CASE WHEN CB.UNIT_TYPE = 1 THEN CB.BALANCE_AMOUNT ELSE 0 END) ELSE 0 - CB.BALANCE_AMOUNT END) END)
				WHEN C2.APPLICATION_ID = 2 THEN C2.CHARGED_AMOUNT
				ELSE C2.CHARGED_AMOUNT END / 100 AS CHARGED_AMOUNT,
			C2.COMP_STATUS,
			C2.AUT_ID,
			AV.DISPLAY_VALUE
		FROM CDR_DATA C2
			JOIN CDR_BALANCE CB
			ON C2.MSG_ID = CB.MSG_ID AND C2.MSG_ID2 = CB.MSG_ID2
			AND DATE(CB.EXPECTED_CUTOFF_DT) BETWEEN ${start_dt}::Date AND ${end_dt}::Date+5
			JOIN AUT_FINAL_VALUES AV
			ON C2.AUT_ID = AV.AUT_ID AND AV.RESELLER_VERSION_ID = (SELECT MAX(RESELLER_VERSION_ID) FROM AUT_FINAL_VALUES)
			LEFT JOIN EXTERNAL_ID_EQUIP_MAP_EXTRACT E2
			ON E2.SUBSCR_NO = C2.SUBSCR_NO
			AND DATE(E2.EXTRACT_FILE_DATE) = ${end_dt}::DATE+1
		WHERE C2.APPLICATION_ID IN (1,2,7,10)
		AND C2.EXTERNAL_ID_TYPE = 1
		AND CB.BALANCE_AMOUNT > 0
		AND C2.BALANCE_COUNT > 1
		AND DATE(C2.TRANS_DT) BETWEEN ${start_dt}::Date AND ${end_dt}::Date
		) USG
	GROUP BY 1,2,3,4,5,6
	UNION ALL
	SELECT
		TO_CHAR(RC_S.APPLY_DATE, 'yyyy/MM') MONTH_ID,
		RC_S.RC_TYPE AS SERVICE_TYPE,
		'RC_S' AS SPEND_TYPE,
		RC_S.EXTERNAL_ID,
		RC_S.SUBSCR_NO,
		RC_S.ACCOUNT_NO,
		0 AS MINUTES,
		0 AS TEXTS,
		0 AS MBYTES,
		SUM(CASE WHEN RC_S.RC_TYPE = 'Voice' THEN NVL(RC_S.AMOUNT,0) ELSE 0 END) AS REV_VOICE,
		SUM(CASE WHEN RC_S.RC_TYPE = 'SMS' THEN NVL(RC_S.AMOUNT,0) ELSE 0 END) AS REV_SMS,
		SUM(CASE WHEN RC_S.RC_TYPE = 'Data' THEN NVL(RC_S.AMOUNT,0) ELSE 0 END) AS REV_DATA,
		0 AS CRLMT_CHARGES,
		SUM(CASE WHEN RC_S.RC_TYPE = 'MRC' THEN NVL(RC_S.AMOUNT,0) ELSE 0 END) AS MRC
	FROM
		(SELECT 
			A.APPLY_DATE,
			A.RC_TERM_INST_ID,
			A.PARENT_ACCOUNT_NO AS ACCOUNT_NO,
			A.PARENT_SUBSCR_NO AS SUBSCR_NO,
			E3.EXTERNAL_ID,
			A.OFFER_ID,
			D.DISPLAY_VALUE AS OFFER_DESCRIPTION,
			A.RC_TERM_ID,
			F.DISPLAY_VALUE AS RC_TERM_DISPLAY_VALUE,
			CASE WHEN NVL(C.PAYMENT_MODE,0) != 1 THEN 'MRC'
				WHEN UPPER(F.DISPLAY_VALUE) LIKE '%DATA%' THEN 'Data'
				WHEN UPPER(F.DISPLAY_VALUE) LIKE '%VOICE%' OR A.RC_TERM_ID IN (1527,1528,1529) THEN 'Voice'
				WHEN UPPER(F.DISPLAY_VALUE) LIKE '%SMS%' THEN 'SMS'
				ELSE 'Unknown' END AS RC_TYPE,
			A.NUM_DAYS,
			B.OFFER_TYPE,
			E.OFFER_INST_ID,
			C.BALANCE_ID,
			A.AMOUNT/100 as AMOUNT,
			A.TOTAL_TAX/100 AS TOTAL_TAX,
			C.BALANCE_AMOUNT/100 AS CHARGED_AMOUNT
		FROM RC A
			LEFT JOIN OFFER_REF B
			ON A.OFFER_ID = B.OFFER_ID AND B.RESELLER_VERSION_ID = (SELECT MAX(reseller_version_id) FROM reseller_version)
			JOIN RC_BALANCE C
			ON A.RC_TERM_INST_ID = C.RC_TERM_INST_ID AND A.BILLING_SEQUENCE_NUMBER = C.BILLING_SEQUENCE_NUMBER --AND C.PAYMENT_MODE = 1
			LEFT JOIN OFFER_VALUES D
			ON A.OFFER_ID = D.OFFER_ID AND D.RESELLER_VERSION_ID = (SELECT MAX(RESELLER_VERSION_ID) FROM OFFER_VALUES)
			LEFT JOIN RC_TERM_INST_EXTRACT E
			ON E.RC_TERM_INST_ID = A.RC_TERM_INST_ID AND DATE(E.EXTRACT_FILE_DATE) = ${end_dt}::Date + 1
			LEFT JOIN RC_TERM_VALUES F
			ON F.RC_TERM_ID = A.RC_TERM_ID AND F.RESELLER_VERSION_ID = (SELECT MAX(RESELLER_VERSION_ID) FROM RC_TERM_VALUES)
			LEFT JOIN EXTERNAL_ID_EQUIP_MAP_EXTRACT E3
			ON E3.SUBSCR_NO = A.PARENT_SUBSCR_NO
			AND DATE(E3.EXTRACT_FILE_DATE) = ${end_dt}::Date+1 
			AND E3.EXTERNAL_ID_TYPE = 1
		WHERE B.SERVICE_CATEGORY_ID=4 --AND C.BALANCE_ID = 89 AND B.PAYMENT_MODE=1
		AND DATE(A.APPLY_DATE) BETWEEN ${start_dt}::Date AND ${end_dt}::Date
		--AND a.parent_account_no IN (16207575,16230005,16230065,16230197,16230235,16230983,16231123,16231157,16231215,16231422,16231533)
		AND A.AMOUNT != 0
		) RC_S
	GROUP BY 1,2,3,4,5,6
	) Detail
	LEFT JOIN CMF_EXTRACT CME
	ON CME.ACCOUNT_NO = Detail.ACCOUNT_NO
	AND DATE(CME.EXTRACT_FILE_DATE) = ${end_dt}::DATE + 1
	LEFT JOIN ACCOUNT_CATEGORY_VALUES ACV
	ON ACV.ACCOUNT_CATEGORY = CME.ACCOUNT_CATEGORY
	AND ACV.SERVICE_VERSION_ID = (SELECT MAX(SERVICE_VERSION_ID) FROM ACCOUNT_CATEGORY_VALUES)
	LEFT JOIN ACCOUNT_SUBSCRIBER_EXTRACT AE 
	ON AE.SUBSCR_NO = Detail.SUBSCR_NO
	AND DATE(AE.EXTRACT_FILE_DATE) = ${end_dt}::DATE + 1
	LEFT JOIN SUBSCRIBER_STATE_ID_VALUES SSV 
	ON SSV.STATE_ID = AE.CURRENT_STATE 
	AND SSV.LEVEL_CODE = 2
	LEFT JOIN EXTERNAL_ID_EQUIP_MAP_EXTRACT EE 
	ON EE.SUBSCR_NO = AE.SUBSCR_NO
	AND DATE(EE.EXTRACT_FILE_DATE) = ${end_dt}::DATE + 1
	AND EE.EXTERNAL_ID_TYPE = 1
	LEFT JOIN OFFER_VALUES OVL 
	ON OVL.OFFER_ID = AE.PRIMARY_OFFER_ID 
	AND OVL.RESELLER_VERSION_ID = (SELECT MAX(RESELLER_VERSION_ID) FROM OFFER_VALUES)
	LEFT JOIN OFFER_REF ORF 
	ON ORF.OFFER_ID = AE.PRIMARY_OFFER_ID 
	AND ORF.RESELLER_VERSION_ID = (SELECT MAX(RESELLER_VERSION_ID) FROM OFFER_REF)
	LEFT JOIN (
		SELECT 
			CASE WHEN OIE2.ACCOUNT_NO > 0 THEN OIE2.ACCOUNT_NO ELSE OIE2.PARENT_ACCOUNT_NO END AS ACCOUNT_NO,
			LISTAGG(DISTINCT OIE2.OFFER_ID,'; ') AS S_OFFER_ID,
			LISTAGG(DISTINCT OV2.DISPLAY_VALUE,'; ') AS S_OFFER_DESC,
			LISTAGG(DISTINCT TO_CHAR(OIE2.ACTIVE_DT,'yyyy-MM-dd HH24:MI:SS'),';') AS S_OFFER_ACTIVE_DT
		FROM OFFER_INST_EXTRACT OIE2
			JOIN (
				SELECT DISTINCT 
					ACCOUNT_NO 
				FROM EXTERNAL_ID_EQUIP_MAP_EXTRACT
				WHERE DATE(EXTRACT_FILE_DATE) = CURRENT_DATE
				AND EXTERNAL_ID_TYPE = 1 --IN (1,9,11,27,37)
				) E4
			ON E4.ACCOUNT_NO = (CASE WHEN OIE2.ACCOUNT_NO > 0 THEN OIE2.ACCOUNT_NO ELSE OIE2.PARENT_ACCOUNT_NO END)
			JOIN OFFER_VALUES OV2 
			ON OV2.OFFER_ID = OIE2.OFFER_ID
			AND OV2.RESELLER_VERSION_ID = (SELECT MAX(RESELLER_VERSION_ID) FROM OFFER_VALUES)
		WHERE DATE(OIE2.EXTRACT_FILE_DATE) = CURRENT_DATE
		AND OIE2.OFFER_TYPE = 3
		AND OIE2.INACTIVE_DT IS NULL
		GROUP BY 1) AS SOF
	ON Detail.ACCOUNT_NO = SOF.ACCOUNT_NO
WHERE NVL(ORF.PAYMENT_MODE,0) != 1
GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13
ORDER BY 1,2,3,4
;