SELECT
	TO_CHAR(Detail.TRANS_DT,'YYYY-MM') AS MONTH_ID,
	Detail.DESCRIPTION,
	COUNT(1) AS CALLS,
	COUNT(DISTINCT Detail.EXTERNAL_ID) AS SUBS,
	SUM(CASE WHEN Detail.APPLICATION_ID = 1 THEN Detail.PRIMARY_UNITS/60 ELSE 0 END) AS MINUTES,
	SUM(CASE WHEN Detail.BALANCE_ID = 89 THEN (Detail.CHARGED_AMOUNT_PREPAID - Detail.TOTAL_TAX_PREPAID) ELSE 0 END) / 100 AS REVENUE,
	SUM(CASE WHEN Detail.BALANCE_ID = 89 THEN Detail.TOTAL_TAX_PREPAID ELSE 0 END) / 100 AS TAX,
	SUM(CASE WHEN Detail.BALANCE_ID = 89 THEN Detail.CHARGED_AMOUNT_PREPAID ELSE 0 END) / 100 AS CHARGED_CORE,
	SUM(CASE WHEN Detail.BALANCE_ID != 89 AND Detail.UNIT_TYPE = 1 THEN Detail.CHARGED_AMOUNT_PREPAID ELSE 0 END) / 100 AS PROMO,
	SUM(CASE WHEN Detail.BALANCE_ID != 89 AND Detail.UNIT_TYPE = 2 THEN Detail.PRIMARY_UNITS ELSE 0 END) / 60 AS FREE_MINUTES
FROM
	(SELECT 
		CASE WHEN CD.APPLICATION_ID = 2 AND AGM.AUT_GROUP_ID = 38 AND CD.REFUND_FLAG = 'Y' THEN 'SMS: Refund'
			WHEN CD.APPLICATION_ID = 1 AND AGM.AUT_GROUP_ID = 40 THEN 'Voice: Roaming'
			WHEN CD.APPLICATION_ID = 1 AND upper(AV.DISPLAY_VALUE) LIKE '%VOICEMAIL' THEN 'Voice: Voicemail'
			WHEN CD.APPLICATION_ID = 1 AND CD.EXTERNAL_ID != CD.POINT_ORIGIN AND CD.EXTERNAL_ID != CD.POINT_TARGET THEN 'Voice: NetworkCall'
			WHEN CD.APPLICATION_ID = 1 AND AGM.AUT_GROUP_ID = 21 THEN 'Voice: OffNet Digicel'
			WHEN CD.APPLICATION_ID = 1 AND AGM.AUT_GROUP_ID IN (20) THEN 'Voice: OnNet GTT Cell'
			WHEN CD.APPLICATION_ID = 1 AND AGM.AUT_GROUP_ID IN (22,28) THEN 'Voice: OffNet GTT Land'
			WHEN CD.APPLICATION_ID = 1 AND AGM.AUT_GROUP_ID IN (43,54) THEN 'Voice: F&F or CUG'
			WHEN CD.APPLICATION_ID = 1 AND AGM.AUT_GROUP_ID = 53 THEN 'Voice: GPON'
			WHEN CD.APPLICATION_ID = 1 AND AGM.AUT_GROUP_ID = 18 THEN 'Voice: International'
			WHEN CD.APPLICATION_ID = 2 AND AGM.AUT_GROUP_ID = 24 THEN 'SMS: OnNet'
			WHEN CD.APPLICATION_ID = 2 AND AGM.AUT_GROUP_ID = 38 AND AV.DISPLAY_VALUE = 'SMS_OffNet' THEN 'SMS: OffNet Digicel'
			WHEN CD.APPLICATION_ID = 2 AND AGM.AUT_GROUP_ID = 38 AND AV.DISPLAY_VALUE LIKE 'SMS_Int%' THEN 'SMS: International' 
			WHEN CD.APPLICATION_ID = 2 AND AGM.AUT_GROUP_ID = 42 THEN 'SMS: Roaming' 
			WHEN CD.APPLICATION_ID = 2 AND AGM.AUT_GROUP_ID = 38 AND (upper(AV.DISPLAY_VALUE) LIKE '%SMPP%' OR upper(AV.DISPLAY_VALUE) LIKE '%IM2GO%' OR upper(AV.DISPLAY_VALUE) LIKE '%SMS%') AND CD.POINT_ORIGIN != '6209673' THEN 'SMS: SMPP Text'
			WHEN CD.APPLICATION_ID = 2 AND AGM.AUT_GROUP_ID = 38 AND upper(AV.DISPLAY_VALUE) LIKE '%SMPP%' AND CD.POINT_ORIGIN = '6209673' THEN 'SMS: Scripture' 
			ELSE 'Unknown' END AS DESCRIPTION,
		AGM.AUT_GROUP_ID,
		CASE WHEN CD.BALANCE_ID = 89 THEN 'Core' 
			WHEN CD.BALANCE_ID != 89 AND BF.UNIT_TYPE = 1 THEN 'Promo' 
			WHEN CD.BALANCE_ID != 89 AND BF.UNIT_TYPE = 2 THEN 'Free Seconds' 
			WHEN CD.BALANCE_ID != 89 AND BF.UNIT_TYPE = 3 THEN 'Octet' 
			WHEN CD.BALANCE_ID != 89 AND BF.UNIT_TYPE = 4 THEN 'SMS' 
			WHEN CD.BALANCE_ID != 89 AND BF.UNIT_TYPE = 5 THEN 'MMS' 
			WHEN CD.BALANCE_ID != 89 AND BF.UNIT_TYPE = 5001 THEN 'Quantity' 
			ELSE 'Unknown' END AS BALANCE_TYPE,
		'C' AS TABLE_ID,
		CD.TRANS_DT,
		1 AS CALL_COUNT,
		CD.EXTERNAL_ID,
		CD.POINT_ORIGIN,
		CD.POINT_TARGET,
		CD.REFUND_FLAG,
		CD.BALANCE_ID,
		BF.UNIT_TYPE,
		CD.AUT_ID,
		CD.APPLICATION_ID,
		AV.DISPLAY_VALUE,
		CASE WHEN CD.APPLICATION_ID = 1 THEN CD.PRIMARY_UNITS ELSE 0 END AS PRIMARY_UNITS,
		NVL(AMOUNT_PREPAID,0) AS AMOUNT_PREPAID,
		NVL(TOTAL_TAX_PREPAID,0) AS TOTAL_TAX_PREPAID,
		NVL(TOTAL_DISCOUNT_AMT_PREPAID,0) AS TOTAL_DISCOUNT_AMT_PREPAID,
		NVL(CD.CHARGED_AMOUNT_PREPAID,0) AS CHARGED_AMOUNT_PREPAID,
		CD.CELL_ID
	FROM CDR_DATA CD
		JOIN AUT_FINAL_VALUES AV
		ON CD.AUT_ID = AV.AUT_ID 
		AND AV.RESELLER_VERSION_ID = (SELECT MAX(RESELLER_VERSION_ID) FROM AUT_FINAL_VALUES)
		JOIN AUT_GROUP_MAP AGM
		ON CD.AUT_ID = AGM.AUT_ID 
		AND AGM.RESELLER_VERSION_ID = (SELECT MAX(RESELLER_VERSION_ID) FROM AUT_GROUP_MAP)
		JOIN BALANCE_REF BF
		ON CD.BALANCE_ID = BF.BALANCE_ID 
		AND BF.RESELLER_VERSION_ID = (SELECT MAX(RESELLER_VERSION_ID) FROM BALANCE_REF)
	WHERE CD.APPLICATION_ID IN (1,2) AND CD.PRIMARY_UNITS > 0 AND CD.PAYMENT_MODE = 1 --AND NVL(CD.CHARGED_AMOUNT_PREPAID,0) != 0 
	AND CD.EXTERNAL_ID_TYPE = 1
	AND DATE(trans_dt) BETWEEN ADD_MONTHS(CURRENT_DATE-DAY(CURRENT_DATE),-1)+1 AND CURRENT_DATE-DAY(CURRENT_DATE)
	UNION ALL
	SELECT 
		CASE WHEN C2.APPLICATION_ID = 2 AND AGM.AUT_GROUP_ID = 38 AND C2.REFUND_FLAG = 'Y' THEN 'SMS: Refund'
			WHEN C2.APPLICATION_ID = 1 AND AGM.AUT_GROUP_ID = 40 THEN 'Voice: Roaming'
			WHEN C2.APPLICATION_ID = 1 AND upper(AV.DISPLAY_VALUE) LIKE '%VOICEMAIL' THEN 'Voice: Voicemail'
			WHEN C2.APPLICATION_ID = 1 AND C2.EXTERNAL_ID != C2.POINT_ORIGIN AND C2.EXTERNAL_ID != C2.POINT_TARGET THEN 'Voice: NetworkCall'
			WHEN C2.APPLICATION_ID = 1 AND AGM.AUT_GROUP_ID = 21 THEN 'Voice: OffNet Digicel'
			WHEN C2.APPLICATION_ID = 1 AND AGM.AUT_GROUP_ID IN (20) THEN 'Voice: OnNet GTT Cell'
			WHEN C2.APPLICATION_ID = 1 AND AGM.AUT_GROUP_ID IN (22,28) THEN 'Voice: OffNet GTT Land'
			WHEN C2.APPLICATION_ID = 1 AND AGM.AUT_GROUP_ID IN (43,54) THEN 'Voice: F&F or CUG'
			WHEN C2.APPLICATION_ID = 1 AND AGM.AUT_GROUP_ID = 53 THEN 'Voice: GPON'
			WHEN C2.APPLICATION_ID = 1 AND AGM.AUT_GROUP_ID = 18 THEN 'Voice: International'
			WHEN C2.APPLICATION_ID = 2 AND AGM.AUT_GROUP_ID = 24 THEN 'SMS: OnNet'
			WHEN C2.APPLICATION_ID = 2 AND AGM.AUT_GROUP_ID = 38 AND AV.DISPLAY_VALUE = 'SMS_OffNet' THEN 'SMS: OffNet Digicel'
			WHEN C2.APPLICATION_ID = 2 AND AGM.AUT_GROUP_ID = 38 AND AV.DISPLAY_VALUE LIKE 'SMS_Int%' THEN 'SMS: International' 
			WHEN C2.APPLICATION_ID = 2 AND AGM.AUT_GROUP_ID = 42 THEN 'SMS: Roaming' 
			WHEN C2.APPLICATION_ID = 2 AND AGM.AUT_GROUP_ID = 38 AND (upper(AV.DISPLAY_VALUE) LIKE '%SMPP%' OR upper(AV.DISPLAY_VALUE) LIKE '%IM2GO%' OR upper(AV.DISPLAY_VALUE) LIKE '%SMS%') AND C2.POINT_ORIGIN != '6209673' THEN 'SMS: SMPP Text'
			WHEN C2.APPLICATION_ID = 2 AND AGM.AUT_GROUP_ID = 38 AND upper(AV.DISPLAY_VALUE) LIKE '%SMPP%' AND C2.POINT_ORIGIN = '6209673' THEN 'SMS: Scripture' 
			ELSE 'Unknown' END AS DESCRIPTION,
		AGM.AUT_GROUP_ID,
		CASE WHEN CB.BALANCE_ID = 89 THEN 'Core' 
			WHEN CB.BALANCE_ID != 89 AND CB.UNIT_TYPE = 1 THEN 'Promo' 
			WHEN CB.BALANCE_ID != 89 AND CB.UNIT_TYPE = 2 THEN 'Free Seconds' 
			WHEN CB.BALANCE_ID != 89 AND CB.UNIT_TYPE = 3 THEN 'Octet' 
			WHEN CB.BALANCE_ID != 89 AND CB.UNIT_TYPE = 4 THEN 'SMS' 
			WHEN CB.BALANCE_ID != 89 AND CB.UNIT_TYPE = 5 THEN 'MMS' 
			WHEN CB.BALANCE_ID != 89 AND CB.UNIT_TYPE = 5001 THEN 'Quantity' 
			ELSE 'Unknown' END AS BALANCE_TYPE,
		'B' AS TABLE_ID,
		C2.TRANS_DT,
		CASE WHEN CB.BALANCE_COUNTER = 1 THEN 1 ELSE 0 END AS CALL_COUNT,
		C2.EXTERNAL_ID,
		C2.POINT_ORIGIN,
		C2.POINT_TARGET,
		C2.REFUND_FLAG,
		CB.BALANCE_ID,
		CB.UNIT_TYPE,
		C2.AUT_ID,
		C2.APPLICATION_ID,
		AV.DISPLAY_VALUE,
		(CB.BALANCE_AMOUNT / CASE WHEN CB.UNIT_TYPE = 1 THEN 30.16 ELSE 26.45 END) * 0.60 AS PRIMARY_UNITS,
		CASE WHEN NVL(C2.TOTAL_TAX_PREPAID,0) > 0 THEN (CASE WHEN C2.REFUND_FLAG != 'Y' THEN (CASE WHEN CB.UNIT_TYPE = 1 THEN CB.BALANCE_AMOUNT / 1.14 ELSE 0 END) ELSE (0 - CB.BALANCE_AMOUNT) / 1.14 END) ELSE (CASE WHEN C2.REFUND_FLAG != 'Y' THEN CB.BALANCE_AMOUNT ELSE 0 - CB.BALANCE_AMOUNT END) END AS AMOUNT_PREPAID,
		CASE WHEN nvl(C2.TOTAL_TAX_PREPAID,0) > 0 THEN (CASE WHEN CB.UNIT_TYPE = 1 THEN (CB.BALANCE_AMOUNT - (CB.BALANCE_AMOUNT / 1.14)) ELSE 0 END) ELSE 0 END AS TOTAL_TAX_PREPAID,
		0 AS TOTAL_DISCOUNT_AMT_PREPAID,
		CASE WHEN NVL(CB.BALANCE_AMOUNT,0) > 0 THEN (CASE WHEN C2.REFUND_FLAG != 'Y' THEN (CASE WHEN CB.UNIT_TYPE = 1 THEN CB.BALANCE_AMOUNT ELSE 0 END) ELSE 0 - CB.BALANCE_AMOUNT END) END AS CHARGED_AMOUNT_PREPAID,
		C2.CELL_ID
	FROM CDR_DATA C2
		JOIN CDR_BALANCE CB
		ON C2.MSG_ID = CB.MSG_ID AND C2.MSG_ID2 = CB.MSG_ID2
		JOIN AUT_FINAL_VALUES AV
		ON C2.AUT_ID = AV.AUT_ID 
		AND AV.RESELLER_VERSION_ID = (SELECT MAX(RESELLER_VERSION_ID) FROM AUT_FINAL_VALUES)
		JOIN AUT_GROUP_MAP AGM
		ON C2.AUT_ID = AGM.AUT_ID 
		AND AGM.RESELLER_VERSION_ID = (SELECT MAX(RESELLER_VERSION_ID) FROM AUT_GROUP_MAP)
	WHERE C2.APPLICATION_ID IN (1,2) AND C2.BALANCE_ID IS NULL AND CB.PAYMENT_MODE = 1
	AND C2.EXTERNAL_ID_TYPE = 1
	AND DATE(C2.TRANS_DT) BETWEEN ADD_MONTHS(CURRENT_DATE-DAY(CURRENT_DATE),-1)+1 AND CURRENT_DATE-DAY(CURRENT_DATE)) Detail
GROUP BY 1,2
ORDER BY 1,2