WITH Scorecard_RECORDS 
		(DATESTART_MONTH_ENDING,OPERATING_COMPANY_CODE,OPERATING_COMPANY_NAME, ACCOUNTNUMBER,FIRSTNAME,LASTNAME, 
		LINE_OF_SERVICE, SUBLINE_OF_SERVICE, SUBLINE_OF_SERVICE_SEGMENT,CUSTOMER_TYPE_NAME,
		PRODUCT_CODE,PRODUCT_NAME, tenure_days, BID, UNIT_COUNTABLE, REVENUE_COUNTABLE,
		OFFICIALLY_COUNTED_SUBSCRIBER, SYSTEMID,DATEIN, BEGINNING_ACTIVE, ENDING_ACTIVE, DEACTIVATIONS,
		REACTIVATIONS, NET_DEACTIVATIONS, ACTIVATIONS, NET_ACTIVATIONS, NET_SUSPENDS,ENDING_SUSPEND,
		ENDING_PENDING_DEACTIVATION, ENDING_PENDING_ACTIVE, BEGINNING_PENDING_ACTIVE, BEGINNING_PENDING_DEACTIVATION) AS (
	
		
		
	
	
			SELECT DATEADD('DAY',-1,DATEADD('MONTH',1,DATE_TRUNC('MONTH',DATESTART)))AS DATESTART_MONTH_ENDING
				, SUB.OPERATING_COMPANY_CODE
				, SUB.OPERATING_COMPANY_NAME
				, SUB.ACCOUNTNUMBER
				,SUB.FIRSTNAME
				,SUB.LASTNAME
				,LINE_OF_SERVICE
				,SUBLINE_OF_SERVICE
				,SUBLINE_OF_SERVICE_SEGMENT
				,CUSTOMER_TYPE_NAME
				,PRODUCT_CODE
				,PRODUCT_NAME
				, datediff(day, DATEIN , current_date) tenure_days
				, RTRIM(SUB.BID) AS BID
				, SUB.UNIT_COUNTABLE
				, SUB.REVENUE_COUNTABLE
				, SUB.OFFICIALLY_COUNTED_SUBSCRIBER
				, SUB.SYSTEMID
				, MIN(SUB.DATEIN) AS DATEIN
				--, SUB.DATASET_TYPE
				, SUM(SUB.BEGINNING_ACTIVE) AS BEGINNING_ACTIVE
				, SUM(CASE WHEN DATE_TRUNC('MONTH',DATESTART)=DATE_TRUNC('MONTH',CURRENT_DATE) THEN BEGINNING_ACTIVE+NET_ACTIVATIONS
				ELSE
				SUB.ENDING_ACTIVE
				END) AS ENDING_ACTIVE
				, SUM(SUB.DEACTIVATIONS) AS DEACTIVATIONS
				, SUM(SUB.REACTIVATIONS) AS REACTIVATIONS
				, SUM(SUB.NET_DEACTIVATIONS) AS NET_DEACTIVATIONS
				, SUM(SUB.ACTIVATIONS) AS ACTIVATIONS
				, SUM(SUB.NET_ACTIVATIONS) AS NET_ACTIVATIONS
				, SUM(SUB.NET_SUSPENDS) AS NET_SUSPENDS
				, SUM(SUB.ENDING_SUSPEND) AS ENDING_SUSPEND
				, SUM(SUB.ENDING_PENDING_DEACTIVATION) AS ENDING_PENDING_DEACTIVATION
				, SUM(SUB.ENDING_PENDING_ACTIVE) AS ENDING_PENDING_ACTIVE
				, SUM(SUB.BEGINNING_PENDING_ACTIVE) AS BEGINNING_PENDING_ACTIVE
				, SUM(SUB.BEGINNING_PENDING_DEACTIVATION) AS BEGINNING_PENDING_DEACTIVATION
			FROM ATNI_PROD.ATNI_ANALYTICS.SUBSCRIBER_BG_END_WEEKLY_MONTHLY_SNAPSHOT_DAILYACTIVITY SUB
			WHERE SUB.DATASET_TYPE IN ('END_MONTHLY_SNAPSHOT', 'DAILY_SUB_ACTIVITY','BG_MONTHLY_SNAPSHOT')
				AND SUB.OPERATING_COMPANY_CODE = 1 --GTT
				--AND SUB.OFFICIALLY_COUNTED_SUBSCRIBER = 'yes'
				AND SUBLINE_OF_SERVICE_SEGMENT != 'DSL'
				--AND date(DATESTART) >= ADD_MONTHS(current_date, -6)
				AND SUBLINE_OF_SERVICE IN ('Mobile Prepaid')
				--AND SUB.SYSTEMID IN (4,8,18,24)
				--AND LINE_OF_SERVICE IN ('Voice','Mobile')
				GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18
		),
	churn_records(ACCOUNTNUMBER, BID,DEACTIVED_DATE,churn  ) AS 
	(
	


SELECT 
		DISTINCT
		ACCOUNTNUMBER,
		BID,
	    IFF(Y.Last_recharge_date > X.DEACTIVED_DATE, NULL ,X.DEACTIVED_DATE) DEACTIVED_DATE,
	    IFF(Y.Last_recharge_date > X.DEACTIVED_DATE, 0,1) churn
	FROM 
		(
			


			SELECT 
			 
				score.ACCOUNTNUMBER,
				score.BID,
				sum(score.NET_DEACTIVATIONS) OVER 
								  			(PARTITION BY score.ACCOUNTNUMBER,score.BID ORDER BY score.NET_DEACTIVATIONS
								  			RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
								  			) AS churn,
				max(score.DEACT_DATE) OVER 
								  			(PARTITION BY score.ACCOUNTNUMBER,score.BID ORDER BY score.DEACT_DATE
								  			RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
								  			) AS DEACTIVED_DATE
				FROM 
				(
				SELECT
						distinct
						a.DATESTART ,
						ifNULL(b.DATEOUT, a.DATESTART) AS DEACT_DATE,
						a.BID,
						a.ACCOUNTNUMBER, 
						a.BEGINNING_ACTIVE,
						a.NET_ACTIVATIONS,
						a.NET_DEACTIVATIONS,
						a.ENDING_ACTIVE 
						FROM
						ATNI_PROD.ATNI_ANALYTICS.SUBSCRIBER_BG_END_WEEKLY_MONTHLY_SNAPSHOT_DAILYACTIVITY a 
						 LEFT JOIN ATNI_PROD.SC_INPUT.ODSSUBSCRIBERSNAPSHOT b 
						 	ON a.DATESTART = b.DATESTART AND a.ACCOUNTNUMBER = b.ACCOUNTNUMBER  AND a.BID = b.BID AND b.SOURCESYSTEMID=1
						WHERE
						a.SOURCESYSTEMID=1
						AND SUBLINE_OF_SERVICE IN ('Mobile Prepaid')
						AND a.UNIT_COUNTABLE=1
						AND a.REVENUE_COUNTABLE=1
						AND a.DATASET_TYPE IN('BG_MONTHLY_SNAPSHOT', 'END_MONTHLY_SNAPSHOT', 'DAILY_SUB_ACTIVITY')
						--AND date(a.DATESTART) BETWEEN to_date('2021-01-01','YYYY-MM-DD') AND to_date('2021-12-31','YYYY-MM-DD')
								
				) score
				WHERE date(score.DEACT_DATE)  BETWEEN  ADD_MONTHS(current_date, -9) AND ADD_MONTHS(current_date, -6)
			) X
			LEFT JOIN 
			( 
				SELECT
				DISTINCT 
				RH.ACCOUNT_NO,
				EIEM.EXTERNAL_ID,
				count(1) OVER 
				  			(PARTITION BY RH.ACCOUNT_NO,EIEM.EXTERNAL_ID ORDER BY RH.RECHARGE_DATE_TIME 
				  			RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
				  			) AS TopUp,
				max(RH.RECHARGE_DATE_TIME) OVER 
				  			(PARTITION BY RH.ACCOUNT_NO,EIEM.EXTERNAL_ID ORDER BY RH.RECHARGE_DATE_TIME 
				  			RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
				  			) AS Last_recharge_date
			FROM RECHARGE_HISTORY RH
				JOIN RECHARGE_HISTORY_BALANCE RHB
				ON RH.RECHARGE_ID = RHB.RECHARGE_ID AND RH.RECHARGE_ID2 = RHB.RECHARGE_ID2
				LEFT JOIN (
					SELECT DISTINCT 
						SUBSCR_NO, EXTERNAL_ID
					FROM EXTERNAL_ID_EQUIP_MAP
					WHERE DATE(EFFECTIVE_DT)-1 <= date(current_date) AND DATE(EXPIRY_DT)-1 > date(current_date)
					AND EXTERNAL_ID_TYPE = 1 AND IS_CURRENT = 1) EIEM
				ON RH.SUBSCR_NO = EIEM.SUBSCR_NO
			WHERE DATE(RH.RECHARGE_DATE_TIME) >= ADD_MONTHS(current_date, -12)
			AND substring(nvl(RH.RECHARGE_COMMMENT,' '),1,8) != 'inswitch' AND nvl(RHB.AMOUNT,0) < 0
			AND substring(EIEM.EXTERNAL_ID,1,4) = '5926'
			AND RHB.BALANCE_ID = 89 AND RHB.PAYMENT_MODE = 1
			
			
			
			)Y
			ON X.ACCOUNTNUMBER = Y.ACCOUNT_NO AND X.BID = Y.EXTERNAL_ID
		WHERE churn > 0
	
	),
Suspended_RECORDS(ACCOUNTNUMBER,BID,days_suspended  ) AS 
	 (
			SELECT 
				A.ACCOUNTNUMBER 
				,A.BID 
				,sum(datediff(day, DATEIN , DATEOUT)) days_suspended
			FROM 
				ATNI_PROD.ATNI_ANALYTICS.SV_SUBSCRIBER_BG_END_WEEKLY_MONTHLY_SNAPSHOT_DAILYACTIVITY A
				JOIN churn_records B ON A.ACCOUNTNUMBER = B.ACCOUNTNUMBER AND A.BID = B.BID
				
			WHERE
				DATASET_TYPE='DAILY_SUB_ACTIVITY'
				AND OPERATING_COMPANY_CODE=1
				AND OFFICIALLY_COUNTED_SUBSCRIBER='yes'
				AND SUSPEND_TO_ACTIVE<>0
				AND date(DATESTART) >= ADD_MONTHS(B.DEACTIVED_DATE, -6)
			GROUP BY 1,2
		 UNION 
		 SELECT 
				A.ACCOUNTNUMBER 
				,A.BID 
				,sum(datediff(day, DATEIN , DATEOUT)) days_suspended
			FROM 
				ATNI_PROD.ATNI_ANALYTICS.SV_SUBSCRIBER_BG_END_WEEKLY_MONTHLY_SNAPSHOT_DAILYACTIVITY A
				LEFT JOIN churn_records B ON A.ACCOUNTNUMBER = B.ACCOUNTNUMBER AND A.BID = B.BID
				
			WHERE
				DATASET_TYPE='DAILY_SUB_ACTIVITY'
				AND OPERATING_COMPANY_CODE=1
				AND OFFICIALLY_COUNTED_SUBSCRIBER='yes'
				AND SUSPEND_TO_ACTIVE<>0
				AND date(DATESTART) >= ADD_MONTHS(current_date, -6)
				AND B.ACCOUNTNUMBER IS NULL 
				AND B.BID IS null
				
			GROUP BY 1,2
	),
	
	--
Purchased_plan_RECORDS( 

					PARENT_ACCOUNT_NO,
					PARENT_SUBSCR_NO,
					BID,
					NUM_DAYS ,
					PRODUCT_COUNT,
					PAYMENT_ITEM_CODE,
					PRODUCT_NAME,					
					PAYMENT_CHANNEL_NAME
					
					) AS
					(
					SELECT 
					PARENT_ACCOUNT_NO,
					PARENT_SUBSCR_NO,
					Q.BID,
					sum(DP.NUM_DAYS) NUM_DAYS,
					count(PAYMENT_ITEM_DESCRIPTION) PRODUCT_COUNT,
					listagg(distinct PAYMENT_ITEM_CODE,' ,') within group (order by PAYMENT_ITEM_CODE) PAYMENT_ITEM_CODE,
					listagg(distinct PAYMENT_ITEM_DESCRIPTION,' ,') within group (order by PAYMENT_ITEM_DESCRIPTION) PRODUCT_NAME,
					listagg(distinct PAYMENT_CHANNEL,' ,') within group (order by PAYMENT_CHANNEL) PAYMENT_CHANNEL_NAME
					FROM(
							SELECT 
							DATE_MONTH_ENDING,
							DATESTART,
							PARENT_ACCOUNT_NO,
							PARENT_SUBSCR_NO,
							BID,
							PAYMENT_TIMESTAMP,
							PAYMENT_TYPE,
							PAYMENT_METHOD,
							PAYMENT_CHANNEL,
							PAYMENT_LOCATION,
							CONVERSION_RATE_GYD,
							PAYMENT_ITEM_CODE,
							PAYMENT_ITEM_DESCRIPTION,
							SUM(PAYMENT_AMOUNT_USD) AS PAYMENT_AMOUNT_USD,
							SUM(PAYMENT_AMOUNT_GYD) AS PAYMENT_AMOUNT_GYD,
							SUM(PAYMENT_AMOUNT_GYC) AS PAYMENT_AMOUNT_GYC,
							SUM(TOTAL_TAX_USD) AS TOTAL_TAX_USD,
							SUM(TOTAL_TAX_GYD) AS TOTAL_TAX_GYD,
							SUM(TOTAL_TAX_GYC) AS TOTAL_TAX_GYC
							FROM(
									SELECT
									LAST_DAY(RC.CREATE_DATE) AS DATE_MONTH_ENDING,
									DATE(RC.CREATE_DATE) AS DATESTART,
									RC.PARENT_ACCOUNT_NO,
									RC.PARENT_SUBSCR_NO,
									E.EXTERNAL_ID BID,
									RC.APPLY_DATE AS PAYMENT_TIMESTAMP,
									'Prepaid Plan Purchases' AS PAYMENT_TYPE,
									RC.OFFER_ID AS PAYMENT_ITEM_CODE,
									OV.DISPLAY_VALUE AS PAYMENT_ITEM_DESCRIPTION,
									NULL AS PAYMENT_METHOD,
									CASE
									  WHEN GTMT.OFFERINSTID IS NOT NULL THEN 'Toovio'
									  WHEN UPPER(OV.DISPLAY_VALUE) LIKE 'LEND%' THEN 'LendMe'
									  ELSE  
									     'GTT Platforms'
									END AS PAYMENT_CHANNEL, 
									NULL AS PAYMENT_LOCATION,
									ROUND((AMOUNT)/100/CUR.CONVERSION_RATE_GYD,2) AS PAYMENT_AMOUNT_USD,
									(AMOUNT)/100 AS PAYMENT_AMOUNT_GYD,
									(AMOUNT) AS PAYMENT_AMOUNT_GYC,
									ROUND((TOTAL_TAX)/100/CUR.CONVERSION_RATE_GYD,2) AS TOTAL_TAX_USD,
									(TOTAL_TAX)/100 AS TOTAL_TAX_GYD,
									(TOTAL_TAX) AS TOTAL_TAX_GYC,
									CUR.CONVERSION_RATE_GYD 
									FROM
									ATNI_PROD.GTT_REPORTING.RC 
									INNER JOIN ATNI_PROD.GTT_REPORTING.RC_BALANCE RCBAL
												ON RC.RC_TERM_INST_ID = RCBAL.RC_TERM_INST_ID AND RC.BILLING_SEQUENCE_NUMBER = RCBAL.BILLING_SEQUENCE_NUMBER AND RCBAL.PAYMENT_MODE = 1
								    LEFT JOIN  ATNI_PROD.GTT_REPORTING.EXTERNAL_ID_EQUIP_MAP_EXTRACT E
										ON RC.PARENT_ACCOUNT_NO = E.ACCOUNT_NO AND RC.PARENT_SUBSCR_NO =  E.SUBSCR_NO AND E.IS_CURRENT = 1 AND E.EXTERNAL_ID_TYPE = 1 AND date(E.EXTRACT_FILE_DATE) = date(current_date)
									LEFT JOIN 
								    ATNI_PROD.GTT_REPORTING.RC_TERM_INST_EXTRACT RTIE ON RC.RC_TERM_INST_ID=RTIE.RC_TERM_INST_ID AND RTIE.EXTRACT_FILE_DATE=CURRENT_DATE
								    LEFT JOIN 
								    ( 
								      SELECT
								      DISTINCT 
								      OFFERINSTID
								      FROM 
						              ATNI_PROD.GTT_REPORTING.GTT_TOOVIO_MIDDLEWARE_TRANS
						            )  GTMT ON RTIE.OFFER_INST_ID= GTMT.OFFERINSTID
									LEFT JOIN 
									ATNI_PROD.GTT_REPORTING.OFFER_VALUES OV ON RC.OFFER_ID=OV.OFFER_ID AND OV.RESELLER_VERSION_ID=(SELECT MAX(RESELLER_VERSION_ID) FROM ATNI_PROD.GTT_REPORTING.OFFER_VALUES)
									LEFT JOIN 
					                ATNI_PROD.GTT_REPORTING.GTT_RAA_CURRENCY CUR ON CUR.CURRENCY='USD'
									WHERE
									DATE(RC.CREATE_DATE)>='2020-01-01'
									AND RCBAL.BALANCE_ID = 89
							) AS A
							GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13
					) AS Q
					LEFT JOIN 
					ATNI_PROD.GTT_REPORTING.DATA_PLANS DP 
					ON Q.PAYMENT_ITEM_CODE = DP.OFFER_ID 
					JOIN churn_records B ON Q.PARENT_ACCOUNT_NO = B.ACCOUNTNUMBER AND Q.BID = B.BID --**
						WHERE date(DATESTART) >= ADD_MONTHS(B.DEACTIVED_DATE, -6)
					GROUP BY 1,2,3
					
					UNION 
					SELECT 
					PARENT_ACCOUNT_NO,
					PARENT_SUBSCR_NO,
					Q.BID,
					sum(DP.NUM_DAYS) NUM_DAYS,
					count(PAYMENT_ITEM_DESCRIPTION) PRODUCT_COUNT,
					listagg(distinct PAYMENT_ITEM_CODE,' ,') within group (order by PAYMENT_ITEM_CODE) PAYMENT_ITEM_CODE,
					listagg(distinct PAYMENT_ITEM_DESCRIPTION,' ,') within group (order by PAYMENT_ITEM_DESCRIPTION) PRODUCT_NAME,
					listagg(distinct PAYMENT_CHANNEL,' ,') within group (order by PAYMENT_CHANNEL) PAYMENT_CHANNEL_NAME
					FROM(
							SELECT 
							DATE_MONTH_ENDING,
							DATESTART,
							PARENT_ACCOUNT_NO,
							PARENT_SUBSCR_NO,
							BID,
							PAYMENT_TIMESTAMP,
							PAYMENT_TYPE,
							PAYMENT_METHOD,
							PAYMENT_CHANNEL,
							PAYMENT_LOCATION,
							CONVERSION_RATE_GYD,
							PAYMENT_ITEM_CODE,
							PAYMENT_ITEM_DESCRIPTION,
							SUM(PAYMENT_AMOUNT_USD) AS PAYMENT_AMOUNT_USD,
							SUM(PAYMENT_AMOUNT_GYD) AS PAYMENT_AMOUNT_GYD,
							SUM(PAYMENT_AMOUNT_GYC) AS PAYMENT_AMOUNT_GYC,
							SUM(TOTAL_TAX_USD) AS TOTAL_TAX_USD,
							SUM(TOTAL_TAX_GYD) AS TOTAL_TAX_GYD,
							SUM(TOTAL_TAX_GYC) AS TOTAL_TAX_GYC
							FROM(
									SELECT
									LAST_DAY(RC.CREATE_DATE) AS DATE_MONTH_ENDING,
									DATE(RC.CREATE_DATE) AS DATESTART,
									RC.PARENT_ACCOUNT_NO,
									RC.PARENT_SUBSCR_NO,
									E.EXTERNAL_ID BID,
									RC.APPLY_DATE AS PAYMENT_TIMESTAMP,
									'Prepaid Plan Purchases' AS PAYMENT_TYPE,
									RC.OFFER_ID AS PAYMENT_ITEM_CODE,
									OV.DISPLAY_VALUE AS PAYMENT_ITEM_DESCRIPTION,
									NULL AS PAYMENT_METHOD,
									CASE
									  WHEN GTMT.OFFERINSTID IS NOT NULL THEN 'Toovio'
									  WHEN UPPER(OV.DISPLAY_VALUE) LIKE 'LEND%' THEN 'LendMe'
									  ELSE  
									     'GTT Platforms'
									END AS PAYMENT_CHANNEL, 
									NULL AS PAYMENT_LOCATION,
									ROUND((AMOUNT)/100/CUR.CONVERSION_RATE_GYD,2) AS PAYMENT_AMOUNT_USD,
									(AMOUNT)/100 AS PAYMENT_AMOUNT_GYD,
									(AMOUNT) AS PAYMENT_AMOUNT_GYC,
									ROUND((TOTAL_TAX)/100/CUR.CONVERSION_RATE_GYD,2) AS TOTAL_TAX_USD,
									(TOTAL_TAX)/100 AS TOTAL_TAX_GYD,
									(TOTAL_TAX) AS TOTAL_TAX_GYC,
									CUR.CONVERSION_RATE_GYD 
									FROM
									ATNI_PROD.GTT_REPORTING.RC 
									INNER JOIN ATNI_PROD.GTT_REPORTING.RC_BALANCE RCBAL
												ON RC.RC_TERM_INST_ID = RCBAL.RC_TERM_INST_ID AND RC.BILLING_SEQUENCE_NUMBER = RCBAL.BILLING_SEQUENCE_NUMBER AND RCBAL.PAYMENT_MODE = 1
								    
									LEFT JOIN  ATNI_PROD.GTT_REPORTING.EXTERNAL_ID_EQUIP_MAP_EXTRACT E
										ON RC.PARENT_ACCOUNT_NO = E.ACCOUNT_NO AND RC.PARENT_SUBSCR_NO =  E.SUBSCR_NO AND E.IS_CURRENT = 1 AND E.EXTERNAL_ID_TYPE = 1 AND date(E.EXTRACT_FILE_DATE) = date(current_date)			
									LEFT JOIN 
								    ATNI_PROD.GTT_REPORTING.RC_TERM_INST_EXTRACT RTIE ON RC.RC_TERM_INST_ID=RTIE.RC_TERM_INST_ID AND RTIE.EXTRACT_FILE_DATE=CURRENT_DATE
								    LEFT JOIN 
								    ( 
								      SELECT
								      DISTINCT 
								      OFFERINSTID
								      FROM 
						              ATNI_PROD.GTT_REPORTING.GTT_TOOVIO_MIDDLEWARE_TRANS
						            )  GTMT ON RTIE.OFFER_INST_ID= GTMT.OFFERINSTID
									LEFT JOIN 
									ATNI_PROD.GTT_REPORTING.OFFER_VALUES OV ON RC.OFFER_ID=OV.OFFER_ID AND OV.RESELLER_VERSION_ID=(SELECT MAX(RESELLER_VERSION_ID) FROM ATNI_PROD.GTT_REPORTING.OFFER_VALUES)
									LEFT JOIN 
					                ATNI_PROD.GTT_REPORTING.GTT_RAA_CURRENCY CUR ON CUR.CURRENCY='USD'
									WHERE
									DATE(RC.CREATE_DATE)>='2020-01-01'
									AND RCBAL.BALANCE_ID = 89
							) AS A
							GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13
					) AS Q
					LEFT JOIN 
					ATNI_PROD.GTT_REPORTING.DATA_PLANS DP 
					ON Q.PAYMENT_ITEM_CODE = DP.OFFER_ID 
					LEFT JOIN churn_records B ON PARENT_ACCOUNT_NO = B.ACCOUNTNUMBER AND Q.BID = B.BID
						WHERE date(DATESTART) >= ADD_MONTHS(current_date, -6)
						AND B.ACCOUNTNUMBER IS null
					GROUP BY 1,2,3
					
					
	
	
	),
	
	
	--
	Last_CHARGE_EVENT_RECORDS(ACCOUNT_NO,EXTERNAL_ID,Last_charge_event ) AS 
			(
				SELECT 
				DISTINCT 
					CD.ACCOUNT_NO 
					,CD.EXTERNAL_ID 
					,max(CD.TRANS_DT) OVER 
					  			(PARTITION BY CD.ACCOUNT_NO ,CD.EXTERNAL_ID ORDER BY CD.TRANS_DT 
					  			RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
					  			) AS Last_charge_event
				FROM 
					GTT_REPORTING.CDR_DATA CD
					JOIN churn_records B ON CD.ACCOUNT_NO = B.ACCOUNTNUMBER AND CD.EXTERNAL_ID  = B.BID
				WHERE 
					CD.EXTERNAL_ID_TYPE=1
					AND DATE(CD.TRANS_DT) >= ADD_MONTHS(B.DEACTIVED_DATE, -6)
					AND CD.CHARGED_AMOUNT > 0
				
					UNION 
					
				SELECT 
				DISTINCT 
					CD.ACCOUNT_NO 
					,CD.EXTERNAL_ID 
					,max(CD.TRANS_DT) OVER 
					  			(PARTITION BY CD.ACCOUNT_NO ,CD.EXTERNAL_ID ORDER BY CD.TRANS_DT 
					  			RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
					  			) AS Last_charge_event
				FROM 
					GTT_REPORTING.CDR_DATA CD
					LEFT JOIN churn_records B ON CD.ACCOUNT_NO = B.ACCOUNTNUMBER AND CD.EXTERNAL_ID  = B.BID
				WHERE 
					CD.EXTERNAL_ID_TYPE=1
					AND DATE(CD.TRANS_DT) >= ADD_MONTHS(current_date, -6)
					AND CD.CHARGED_AMOUNT > 0
					AND B.ACCOUNTNUMBER IS NULL 
					AND B.BID IS NULL 
					
				
			
			),  
			--
			
	Last_recharge_RECORDS (ACCOUNT_NO,EXTERNAL_ID,TopUp,Last_recharge_date) AS 
			(
			SELECT
				DISTINCT 
				RH.ACCOUNT_NO,
				EIEM.EXTERNAL_ID,
				count(1) OVER 
				  			(PARTITION BY RH.ACCOUNT_NO,EIEM.EXTERNAL_ID ORDER BY RH.RECHARGE_DATE_TIME 
				  			RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
				  			) AS TopUp,
				max(RH.RECHARGE_DATE_TIME) OVER 
				  			(PARTITION BY RH.ACCOUNT_NO,EIEM.EXTERNAL_ID ORDER BY RH.RECHARGE_DATE_TIME 
				  			RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
				  			) AS Last_recharge_date
			FROM RECHARGE_HISTORY RH
				JOIN RECHARGE_HISTORY_BALANCE RHB
				ON RH.RECHARGE_ID = RHB.RECHARGE_ID AND RH.RECHARGE_ID2 = RHB.RECHARGE_ID2
				LEFT JOIN (
					SELECT DISTINCT 
						SUBSCR_NO, EXTERNAL_ID
					FROM EXTERNAL_ID_EQUIP_MAP
					WHERE DATE(EFFECTIVE_DT)-1 <= date(current_date) AND DATE(EXPIRY_DT)-1 > date(current_date)
					AND EXTERNAL_ID_TYPE = 1 AND IS_CURRENT = 1) EIEM
				ON RH.SUBSCR_NO = EIEM.SUBSCR_NO
			JOIN churn_records B ON RH.ACCOUNT_NO = B.ACCOUNTNUMBER
			WHERE DATE(RH.RECHARGE_DATE_TIME) >= ADD_MONTHS(B.DEACTIVED_DATE, -6)
			AND substring(nvl(RH.RECHARGE_COMMMENT,' '),1,8) != 'inswitch' AND nvl(RHB.AMOUNT,0) < 0
			AND substring(EIEM.EXTERNAL_ID,1,4) = '5926'
			AND RHB.BALANCE_ID = 89 AND RHB.PAYMENT_MODE = 1
			
			UNION 
			
			
				SELECT
				DISTINCT 
				RH.ACCOUNT_NO,
				EIEM.EXTERNAL_ID,
				count(1) OVER 
				  			(PARTITION BY RH.ACCOUNT_NO,EIEM.EXTERNAL_ID ORDER BY RH.RECHARGE_DATE_TIME 
				  			RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
				  			) AS TopUp,
				max(RH.RECHARGE_DATE_TIME) OVER 
				  			(PARTITION BY RH.ACCOUNT_NO,EIEM.EXTERNAL_ID ORDER BY RH.RECHARGE_DATE_TIME 
				  			RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
				  			) AS Last_recharge_date
			FROM RECHARGE_HISTORY RH
				JOIN RECHARGE_HISTORY_BALANCE RHB
				ON RH.RECHARGE_ID = RHB.RECHARGE_ID AND RH.RECHARGE_ID2 = RHB.RECHARGE_ID2
				LEFT JOIN (
					SELECT DISTINCT 
						SUBSCR_NO, EXTERNAL_ID
					FROM EXTERNAL_ID_EQUIP_MAP
					WHERE DATE(EFFECTIVE_DT)-1 <= date(current_date) AND DATE(EXPIRY_DT)-1 > date(current_date)
					AND EXTERNAL_ID_TYPE = 1 AND IS_CURRENT = 1) EIEM
				ON RH.SUBSCR_NO = EIEM.SUBSCR_NO
			LEFT JOIN churn_records B ON RH.ACCOUNT_NO = B.ACCOUNTNUMBER
			WHERE DATE(RH.RECHARGE_DATE_TIME) >= ADD_MONTHS(current_date, -6)
			AND substring(nvl(RH.RECHARGE_COMMMENT,' '),1,8) != 'inswitch' AND nvl(RHB.AMOUNT,0) < 0
			AND substring(EIEM.EXTERNAL_ID,1,4) = '5926'
			AND RHB.BALANCE_ID = 89 AND RHB.PAYMENT_MODE = 1
			AND B.ACCOUNTNUMBER IS null
	),
	
   Mobile_revenue_RECORDS(ACCOUNT_NO,EXTERNAL_ID,CALLS,MINUTES,SMS,data_bytes,REVENUE,TAX, CHARGED_CORE, PROMO,FREE_MINUTES  ) AS 
   
   ( 
   		SELECT
			--TO_CHAR(Detail.TRANS_DT,'YYYY-MM') AS MONTH_ID,
			Detail.ACCOUNT_NO ,
			Detail.EXTERNAL_ID,
			COUNT(1) AS CALLS,
			--COUNT(DISTINCT Detail.EXTERNAL_ID) AS SUBS,
			SUM(CASE WHEN Detail.APPLICATION_ID = 1 THEN Detail.PRIMARY_UNITS/60 ELSE 0 END) AS MINUTES,
			SUM(CASE WHEN Detail.APPLICATION_ID = 2 THEN Detail.PRIMARY_UNITS ELSE 0 END) AS SMS,
			SUM(CASE WHEN Detail.APPLICATION_ID in (7,10,13) THEN Detail.PRIMARY_UNITS ELSE 0 END) AS data_bytes,
			SUM(CASE WHEN Detail.BALANCE_ID = 89 THEN (Detail.CHARGED_AMOUNT_PREPAID - Detail.TOTAL_TAX_PREPAID) ELSE 0 END) / 100 AS REVENUE,
			SUM(CASE WHEN Detail.BALANCE_ID = 89 THEN Detail.TOTAL_TAX_PREPAID ELSE 0 END) / 100 AS TAX,
			SUM(CASE WHEN Detail.BALANCE_ID = 89 THEN Detail.CHARGED_AMOUNT_PREPAID ELSE 0 END) / 100 AS CHARGED_CORE,
			SUM(CASE WHEN Detail.BALANCE_ID != 89 AND Detail.UNIT_TYPE = 1 THEN Detail.CHARGED_AMOUNT_PREPAID ELSE 0 END) / 100 AS PROMO,
			SUM(CASE WHEN Detail.BALANCE_ID != 89 AND Detail.UNIT_TYPE = 2 THEN Detail.PRIMARY_UNITS ELSE 0 END) / 60 AS FREE_MINUTES
		FROM
			(SELECT 
				CASE WHEN CD.APPLICATION_ID = 2 AND AGM.AUT_GROUP_ID = 38 AND CD.REFUND_FLAG = 'Y' THEN 'SMS: Refund'
					WHEN CD.APPLICATION_ID = 1 AND AGM.AUT_GROUP_ID = 40 THEN 'Voice: Roaming'
					WHEN CD.APPLICATION_ID = 1 AND upper(AV.DISPLAY_VALUE) LIKE '%VOICEMAIL' THEN 'Voice: Voicemail'
					WHEN CD.APPLICATION_ID = 1 AND CD.EXTERNAL_ID != CD.POINT_ORIGIN AND CD.EXTERNAL_ID != CD.POINT_TARGET THEN 'Voice: NetworkCall'
					WHEN CD.APPLICATION_ID = 1 AND AGM.AUT_GROUP_ID = 21 THEN 'Voice: OffNet Digicel'
					WHEN CD.APPLICATION_ID = 1 AND AGM.AUT_GROUP_ID IN (20) THEN 'Voice: OnNet GTT Cell'
					WHEN CD.APPLICATION_ID = 1 AND AGM.AUT_GROUP_ID IN (22,28) THEN 'Voice: OffNet GTT Land'
					WHEN CD.APPLICATION_ID = 1 AND AGM.AUT_GROUP_ID IN (43,54) THEN 'Voice: F&F or CUG'
					WHEN CD.APPLICATION_ID = 1 AND AGM.AUT_GROUP_ID = 53 THEN 'Voice: GPON'
					WHEN CD.APPLICATION_ID = 1 AND AGM.AUT_GROUP_ID = 18 THEN 'Voice: International'
					WHEN CD.APPLICATION_ID = 2 AND AGM.AUT_GROUP_ID = 24 THEN 'SMS: OnNet'
					WHEN CD.APPLICATION_ID = 2 AND AGM.AUT_GROUP_ID = 38 AND AV.DISPLAY_VALUE = 'SMS_OffNet' THEN 'SMS: OffNet Digicel'
					WHEN CD.APPLICATION_ID = 2 AND AGM.AUT_GROUP_ID = 38 AND AV.DISPLAY_VALUE LIKE 'SMS_Int%' THEN 'SMS: International' 
					WHEN CD.APPLICATION_ID = 2 AND AGM.AUT_GROUP_ID = 42 THEN 'SMS: Roaming' 
					WHEN CD.APPLICATION_ID = 2 AND AGM.AUT_GROUP_ID = 38 AND (upper(AV.DISPLAY_VALUE) LIKE '%SMPP%' OR upper(AV.DISPLAY_VALUE) LIKE '%IM2GO%' OR upper(AV.DISPLAY_VALUE) LIKE '%SMS%') AND CD.POINT_ORIGIN != '6209673' THEN 'SMS: SMPP Text'
					WHEN CD.APPLICATION_ID = 2 AND AGM.AUT_GROUP_ID = 38 AND upper(AV.DISPLAY_VALUE) LIKE '%SMPP%' AND CD.POINT_ORIGIN = '6209673' THEN 'SMS: Scripture' 
					ELSE 'Unknown' END AS DESCRIPTION,
				AGM.AUT_GROUP_ID,
				CASE WHEN CD.BALANCE_ID = 89 THEN 'Core' 
					WHEN CD.BALANCE_ID != 89 AND BF.UNIT_TYPE = 1 THEN 'Promo' 
					WHEN CD.BALANCE_ID != 89 AND BF.UNIT_TYPE = 2 THEN 'Free Seconds' 
					WHEN CD.BALANCE_ID != 89 AND BF.UNIT_TYPE = 3 THEN 'Octet' 
					WHEN CD.BALANCE_ID != 89 AND BF.UNIT_TYPE = 4 THEN 'SMS' 
					WHEN CD.BALANCE_ID != 89 AND BF.UNIT_TYPE = 5 THEN 'MMS' 
					WHEN CD.BALANCE_ID != 89 AND BF.UNIT_TYPE = 5001 THEN 'Quantity' 
					ELSE 'Unknown' END AS BALANCE_TYPE,
				'C' AS TABLE_ID,
				CD.TRANS_DT,
				1 AS CALL_COUNT,
				CD.ACCOUNT_NO ,
				CD.EXTERNAL_ID,
				CD.POINT_ORIGIN,
				CD.POINT_TARGET,
				CD.REFUND_FLAG,
				CD.BALANCE_ID,
				BF.UNIT_TYPE,
				CD.AUT_ID,
				CD.APPLICATION_ID,
				AV.DISPLAY_VALUE,
				CASE WHEN CD.APPLICATION_ID = 1 THEN CD.PRIMARY_UNITS ELSE 0 END AS PRIMARY_UNITS,
				NVL(AMOUNT_PREPAID,0) AS AMOUNT_PREPAID,
				NVL(TOTAL_TAX_PREPAID,0) AS TOTAL_TAX_PREPAID,
				NVL(TOTAL_DISCOUNT_AMT_PREPAID,0) AS TOTAL_DISCOUNT_AMT_PREPAID,
				NVL(CD.CHARGED_AMOUNT_PREPAID,0) AS CHARGED_AMOUNT_PREPAID,
				CD.CELL_ID
			FROM CDR_DATA CD
				JOIN AUT_FINAL_VALUES AV
				ON CD.AUT_ID = AV.AUT_ID 
				AND AV.RESELLER_VERSION_ID = (SELECT MAX(RESELLER_VERSION_ID) FROM AUT_FINAL_VALUES)
				JOIN AUT_GROUP_MAP AGM
				ON CD.AUT_ID = AGM.AUT_ID 
				AND AGM.RESELLER_VERSION_ID = (SELECT MAX(RESELLER_VERSION_ID) FROM AUT_GROUP_MAP)
				JOIN BALANCE_REF BF
				ON CD.BALANCE_ID = BF.BALANCE_ID 
				AND BF.RESELLER_VERSION_ID = (SELECT MAX(RESELLER_VERSION_ID) FROM BALANCE_REF)
			WHERE CD.APPLICATION_ID IN (1,2) AND CD.PRIMARY_UNITS > 0 AND CD.PAYMENT_MODE = 1 --AND NVL(CD.CHARGED_AMOUNT_PREPAID,0) != 0 
			AND CD.EXTERNAL_ID_TYPE = 1
			AND DATE(trans_dt) >= ADD_MONTHS(current_date, -12)
			UNION ALL
			SELECT 
				CASE WHEN C2.APPLICATION_ID = 2 AND AGM.AUT_GROUP_ID = 38 AND C2.REFUND_FLAG = 'Y' THEN 'SMS: Refund'
					WHEN C2.APPLICATION_ID = 1 AND AGM.AUT_GROUP_ID = 40 THEN 'Voice: Roaming'
					WHEN C2.APPLICATION_ID = 1 AND upper(AV.DISPLAY_VALUE) LIKE '%VOICEMAIL' THEN 'Voice: Voicemail'
					WHEN C2.APPLICATION_ID = 1 AND C2.EXTERNAL_ID != C2.POINT_ORIGIN AND C2.EXTERNAL_ID != C2.POINT_TARGET THEN 'Voice: NetworkCall'
					WHEN C2.APPLICATION_ID = 1 AND AGM.AUT_GROUP_ID = 21 THEN 'Voice: OffNet Digicel'
					WHEN C2.APPLICATION_ID = 1 AND AGM.AUT_GROUP_ID IN (20) THEN 'Voice: OnNet GTT Cell'
					WHEN C2.APPLICATION_ID = 1 AND AGM.AUT_GROUP_ID IN (22,28) THEN 'Voice: OffNet GTT Land'
					WHEN C2.APPLICATION_ID = 1 AND AGM.AUT_GROUP_ID IN (43,54) THEN 'Voice: F&F or CUG'
					WHEN C2.APPLICATION_ID = 1 AND AGM.AUT_GROUP_ID = 53 THEN 'Voice: GPON'
					WHEN C2.APPLICATION_ID = 1 AND AGM.AUT_GROUP_ID = 18 THEN 'Voice: International'
					WHEN C2.APPLICATION_ID = 2 AND AGM.AUT_GROUP_ID = 24 THEN 'SMS: OnNet'
					WHEN C2.APPLICATION_ID = 2 AND AGM.AUT_GROUP_ID = 38 AND AV.DISPLAY_VALUE = 'SMS_OffNet' THEN 'SMS: OffNet Digicel'
					WHEN C2.APPLICATION_ID = 2 AND AGM.AUT_GROUP_ID = 38 AND AV.DISPLAY_VALUE LIKE 'SMS_Int%' THEN 'SMS: International' 
					WHEN C2.APPLICATION_ID = 2 AND AGM.AUT_GROUP_ID = 42 THEN 'SMS: Roaming' 
					WHEN C2.APPLICATION_ID = 2 AND AGM.AUT_GROUP_ID = 38 AND (upper(AV.DISPLAY_VALUE) LIKE '%SMPP%' OR upper(AV.DISPLAY_VALUE) LIKE '%IM2GO%' OR upper(AV.DISPLAY_VALUE) LIKE '%SMS%') AND C2.POINT_ORIGIN != '6209673' THEN 'SMS: SMPP Text'
					WHEN C2.APPLICATION_ID = 2 AND AGM.AUT_GROUP_ID = 38 AND upper(AV.DISPLAY_VALUE) LIKE '%SMPP%' AND C2.POINT_ORIGIN = '6209673' THEN 'SMS: Scripture' 
					ELSE 'Unknown' END AS DESCRIPTION,
				AGM.AUT_GROUP_ID,
				CASE WHEN CB.BALANCE_ID = 89 THEN 'Core' 
					WHEN CB.BALANCE_ID != 89 AND CB.UNIT_TYPE = 1 THEN 'Promo' 
					WHEN CB.BALANCE_ID != 89 AND CB.UNIT_TYPE = 2 THEN 'Free Seconds' 
					WHEN CB.BALANCE_ID != 89 AND CB.UNIT_TYPE = 3 THEN 'Octet' 
					WHEN CB.BALANCE_ID != 89 AND CB.UNIT_TYPE = 4 THEN 'SMS' 
					WHEN CB.BALANCE_ID != 89 AND CB.UNIT_TYPE = 5 THEN 'MMS' 
					WHEN CB.BALANCE_ID != 89 AND CB.UNIT_TYPE = 5001 THEN 'Quantity' 
					ELSE 'Unknown' END AS BALANCE_TYPE,
				'B' AS TABLE_ID,
				C2.TRANS_DT,
				CASE WHEN CB.BALANCE_COUNTER = 1 THEN 1 ELSE 0 END AS CALL_COUNT,
				C2.ACCOUNT_NO ,
				C2.EXTERNAL_ID,
				C2.POINT_ORIGIN,
				C2.POINT_TARGET,
				C2.REFUND_FLAG,
				CB.BALANCE_ID,
				CB.UNIT_TYPE,
				C2.AUT_ID,
				C2.APPLICATION_ID,
				AV.DISPLAY_VALUE,
				(CB.BALANCE_AMOUNT / CASE WHEN CB.UNIT_TYPE = 1 THEN 30.16 ELSE 26.45 END) * 0.60 AS PRIMARY_UNITS,
				CASE WHEN NVL(C2.TOTAL_TAX_PREPAID,0) > 0 THEN (CASE WHEN C2.REFUND_FLAG != 'Y' THEN (CASE WHEN CB.UNIT_TYPE = 1 THEN CB.BALANCE_AMOUNT / 1.14 ELSE 0 END) ELSE (0 - CB.BALANCE_AMOUNT) / 1.14 END) ELSE (CASE WHEN C2.REFUND_FLAG != 'Y' THEN CB.BALANCE_AMOUNT ELSE 0 - CB.BALANCE_AMOUNT END) END AS AMOUNT_PREPAID,
				CASE WHEN nvl(C2.TOTAL_TAX_PREPAID,0) > 0 THEN (CASE WHEN CB.UNIT_TYPE = 1 THEN (CB.BALANCE_AMOUNT - (CB.BALANCE_AMOUNT / 1.14)) ELSE 0 END) ELSE 0 END AS TOTAL_TAX_PREPAID,
				0 AS TOTAL_DISCOUNT_AMT_PREPAID,
				CASE WHEN NVL(CB.BALANCE_AMOUNT,0) > 0 THEN (CASE WHEN C2.REFUND_FLAG != 'Y' THEN (CASE WHEN CB.UNIT_TYPE = 1 THEN CB.BALANCE_AMOUNT ELSE 0 END) ELSE 0 - CB.BALANCE_AMOUNT END) END AS CHARGED_AMOUNT_PREPAID,
				C2.CELL_ID
			FROM CDR_DATA C2
				JOIN CDR_BALANCE CB
				ON C2.MSG_ID = CB.MSG_ID AND C2.MSG_ID2 = CB.MSG_ID2
				JOIN AUT_FINAL_VALUES AV
				ON C2.AUT_ID = AV.AUT_ID 
				AND AV.RESELLER_VERSION_ID = (SELECT MAX(RESELLER_VERSION_ID) FROM AUT_FINAL_VALUES)
				JOIN AUT_GROUP_MAP AGM
				ON C2.AUT_ID = AGM.AUT_ID 
				AND AGM.RESELLER_VERSION_ID = (SELECT MAX(RESELLER_VERSION_ID) FROM AUT_GROUP_MAP)
			WHERE C2.APPLICATION_ID IN (1,2) AND C2.BALANCE_ID IS NULL AND CB.PAYMENT_MODE = 1
			AND C2.EXTERNAL_ID_TYPE = 1
			AND DATE(C2.TRANS_DT) >= ADD_MONTHS(current_date, -12)) Detail
			JOIN churn_records B ON Detail.ACCOUNT_NO = B.ACCOUNTNUMBER AND Detail.EXTERNAL_ID = B.BID
		WHERE DATE(Detail.TRANS_DT) >= ADD_MONTHS(B.DEACTIVED_DATE, -6)
		GROUP BY 1,2
		
		UNION 
		
		  		SELECT
			--TO_CHAR(Detail.TRANS_DT,'YYYY-MM') AS MONTH_ID,
			Detail.ACCOUNT_NO ,
			Detail.EXTERNAL_ID,
			COUNT(1) AS CALLS,
			--COUNT(DISTINCT Detail.EXTERNAL_ID) AS SUBS,
			SUM(CASE WHEN Detail.APPLICATION_ID = 1 THEN Detail.PRIMARY_UNITS/60 ELSE 0 END) AS MINUTES,
			SUM(CASE WHEN Detail.APPLICATION_ID = 2 THEN Detail.PRIMARY_UNITS ELSE 0 END) AS SMS,
			SUM(CASE WHEN Detail.APPLICATION_ID in (7,10,13) THEN Detail.PRIMARY_UNITS ELSE 0 END) AS data_bytes,
			SUM(CASE WHEN Detail.BALANCE_ID = 89 THEN (Detail.CHARGED_AMOUNT_PREPAID - Detail.TOTAL_TAX_PREPAID) ELSE 0 END) / 100 AS REVENUE,
			SUM(CASE WHEN Detail.BALANCE_ID = 89 THEN Detail.TOTAL_TAX_PREPAID ELSE 0 END) / 100 AS TAX,
			SUM(CASE WHEN Detail.BALANCE_ID = 89 THEN Detail.CHARGED_AMOUNT_PREPAID ELSE 0 END) / 100 AS CHARGED_CORE,
			SUM(CASE WHEN Detail.BALANCE_ID != 89 AND Detail.UNIT_TYPE = 1 THEN Detail.CHARGED_AMOUNT_PREPAID ELSE 0 END) / 100 AS PROMO,
			SUM(CASE WHEN Detail.BALANCE_ID != 89 AND Detail.UNIT_TYPE = 2 THEN Detail.PRIMARY_UNITS ELSE 0 END) / 60 AS FREE_MINUTES
		FROM
			(SELECT 
				CASE WHEN CD.APPLICATION_ID = 2 AND AGM.AUT_GROUP_ID = 38 AND CD.REFUND_FLAG = 'Y' THEN 'SMS: Refund'
					WHEN CD.APPLICATION_ID = 1 AND AGM.AUT_GROUP_ID = 40 THEN 'Voice: Roaming'
					WHEN CD.APPLICATION_ID = 1 AND upper(AV.DISPLAY_VALUE) LIKE '%VOICEMAIL' THEN 'Voice: Voicemail'
					WHEN CD.APPLICATION_ID = 1 AND CD.EXTERNAL_ID != CD.POINT_ORIGIN AND CD.EXTERNAL_ID != CD.POINT_TARGET THEN 'Voice: NetworkCall'
					WHEN CD.APPLICATION_ID = 1 AND AGM.AUT_GROUP_ID = 21 THEN 'Voice: OffNet Digicel'
					WHEN CD.APPLICATION_ID = 1 AND AGM.AUT_GROUP_ID IN (20) THEN 'Voice: OnNet GTT Cell'
					WHEN CD.APPLICATION_ID = 1 AND AGM.AUT_GROUP_ID IN (22,28) THEN 'Voice: OffNet GTT Land'
					WHEN CD.APPLICATION_ID = 1 AND AGM.AUT_GROUP_ID IN (43,54) THEN 'Voice: F&F or CUG'
					WHEN CD.APPLICATION_ID = 1 AND AGM.AUT_GROUP_ID = 53 THEN 'Voice: GPON'
					WHEN CD.APPLICATION_ID = 1 AND AGM.AUT_GROUP_ID = 18 THEN 'Voice: International'
					WHEN CD.APPLICATION_ID = 2 AND AGM.AUT_GROUP_ID = 24 THEN 'SMS: OnNet'
					WHEN CD.APPLICATION_ID = 2 AND AGM.AUT_GROUP_ID = 38 AND AV.DISPLAY_VALUE = 'SMS_OffNet' THEN 'SMS: OffNet Digicel'
					WHEN CD.APPLICATION_ID = 2 AND AGM.AUT_GROUP_ID = 38 AND AV.DISPLAY_VALUE LIKE 'SMS_Int%' THEN 'SMS: International' 
					WHEN CD.APPLICATION_ID = 2 AND AGM.AUT_GROUP_ID = 42 THEN 'SMS: Roaming' 
					WHEN CD.APPLICATION_ID = 2 AND AGM.AUT_GROUP_ID = 38 AND (upper(AV.DISPLAY_VALUE) LIKE '%SMPP%' OR upper(AV.DISPLAY_VALUE) LIKE '%IM2GO%' OR upper(AV.DISPLAY_VALUE) LIKE '%SMS%') AND CD.POINT_ORIGIN != '6209673' THEN 'SMS: SMPP Text'
					WHEN CD.APPLICATION_ID = 2 AND AGM.AUT_GROUP_ID = 38 AND upper(AV.DISPLAY_VALUE) LIKE '%SMPP%' AND CD.POINT_ORIGIN = '6209673' THEN 'SMS: Scripture' 
					ELSE 'Unknown' END AS DESCRIPTION,
				AGM.AUT_GROUP_ID,
				CASE WHEN CD.BALANCE_ID = 89 THEN 'Core' 
					WHEN CD.BALANCE_ID != 89 AND BF.UNIT_TYPE = 1 THEN 'Promo' 
					WHEN CD.BALANCE_ID != 89 AND BF.UNIT_TYPE = 2 THEN 'Free Seconds' 
					WHEN CD.BALANCE_ID != 89 AND BF.UNIT_TYPE = 3 THEN 'Octet' 
					WHEN CD.BALANCE_ID != 89 AND BF.UNIT_TYPE = 4 THEN 'SMS' 
					WHEN CD.BALANCE_ID != 89 AND BF.UNIT_TYPE = 5 THEN 'MMS' 
					WHEN CD.BALANCE_ID != 89 AND BF.UNIT_TYPE = 5001 THEN 'Quantity' 
					ELSE 'Unknown' END AS BALANCE_TYPE,
				'C' AS TABLE_ID,
				CD.TRANS_DT,
				1 AS CALL_COUNT,
				CD.ACCOUNT_NO ,
				CD.EXTERNAL_ID,
				CD.POINT_ORIGIN,
				CD.POINT_TARGET,
				CD.REFUND_FLAG,
				CD.BALANCE_ID,
				BF.UNIT_TYPE,
				CD.AUT_ID,
				CD.APPLICATION_ID,
				AV.DISPLAY_VALUE,
				CASE WHEN CD.APPLICATION_ID = 1 THEN CD.PRIMARY_UNITS ELSE 0 END AS PRIMARY_UNITS,
				NVL(AMOUNT_PREPAID,0) AS AMOUNT_PREPAID,
				NVL(TOTAL_TAX_PREPAID,0) AS TOTAL_TAX_PREPAID,
				NVL(TOTAL_DISCOUNT_AMT_PREPAID,0) AS TOTAL_DISCOUNT_AMT_PREPAID,
				NVL(CD.CHARGED_AMOUNT_PREPAID,0) AS CHARGED_AMOUNT_PREPAID,
				CD.CELL_ID
			FROM CDR_DATA CD
				JOIN AUT_FINAL_VALUES AV
				ON CD.AUT_ID = AV.AUT_ID 
				AND AV.RESELLER_VERSION_ID = (SELECT MAX(RESELLER_VERSION_ID) FROM AUT_FINAL_VALUES)
				JOIN AUT_GROUP_MAP AGM
				ON CD.AUT_ID = AGM.AUT_ID 
				AND AGM.RESELLER_VERSION_ID = (SELECT MAX(RESELLER_VERSION_ID) FROM AUT_GROUP_MAP)
				JOIN BALANCE_REF BF
				ON CD.BALANCE_ID = BF.BALANCE_ID 
				AND BF.RESELLER_VERSION_ID = (SELECT MAX(RESELLER_VERSION_ID) FROM BALANCE_REF)
			WHERE CD.APPLICATION_ID IN (1,2) AND CD.PRIMARY_UNITS > 0 AND CD.PAYMENT_MODE = 1 --AND NVL(CD.CHARGED_AMOUNT_PREPAID,0) != 0 
			AND CD.EXTERNAL_ID_TYPE = 1
			AND DATE(trans_dt) >= ADD_MONTHS(current_date, -12)
			UNION ALL
			SELECT 
				CASE WHEN C2.APPLICATION_ID = 2 AND AGM.AUT_GROUP_ID = 38 AND C2.REFUND_FLAG = 'Y' THEN 'SMS: Refund'
					WHEN C2.APPLICATION_ID = 1 AND AGM.AUT_GROUP_ID = 40 THEN 'Voice: Roaming'
					WHEN C2.APPLICATION_ID = 1 AND upper(AV.DISPLAY_VALUE) LIKE '%VOICEMAIL' THEN 'Voice: Voicemail'
					WHEN C2.APPLICATION_ID = 1 AND C2.EXTERNAL_ID != C2.POINT_ORIGIN AND C2.EXTERNAL_ID != C2.POINT_TARGET THEN 'Voice: NetworkCall'
					WHEN C2.APPLICATION_ID = 1 AND AGM.AUT_GROUP_ID = 21 THEN 'Voice: OffNet Digicel'
					WHEN C2.APPLICATION_ID = 1 AND AGM.AUT_GROUP_ID IN (20) THEN 'Voice: OnNet GTT Cell'
					WHEN C2.APPLICATION_ID = 1 AND AGM.AUT_GROUP_ID IN (22,28) THEN 'Voice: OffNet GTT Land'
					WHEN C2.APPLICATION_ID = 1 AND AGM.AUT_GROUP_ID IN (43,54) THEN 'Voice: F&F or CUG'
					WHEN C2.APPLICATION_ID = 1 AND AGM.AUT_GROUP_ID = 53 THEN 'Voice: GPON'
					WHEN C2.APPLICATION_ID = 1 AND AGM.AUT_GROUP_ID = 18 THEN 'Voice: International'
					WHEN C2.APPLICATION_ID = 2 AND AGM.AUT_GROUP_ID = 24 THEN 'SMS: OnNet'
					WHEN C2.APPLICATION_ID = 2 AND AGM.AUT_GROUP_ID = 38 AND AV.DISPLAY_VALUE = 'SMS_OffNet' THEN 'SMS: OffNet Digicel'
					WHEN C2.APPLICATION_ID = 2 AND AGM.AUT_GROUP_ID = 38 AND AV.DISPLAY_VALUE LIKE 'SMS_Int%' THEN 'SMS: International' 
					WHEN C2.APPLICATION_ID = 2 AND AGM.AUT_GROUP_ID = 42 THEN 'SMS: Roaming' 
					WHEN C2.APPLICATION_ID = 2 AND AGM.AUT_GROUP_ID = 38 AND (upper(AV.DISPLAY_VALUE) LIKE '%SMPP%' OR upper(AV.DISPLAY_VALUE) LIKE '%IM2GO%' OR upper(AV.DISPLAY_VALUE) LIKE '%SMS%') AND C2.POINT_ORIGIN != '6209673' THEN 'SMS: SMPP Text'
					WHEN C2.APPLICATION_ID = 2 AND AGM.AUT_GROUP_ID = 38 AND upper(AV.DISPLAY_VALUE) LIKE '%SMPP%' AND C2.POINT_ORIGIN = '6209673' THEN 'SMS: Scripture' 
					ELSE 'Unknown' END AS DESCRIPTION,
				AGM.AUT_GROUP_ID,
				CASE WHEN CB.BALANCE_ID = 89 THEN 'Core' 
					WHEN CB.BALANCE_ID != 89 AND CB.UNIT_TYPE = 1 THEN 'Promo' 
					WHEN CB.BALANCE_ID != 89 AND CB.UNIT_TYPE = 2 THEN 'Free Seconds' 
					WHEN CB.BALANCE_ID != 89 AND CB.UNIT_TYPE = 3 THEN 'Octet' 
					WHEN CB.BALANCE_ID != 89 AND CB.UNIT_TYPE = 4 THEN 'SMS' 
					WHEN CB.BALANCE_ID != 89 AND CB.UNIT_TYPE = 5 THEN 'MMS' 
					WHEN CB.BALANCE_ID != 89 AND CB.UNIT_TYPE = 5001 THEN 'Quantity' 
					ELSE 'Unknown' END AS BALANCE_TYPE,
				'B' AS TABLE_ID,
				C2.TRANS_DT,
				CASE WHEN CB.BALANCE_COUNTER = 1 THEN 1 ELSE 0 END AS CALL_COUNT,
				C2.ACCOUNT_NO ,
				C2.EXTERNAL_ID,
				C2.POINT_ORIGIN,
				C2.POINT_TARGET,
				C2.REFUND_FLAG,
				CB.BALANCE_ID,
				CB.UNIT_TYPE,
				C2.AUT_ID,
				C2.APPLICATION_ID,
				AV.DISPLAY_VALUE,
				(CB.BALANCE_AMOUNT / CASE WHEN CB.UNIT_TYPE = 1 THEN 30.16 ELSE 26.45 END) * 0.60 AS PRIMARY_UNITS,
				CASE WHEN NVL(C2.TOTAL_TAX_PREPAID,0) > 0 THEN (CASE WHEN C2.REFUND_FLAG != 'Y' THEN (CASE WHEN CB.UNIT_TYPE = 1 THEN CB.BALANCE_AMOUNT / 1.14 ELSE 0 END) ELSE (0 - CB.BALANCE_AMOUNT) / 1.14 END) ELSE (CASE WHEN C2.REFUND_FLAG != 'Y' THEN CB.BALANCE_AMOUNT ELSE 0 - CB.BALANCE_AMOUNT END) END AS AMOUNT_PREPAID,
				CASE WHEN nvl(C2.TOTAL_TAX_PREPAID,0) > 0 THEN (CASE WHEN CB.UNIT_TYPE = 1 THEN (CB.BALANCE_AMOUNT - (CB.BALANCE_AMOUNT / 1.14)) ELSE 0 END) ELSE 0 END AS TOTAL_TAX_PREPAID,
				0 AS TOTAL_DISCOUNT_AMT_PREPAID,
				CASE WHEN NVL(CB.BALANCE_AMOUNT,0) > 0 THEN (CASE WHEN C2.REFUND_FLAG != 'Y' THEN (CASE WHEN CB.UNIT_TYPE = 1 THEN CB.BALANCE_AMOUNT ELSE 0 END) ELSE 0 - CB.BALANCE_AMOUNT END) END AS CHARGED_AMOUNT_PREPAID,
				C2.CELL_ID
			FROM CDR_DATA C2
				JOIN CDR_BALANCE CB
				ON C2.MSG_ID = CB.MSG_ID AND C2.MSG_ID2 = CB.MSG_ID2
				JOIN AUT_FINAL_VALUES AV
				ON C2.AUT_ID = AV.AUT_ID 
				AND AV.RESELLER_VERSION_ID = (SELECT MAX(RESELLER_VERSION_ID) FROM AUT_FINAL_VALUES)
				JOIN AUT_GROUP_MAP AGM
				ON C2.AUT_ID = AGM.AUT_ID 
				AND AGM.RESELLER_VERSION_ID = (SELECT MAX(RESELLER_VERSION_ID) FROM AUT_GROUP_MAP)
			WHERE C2.APPLICATION_ID IN (1,2) AND C2.BALANCE_ID IS NULL AND CB.PAYMENT_MODE = 1
			AND C2.EXTERNAL_ID_TYPE = 1
			AND DATE(C2.TRANS_DT) >= ADD_MONTHS(current_date, -12)) Detail
			LEFT JOIN churn_records B ON Detail.ACCOUNT_NO = B.ACCOUNTNUMBER AND Detail.EXTERNAL_ID = B.BID
		WHERE DATE(Detail.TRANS_DT) >= ADD_MONTHS(current_date, -6)
		AND B.ACCOUNTNUMBER IS NULL 
		AND B.BID IS NULL 
		GROUP BY 1,2
		
   
   
   ),
   
   TopUp_Method_RECORDS (ACCOUNT_NO,EXTERNAL_ID,RECHARGE_TYPE) AS 
			(
			SELECT
				DISTINCT 
				RH.ACCOUNT_NO,
				EIEM.EXTERNAL_ID,
				listagg( distinct  CASE WHEN RHB.AMOUNT < 0 AND RH.RECHARGE_USER IN ('cbs_owner','ussd') THEN 'CARD'
				WHEN RHB.AMOUNT < 0 AND RH.RECHARGE_USER = 'EMIDA' THEN 'EMIDA'
				WHEN RHB.AMOUNT < 0 AND RH.RECHARGE_USER = 'mmguser' THEN 'MMG'
				WHEN RHB.AMOUNT < 0 AND RH.RECHARGE_USER = 'mms' THEN 'MMS'
				ELSE 'OTHERS' END, ', ' )
			
		AS RECHARGE_TYPE
			FROM RECHARGE_HISTORY RH
				JOIN RECHARGE_HISTORY_BALANCE RHB
				ON RH.RECHARGE_ID = RHB.RECHARGE_ID AND RH.RECHARGE_ID2 = RHB.RECHARGE_ID2
				LEFT JOIN (
					SELECT DISTINCT 
						SUBSCR_NO, EXTERNAL_ID
					FROM EXTERNAL_ID_EQUIP_MAP
					WHERE DATE(EFFECTIVE_DT)-1 <= date(current_date) AND DATE(EXPIRY_DT)-1 > date(current_date)
					AND EXTERNAL_ID_TYPE = 1 AND IS_CURRENT = 1) EIEM
				ON RH.SUBSCR_NO = EIEM.SUBSCR_NO
			JOIN churn_records B ON RH.ACCOUNT_NO = B.ACCOUNTNUMBER
			WHERE DATE(RH.RECHARGE_DATE_TIME) >= ADD_MONTHS(B.DEACTIVED_DATE, -6)
			AND substring(nvl(RH.RECHARGE_COMMMENT,' '),1,8) != 'inswitch' AND nvl(RHB.AMOUNT,0) < 0
			AND substring(EIEM.EXTERNAL_ID,1,4) = '5926'
			AND RHB.BALANCE_ID = 89 AND RHB.PAYMENT_MODE = 1
			GROUP BY 1,2
			
			UNION 
			
			
				SELECT
				DISTINCT 
				RH.ACCOUNT_NO,
				EIEM.EXTERNAL_ID,
				listagg( distinct  CASE WHEN RHB.AMOUNT < 0 AND RH.RECHARGE_USER IN ('cbs_owner','ussd') THEN 'CARD'
				WHEN RHB.AMOUNT < 0 AND RH.RECHARGE_USER = 'EMIDA' THEN 'EMIDA'
				WHEN RHB.AMOUNT < 0 AND RH.RECHARGE_USER = 'mmguser' THEN 'MMG'
				WHEN RHB.AMOUNT < 0 AND RH.RECHARGE_USER = 'mms' THEN 'MMS'
				ELSE 'OTHERS' END, ', ' )
			
		AS RECHARGE_TYPE
			FROM RECHARGE_HISTORY RH
				JOIN RECHARGE_HISTORY_BALANCE RHB
				ON RH.RECHARGE_ID = RHB.RECHARGE_ID AND RH.RECHARGE_ID2 = RHB.RECHARGE_ID2
				LEFT JOIN (
					SELECT DISTINCT 
						SUBSCR_NO, EXTERNAL_ID
					FROM EXTERNAL_ID_EQUIP_MAP
					WHERE DATE(EFFECTIVE_DT)-1 <= date(current_date) AND DATE(EXPIRY_DT)-1 > date(current_date)
					AND EXTERNAL_ID_TYPE = 1 AND IS_CURRENT = 1) EIEM
				ON RH.SUBSCR_NO = EIEM.SUBSCR_NO
			LEFT JOIN churn_records B ON RH.ACCOUNT_NO = B.ACCOUNTNUMBER
			WHERE DATE(RH.RECHARGE_DATE_TIME) >= ADD_MONTHS(current_date, -6)
			AND substring(nvl(RH.RECHARGE_COMMMENT,' '),1,8) != 'inswitch' AND nvl(RHB.AMOUNT,0) < 0
			AND substring(EIEM.EXTERNAL_ID,1,4) = '5926'
			AND RHB.BALANCE_ID = 89 AND RHB.PAYMENT_MODE = 1
			AND B.ACCOUNTNUMBER IS NULL
			GROUP BY 1,2
	),
	
   
   call_centre_RECORDS(EXTERNAL_ID,ACCOUNT_NO,calls ) AS 
   	( 
   	
   		select 
			distinct
			   eip.EXTERNAL_ID,
			   eip.ACCOUNT_NO ,
			   count(1) calls 
			from 
			  ATNI_PROD.GTT_REPORTING.EXTERNAL_ID_EQUIP_MAP_EXTRACT eip 
			 
				JOIN ATNI_PROD.GTT_REPORTING.GENBAND_CDR g on eip.EXTERNAL_ID=g.ORIGINATING_NUMBER and date(eip.EXTRACT_FILE_DATE) = date(current_date)
			  JOIN churn_records B ON eip.ACCOUNT_NO = B.ACCOUNTNUMBER AND eip.EXTERNAL_ID = B.BID
			where 
				g.TERMINATING_NUMBER='9972279401' and
				DATE(g.CONNECT_DATETIME) >= ADD_MONTHS(B.DEACTIVED_DATE, -6)
			GROUP BY 1, 2
			
			UNION 
			
			select 
			distinct
			   eip.EXTERNAL_ID,
			   eip.ACCOUNT_NO ,
			   count(1) calls 
			from 
			  ATNI_PROD.GTT_REPORTING.EXTERNAL_ID_EQUIP_MAP_EXTRACT eip 
			 
				JOIN ATNI_PROD.GTT_REPORTING.GENBAND_CDR g on eip.EXTERNAL_ID=g.ORIGINATING_NUMBER and date(eip.EXTRACT_FILE_DATE) = date(current_date)
			 LEFT  JOIN churn_records B ON eip.ACCOUNT_NO = B.ACCOUNTNUMBER AND eip.EXTERNAL_ID = B.BID
			where 
				g.TERMINATING_NUMBER='9972279401' and
				DATE(g.CONNECT_DATETIME) >= ADD_MONTHS(current_date, -6)
				AND B.ACCOUNTNUMBER IS NULL 
				AND B.BID IS null
			GROUP BY 1, 2
   	),
   	Ticket_RECORDS(CONTACTPHONE, unresolved_tickets, ticket_duration_mins) AS 
   		( 
   		
   			SELECT 
				CONTACTPHONE
				,sum(unresolved_tickets) unresolved_tickets
				,sum(ticket_duration_mins) ticket_duration_mins
			FROM 
				(
					SELECT 
							
						  iff(LENGTH(regexp_replace(CONTACTPHONE,'\\(|\\)|-|\\s+','')) < 10, concat('592',regexp_replace(CONTACTPHONE,'\\(|\\)|-|\\s+','')),regexp_replace(CONTACTPHONE,'\\(|\\)|-|\\s+','')) CONTACTPHONE
						  , CASE WHEN CLOSEDDATE IS NULL AND ISCLOSED = 'false' THEN 1 END unresolved_tickets
						  ,timediff(minute, CREATEDDATE, iff(CLOSEDDATE IS NULL, current_date,CLOSEDDATE)) ticket_duration_mins
						  ,CREATEDDATE
						FROM 
							ATNI_PROD.SALESFORCE.CASE
						WHERE 
							CURRENCYISOCODE ='GYD'
							AND date(CREATEDDATE) >= ADD_MONTHS(current_date, -12)
							AND CONTACTPHONE IS NOT NULL 
				)X 
				JOIN churn_records B ON  X.CONTACTPHONE = B.BID
			
			WHERE date(CREATEDDATE) >= ADD_MONTHS(B.DEACTIVED_DATE, -6)
			GROUP BY 1
			
			UNION 
			
			SELECT 
				CONTACTPHONE
				,sum(unresolved_tickets) unresolved_tickets
				,sum(ticket_duration_mins) ticket_duration_mins
			FROM 
				(
					SELECT 
							
						  iff(LENGTH(regexp_replace(CONTACTPHONE,'\\(|\\)|-|\\s+','')) < 10, concat('592',regexp_replace(CONTACTPHONE,'\\(|\\)|-|\\s+','')),regexp_replace(CONTACTPHONE,'\\(|\\)|-|\\s+','')) CONTACTPHONE
						  , CASE WHEN CLOSEDDATE IS NULL AND ISCLOSED = 'false' THEN 1 END unresolved_tickets
						  ,timediff(minute, CREATEDDATE, iff(CLOSEDDATE IS NULL, current_date,CLOSEDDATE)) ticket_duration_mins
						  ,CREATEDDATE
						FROM 
							ATNI_PROD.SALESFORCE.CASE
						WHERE 
							CURRENCYISOCODE ='GYD'
							AND date(CREATEDDATE) >= ADD_MONTHS(current_date, -12)
							AND CONTACTPHONE IS NOT NULL 
				)X 
				LEFT JOIN churn_records B ON  X.CONTACTPHONE = B.BID
			
			WHERE date(CREATEDDATE) >= ADD_MONTHS(current_date, -6)
			AND B.BID IS null
			GROUP BY 1
			
			
   		)
	--

		SELECT 
		   DISTINCT 
			Sc.OPERATING_COMPANY_CODE
			,SC.OPERATING_COMPANY_NAME
			,Sc.ACCOUNTNUMBER
			,SC.BID
			,FIRSTNAME 
			,LASTNAME 
			,SC.CUSTOMER_TYPE_NAME
			,tenure_days
			,sp.days_suspended
			,ifnull(CR.churn,0) AsChurned
			,ifnull(CR.DEACTIVED_DATE, current_date) churn_date			
			,CE.Last_charge_event
			,RC.Last_recharge_date
			,RC.TopUp
			,MR.MINUTES
			,MR.SMS
			,MR.CHARGED_CORE totalcharges
			,CC.Calls Call_centre_calls
			,PP.PAYMENT_ITEM_CODE
			,PP.PRODUCT_NAME
			,PP.PRODUCT_COUNT
			,PP.PAYMENT_CHANNEL_NAME
			,pp.NUM_DAYS DAYS_PER_MONTH
			,TR.unresolved_tickets
			,TR.ticket_duration_mins
			,TUM.RECHARGE_TYPE
			,current_date AS update_time
	FROM Scorecard_RECORDS SC
	LEFT JOIN Suspended_RECORDS SP 
		ON SC.ACCOUNTNUMBER = SP.ACCOUNTNUMBER AND SC.BID = SP.BID

	LEFT JOIN Last_CHARGE_EVENT_RECORDS CE 
		ON SC.ACCOUNTNUMBER = CE.ACCOUNT_NO AND SC.BID = CE.EXTERNAL_ID
	LEFT JOIN Last_recharge_RECORDS RC 
		ON SC.ACCOUNTNUMBER = RC.ACCOUNT_NO AND SC.BID = RC.EXTERNAL_ID
	LEFT JOIN Purchased_plan_RECORDS PP 
		ON SC.ACCOUNTNUMBER = PP.PARENT_ACCOUNT_NO AND SC.BID = PP.BID
	LEFT JOIN churn_records CR
		ON SC.ACCOUNTNUMBER = CR.ACCOUNTNUMBER AND SC.BID = CR.BID
	LEFT JOIN Mobile_revenue_RECORDS MR 
		ON SC.ACCOUNTNUMBER = MR.ACCOUNT_NO AND SC.BID = MR.EXTERNAL_ID
	LEFT JOIN call_centre_RECORDS CC 
		ON SC.ACCOUNTNUMBER = CC.ACCOUNT_NO AND SC.BID = CC.EXTERNAL_ID
	LEFT JOIN Ticket_RECORDS TR
		ON SC.BID = TR.CONTACTPHONE
	LEFT JOIN TopUp_Method_RECORDS TUM 
		ON SC.ACCOUNTNUMBER = TUM.ACCOUNT_NO AND SC.BID = TUM.EXTERNAL_ID

	
	WHERE 
	SC.ENDING_ACTIVE = 1
	AND SC.REVENUE_COUNTABLE=1
	AND SC.REVENUE_COUNTABLE =1
	AND OFFICIALLY_COUNTED_SUBSCRIBER = 'yes'
	AND SC.DATESTART_MONTH_ENDING = DATEADD('DAY',-1,DATEADD('MONTH',1,DATE_TRUNC('MONTH',current_date)))