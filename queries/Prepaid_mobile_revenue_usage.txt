SELECT
TF.YEAR_MONTH,
TF.MDATE,
SUB.BID,
SUB.SUBSCR_NO,
SUB.CURRENT_STATUS,
SUB.DATE_ENTER_ACTIVE,
--SUB.DATE_SOLD,
NVL(USG.TOTAL_MOU_REV_GYD,0) AS TOTAL_MOU_REV_GYD,
NVL(USG.INTL_MOU_REV_GYD,0) AS INTL_MOU_REV_GYD,
NVL(USG.OFFNET_MOU_REV_GYD,0) AS OFFNET_MOU_REV_GYD,
NVL(USG.ROAMING_MOU_REV_GYD,0) AS ROAMING_MOU_REV_GYD,
NVL(USG.ONNET_MOU_REV_GYD,0) AS ONNET_MOU_REV_GYD,
NVL(USG.TOTAL_SMS_REV_GYD,0) AS TOTAL_SMS_REV_GYD,
NVL(USG.ONNET_SMS_REV_GYD,0) AS ONNET_SMS_REV_GYD,
NVL(USG.ROAMING_SMS_REV_GYD,0) AS ROAMING_SMS_REV_GYD,
NVL(USG.OFFNET_SMS_REV_GYD,0) AS OFFNET_SMS_REV_GYD,
NVL(USG.INTL_SMS_REV_GYD,0) AS INTL_SMS_REV_GYD,
NVL(USG.PREMIUM_SMS_REV_GYD,0) AS PREMIUM_SMS_REV_GYD,
NVL(USG.TOTAL_DATA_USAGE_MB,0) AS TOTAL_DATA_USAGE_MB,
NVL(USG.TOTAL_VOICE_MINS,0) AS TOTAL_VOICE_MINS,
NVL(RCG.RECHARGE_AMT,0) AS RECHARGE_AMT,
NVL(SPR.PREPAID_SUBSCRIPTION_REV_GYD,0) AS PREPAID_SUBSCRIPTION_REV_GYD,
(NVL(USG.TOTAL_MOU_REV_GYD,0) + NVL(USG.TOTAL_SMS_REV_GYD,0) + NVL(SPR.PREPAID_SUBSCRIPTION_REV_GYD,0)) AS TOTAL_REVENUE_SPEND
FROM(
		SELECT 
		DISTINCT
		B.SUBSCR_NO,
		A.BID,
		B.DATEIN AS DATE_ENTER_ACTIVE,
		CASE
	     WHEN B.STATUSCODE='A' THEN 'Active'
	     WHEN B.STATUSCODE='S' THEN 'Suspended'
	     WHEN B.STATUSCODE='P' THEN 'Pending'
	     WHEN B.STATUSCODE='I' THEN 'Inactive'
	     WHEN B.STATUSCODE='D' THEN 'Deactivated'
        END CURRENT_STATUS
		FROM
		(
			
			  SELECT
			   DISTINCT 
			
			    A.BID
			FROM          
			          
			    SC_INPUT.ODSSUBSCRIBERSNAPSHOT A
			    INNER JOIN SC_OUTPUT.DIMPRODUCT B ON
			                                            A.RATEPLANCODE::STRING = B.PRODUCTCODE
			                                            AND B.LEAFLEVELNAME = 'Mobile Prepaid Combo'
			                                            AND B.SOURCESYSTEMID = 1
			                                            AND B.REVENUECOUNTABLE = 1
			    INNER JOIN GTT_REPORTING.GTT_SAA_SUBSCRIBER_FEED_DETAIL  C ON  ---GET SUBSCR_NO
			                                                               A.ACCOUNTNUMBER=C.ACCOUNTNUMBER AND A.BID=C.BID 
			                                                               AND C.DATESTART = current_Date()-1
			    WHERE
			    A.SOURCESYSTEMID = 1
			    AND A.DATESTART = current_Date()-1
			    --AND date(D.created_date) = current_Date()
			    AND A.STATUSCODE NOT IN('D','P')
			    AND A.CUSTOMERTYPE NOT IN(12, 8)
		) A ---TRUNCATE AND ADD NEW LIST
		LEFT JOIN
		(
					SELECT 
					ACCOUNTNUMBER,SUBSCR_NO, BID, DATEIN, STATUSCODE 
					FROM
					GTT_REPORTING.GTT_SAA_SUBSCRIBER_FEED_DETAIL
					WHERE
					DATESTART='2021-06-17'
					AND (BID, DATEIN) IN(
							SELECT 
							BID,MAX(DATEIN) AS DATEIN
							FROM 
							GTT_REPORTING.GTT_SAA_SUBSCRIBER_FEED_DETAIL
							WHERE
							DATESTART='2021-06-17'
							AND SYSTEMID=4
							GROUP BY BID
					  ) 
	       ) AS B ON A.BID=B.BID
) AS SUB
CROSS JOIN(
--THIS CODE WILL ENSURE THERE IS A RECORD FOR EVERY DATE FOR SUBSCRIBER DESPITE NO USAGE FOR A PARTICULAR MONTH
SELECT
TO_CHAR(the_date,'YYYY-MM') as YEAR_MONTH,
MAX(the_date) AS MDATE
FROM(
SELECT '1900-01-01'::DATE + ((mult.idx * 1024) + base.idx) as the_date

FROM ATNI_PROD.staging._v_vector_idx base,

(SELECT idx FROM ATNI_PROD.staging._v_vector_idx) mult

WHERE the_date BETWEEN '2020-01-01' AND CURRENT_DATE-1 )AS T
GROUP BY 1
) AS TF 
LEFT JOIN
( 
  SELECT
  USAGE_MONTH,
  SUBSCR_NO,
  SUM(TOTAL_MOU_REV_GYD) AS  TOTAL_MOU_REV_GYD,
  SUM(INTL_MOU_REV_GYD) AS INTL_MOU_REV_GYD,
  SUM(OFFNET_MOU_REV_GYD) AS OFFNET_MOU_REV_GYD,
  SUM(ROAMING_MOU_REV_GYD) AS ROAMING_MOU_REV_GYD,
  SUM(ONNET_MOU_REV_GYD) AS ONNET_MOU_REV_GYD,
  SUM(TOTAL_SMS_REV_GYD) AS  TOTAL_SMS_REV_GYD,
  SUM(ONNET_SMS_REV_GYD) AS  ONNET_SMS_REV_GYD,
  SUM(ROAMING_SMS_REV_GYD) AS ROAMING_SMS_REV_GYD,
  SUM(OFFNET_SMS_REV_GYD) AS OFFNET_SMS_REV_GYD,
  SUM(INTL_SMS_REV_GYD) AS INTL_SMS_REV_GYD,
  SUM(PREMIUM_SMS_REV_GYD) AS PREMIUM_SMS_REV_GYD,
  SUM(TOTAL_DATA_USAGE_MB) AS TOTAL_DATA_USAGE_MB,
  round(SUM(TOTAL_VOICE_MINS)) AS TOTAL_VOICE_MINS
  FROM(
  -------------------------------------------------------------USAGE REVENUE SPEND----------------------------------------------------------------------------
		   SELECT
		   TO_CHAR(C.TRANS_DT,'YYYY-MM') AS USAGE_MONTH,
		   SUBSCR_NO,
		   ------------------------------------------------------------VOICE REVENUE-----------------------------------------------------------------------------------
		 
		  CASE WHEN C.APPLICATION_ID=1 AND  NVL(BALANCE_ID,0)=89 THEN NVL(C.CHARGED_AMOUNT,0)/100 - NVL(C.TOTAL_TAX,0)/100 ELSE 0 END  AS TOTAL_MOU_REV_GYD, 
		  
		  CASE
		       WHEN C.APPLICATION_ID=1  AND NVL(BALANCE_ID,0)=89 AND G.AUT_GROUP_ID IN(16,47,18) THEN NVL(C.CHARGED_AMOUNT,0)/100 - NVL(C.TOTAL_TAX,0)/100 
		       ELSE
		         0
		   END AS INTL_MOU_REV_GYD,
		
		   
		  CASE
		       WHEN C.APPLICATION_ID=1  AND NVL(BALANCE_ID,0)=89 AND G.AUT_GROUP_ID IN(25,49,21) THEN NVL(C.CHARGED_AMOUNT,0)/100 - NVL(C.TOTAL_TAX,0)/100
		       ELSE
		         0
		      END AS OFFNET_MOU_REV_GYD,
		  
		  CASE
		       WHEN C.APPLICATION_ID=1  AND NVL(BALANCE_ID,0)=89  AND G.AUT_GROUP_ID=40 THEN NVL(C.CHARGED_AMOUNT,0)/100 - NVL(C.TOTAL_TAX,0)/100
		       ELSE
		        0
		       END AS ROAMING_MOU_REV_GYD,
		
		  CASE
		       WHEN C.APPLICATION_ID=1  AND NVL(BALANCE_ID,0)=89 AND G.AUT_GROUP_ID NOT IN(16,47,18,40,42,25,49,21,38) THEN NVL(C.CHARGED_AMOUNT,0)/100 - NVL(C.TOTAL_TAX,0)/100
		       ELSE
		        0
		     END AS ONNET_MOU_REV_GYD,
		   ------------------------------------------------------------------------SMS REVENUE---------------------------------------------------------------------
		   
		   CASE WHEN C.APPLICATION_ID=2 AND NVL(BALANCE_ID,0)=89  THEN NVL(C.CHARGED_AMOUNT,0)/100 - NVL(C.TOTAL_TAX,0)/100 ELSE 0 END AS TOTAL_SMS_REV_GYD,
				
		   CASE
				    WHEN C.APPLICATION_ID=2 AND NVL(BALANCE_ID,0)=89 AND G.AUT_GROUP_ID=24  THEN NVL(C.CHARGED_AMOUNT,0)/100 - NVL(C.TOTAL_TAX,0)/100
				    ELSE
				       0
				END AS ONNET_SMS_REV_GYD,
				
			CASE
				    WHEN C.APPLICATION_ID=2 AND NVL(BALANCE_ID,0)=89 AND G.AUT_GROUP_ID=42  THEN NVL(C.CHARGED_AMOUNT,0)/100 - NVL(C.TOTAL_TAX,0)/100
				    ELSE
				       0
				   END AS ROAMING_SMS_REV_GYD,
				   
			CASE
				   WHEN C.APPLICATION_ID=2 AND NVL(BALANCE_ID,0)=89 AND G.AUT_GROUP_ID=38  AND  UPPER(F.DISPLAY_VALUE) LIKE '%OFFNET%' THEN NVL(CHARGED_AMOUNT,0)/100 - NVL(TOTAL_TAX,0)/100
				    ELSE
				      0
				END AS OFFNET_SMS_REV_GYD,
		    CASE
				    WHEN C.APPLICATION_ID=2 AND NVL(BALANCE_ID,0)=89 AND G.AUT_GROUP_ID=38 AND UPPER(F.DISPLAY_VALUE) LIKE '%INT%' THEN NVL(CHARGED_AMOUNT,0)/100 - NVL(TOTAL_TAX,0)/100
				    ELSE
				       0
				   END AS INTL_SMS_REV_GYD,
			   		  
		        CASE
				    WHEN C.APPLICATION_ID=2 AND NVL(BALANCE_ID,0)=89 AND G.AUT_GROUP_ID=38 AND UPPER(F.DISPLAY_VALUE) LIKE '%GTT%' THEN NVL(CHARGED_AMOUNT,0)/100 - NVL(TOTAL_TAX,0)/100
				    ELSE
				       0
				   END AS PREMIUM_SMS_REV_GYD,
		     ----------------------------------------------------------------------DATA USAGE----------------------------------------------------------------------
		    CASE WHEN C.APPLICATION_ID IN(7,10) THEN NVL(C.RATED_UNITS,0)/ 1024 / 1024 ELSE 0 END  AS TOTAL_DATA_USAGE_MB,
		     ----------------------------------------------------------------------VOICE USAGE----------------------------------------------------------------------
		    CASE WHEN C.APPLICATION_ID IN(1) THEN NVL(C.PRIMARY_UNITS,0)/ 60 ELSE 0 END  AS TOTAL_VOICE_MINS
		   
		   FROM
		   GTT_REPORTING.CDR_DATA C
		     INNER JOIN 
		   GTT_REPORTING.AUT_GROUP_MAP G ON C.AUT_ID = G.AUT_ID AND G.RESELLER_VERSION_ID =(SELECT MAX(RESELLER_VERSION_ID) FROM GTT_REPORTING.AUT_GROUP_MAP)
		     INNER JOIN
		   GTT_REPORTING.AUT_FINAL_VALUES F ON C.AUT_ID=F.AUT_ID AND F.RESELLER_VERSION_ID =(SELECT MAX(RESELLER_VERSION_ID) FROM GTT_REPORTING.AUT_FINAL_VALUES)
		   WHERE
			DATE(C.TRANS_DT) BETWEEN '2021-01-01'::date AND '2021-06-30'::date
			AND C.APPLICATION_ID IN(1,2,7,10) --VOICE USAGE
		    AND NVL(PRIMARY_UNITS,0)>0
    )AS CDR
    GROUP BY 1,2
  ) AS USG ON SUB.SUBSCR_NO=USG.SUBSCR_NO AND TF.YEAR_MONTH=USG.USAGE_MONTH
  LEFT JOIN 
  (
    ------------------------------------------------------------------RECHARGES------------------------------------------------------------------
     SELECT
		     TO_CHAR(RH.RECHARGE_DATE_TIME,'YYYY-MM') AS R_YEAR_MONTH, 
		     SUBSCR_NO,
		    
		     SUM(
				     CASE
				     WHEN NVL(RH.RECHARGE_COMMMENT,'') NOT LIKE 'inswitch%' THEN ABS(NVL(RHB.AMOUNT,0)/100)
				     ELSE
				     0
				     END 
		       ) AS RECHARGE_AMT
		             
		     FROM
		     GTT_REPORTING.RECHARGE_HISTORY RH
		     INNER  JOIN 
		     GTT_REPORTING.RECHARGE_HISTORY_BALANCE RHB ON RH.RECHARGE_ID=RHB.RECHARGE_ID AND RH.RECHARGE_ID2=RHB.RECHARGE_ID2
		     	        
		     WHERE
		     NVL(RHB.AMOUNT,0)<0
		     AND RHB.BALANCE_ID=89 --CORE BALANCE
		     AND DATE(RH.RECHARGE_DATE_TIME) BETWEEN '2021-01-01'::date AND '2021-06-30'::date
		     GROUP BY 1,2

    
  ) AS RCG ON SUB.SUBSCR_NO=RCG.SUBSCR_NO AND TF.YEAR_MONTH=RCG.R_YEAR_MONTH
  LEFT JOIN 
  (
      ------------------------------------------------------SUBSCRIPTION PURCHASES-------------------------------------------------------
       SELECT 
        TO_CHAR(RC.APPLY_DATE,'YYYY-MM') AS D_YEAR_MONTH,
        --TO_CHAR(RC.APPLY_DATE,'YYYY-MM-DD') AS D_YEAR_MONTH_DATE,
        RC.PARENT_SUBSCR_NO, 
		SUM(CASE WHEN  RC.RC_TERM_ID IN (1766,1864,1886,1935,1767,1887,1768,1888,1769) THEN NVL(AMOUNT,0)/100 ELSE 0 END) AS PREPAID_SUBSCRIPTION_REV_GYD
			
	FROM GTT_REPORTING.RC AS RC 
	LEFT JOIN GTT_REPORTING.OFFER_REF OREF
		ON RC.OFFER_ID = OREF.OFFER_ID AND OREF.RESELLER_VERSION_ID = (SELECT MAX(RESELLER_VERSION_ID) FROM GTT_REPORTING.OFFER_REF)
	INNER JOIN GTT_REPORTING.RC_BALANCE RCBAL
		ON RC.RC_TERM_INST_ID = RCBAL.RC_TERM_INST_ID AND RC.BILLING_SEQUENCE_NUMBER = RCBAL.BILLING_SEQUENCE_NUMBER AND RCBAL.PAYMENT_MODE = 1
	LEFT JOIN GTT_REPORTING.OFFER_VALUES OVALS
		ON RC.OFFER_ID = OVALS.OFFER_ID AND OVALS.RESELLER_VERSION_ID = (SELECT MAX(RESELLER_VERSION_ID) FROM GTT_REPORTING.OFFER_VALUES)
	WHERE OREF.SERVICE_CATEGORY_ID=4 --ONLY MOBILE (GSM)
		AND OREF.PAYMENT_MODE=1 --PREPAID
		AND RCBAL.BALANCE_ID = 89 --COREBALANCE
		AND RC.AMOUNT != 0
		AND DATE(RC.APPLY_DATE) BETWEEN '2021-01-01'::date AND '2021-06-30'::date
        GROUP BY 1,2

  ) AS SPR ON SUB.SUBSCR_NO=SPR.PARENT_SUBSCR_NO AND TF.YEAR_MONTH=SPR.D_YEAR_MONTH
  WHERE (NVL(USG.TOTAL_MOU_REV_GYD,0) + NVL(USG.TOTAL_SMS_REV_GYD,0) + NVL(SPR.PREPAID_SUBSCRIPTION_REV_GYD,0)) BETWEEN 6000 AND 9000
  ORDER BY 
  	TF.YEAR_MONTH,
	SUB.BID	