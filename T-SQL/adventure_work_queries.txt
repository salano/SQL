use AdventureWorks
GO


create schema Demo

create table Demo.RepPerformance
(
	ID INT PRIMARY KEY identity(1,1),
	EmployeeID INT,
	SalesQuantity INT,
	SalesRevenue MONEY,
	OrderYear INT
)


INSERT INTO Demo.RepPerformance
(
	EmployeeID,
	SalesQuantity,
	SalesRevenue,
	OrderYear
)
Values
(11, 250, 2000, 2008);

truncate table Demo.RepPerformance

-- Insert into table using select 
INSERT INTO Demo.RepPerformance
(
	EmployeeID,
	SalesQuantity,
	SalesRevenue,
	OrderYear
)

select 
	SP.BusinessEntityID as EmployeeID,
	SUM(SOD.OrderQty) as SalesQuantity,
	SUM(SOD.OrderQty * PRD.ListPrice) as SalesRevenue,
	DATEPART(YEAR, SOH.OrderDate) as OrderYear
from 
	Sales.SalesOrderHeader SOH
LEFT JOIN Sales.SalesOrderDetail SOD
on SOH.SalesOrderID = SOD.SalesOrderID
LEFT JOIN Sales.SalesPerson SP
on sp.BusinessEntityID = SOH.SalesPersonID
LEFT JOIN HumanResources.Employee EMP
on SP.BusinessEntityID = EMP.BusinessEntityID
LEFT JOIN Person.Person PER
on per.BusinessEntityID = EMP.BusinessEntityID
LEFT JOIN Production.Product PRD
on PRD.ProductID = SOD.ProductID

group by
sp.BusinessEntityID,
DATEPART(YEAR, SOH.OrderDate)


select 
	* 
from 
	Demo.RepPerformance

order by EmployeeID

Update Demo.RepPerformance 
	set EmployeeID = 0
where 
	EmployeeID = null
--------------------------------------------------------------------
-- Perform insert using stored procedure
-- =============================================
-- Author:		Cleveland S
-- Create date:	01/01/2025
-- Description:	Demo Store Procedure
-- =============================================
CREATE PROCEDURE Demo.uspUpdateRepPerformance

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	INSERT INTO Demo.RepPerformance
(
	EmployeeID,
	SalesQuantity,
	SalesRevenue,
	OrderYear
)

select 
	SP.BusinessEntityID as EmployeeID,
	SUM(SOD.OrderQty) as SalesQuantity,
	SUM(SOD.OrderQty * PRD.ListPrice) as SalesRevenue,
	DATEPART(YEAR, SOH.OrderDate) as OrderYear
from 
	Sales.SalesOrderHeader SOH
LEFT JOIN Sales.SalesOrderDetail SOD
on SOH.SalesOrderID = SOD.SalesOrderID
LEFT JOIN Sales.SalesPerson SP
on sp.BusinessEntityID = SOH.SalesPersonID
LEFT JOIN HumanResources.Employee EMP
on SP.BusinessEntityID = EMP.BusinessEntityID
LEFT JOIN Person.Person PER
on per.BusinessEntityID = EMP.BusinessEntityID
LEFT JOIN Production.Product PRD
on PRD.ProductID = SOD.ProductID

group by
sp.BusinessEntityID,
DATEPART(YEAR, SOH.OrderDate)

END
GO
----------------------------------------------------------------------
--use store procedure 

Truncate table Demo.RepPerformance

exec Demo.uspUpdateRepPerformance

-----------------------------------------------------------------------
--Alter store procedure to to use parameter

-- =============================================
-- Author:		Cleveland S
-- Create date:	01/01/2025
-- Description:	Demo Store Procedure
-- =============================================
ALTER PROCEDURE Demo.uspUpdateRepPerformance
	@OrderYear INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	--Clear table 
	Truncate table Demo.RepPerformance

    -- Insert statements for procedure here
	INSERT INTO Demo.RepPerformance
(
	EmployeeID,
	SalesQuantity,
	SalesRevenue,
	OrderYear
)

select 
	SP.BusinessEntityID as EmployeeID,
	SUM(SOD.OrderQty) as SalesQuantity,
	SUM(SOD.OrderQty * PRD.ListPrice) as SalesRevenue,
	DATEPART(YEAR, SOH.OrderDate) as OrderYear
from 
	Sales.SalesOrderHeader SOH
LEFT JOIN Sales.SalesOrderDetail SOD
on SOH.SalesOrderID = SOD.SalesOrderID
LEFT JOIN Sales.SalesPerson SP
on sp.BusinessEntityID = SOH.SalesPersonID
LEFT JOIN HumanResources.Employee EMP
on SP.BusinessEntityID = EMP.BusinessEntityID
LEFT JOIN Person.Person PER
on per.BusinessEntityID = EMP.BusinessEntityID
LEFT JOIN Production.Product PRD
on PRD.ProductID = SOD.ProductID

where 
	DATEPART(YEAR, SOH.OrderDate) = @OrderYear
group by
sp.BusinessEntityID,
DATEPART(YEAR, SOH.OrderDate)

END
GO
----------------------------------------------------------------------
--use store procedure with parameter



exec Demo.uspUpdateRepPerformance 2011

-----------------------------------------------------------------------
-- =============================================
-- Author:		Cleveland S
-- Create date: 01/01/2025
-- Description:	Demo Scalar Function
-- =============================================
CREATE FUNCTION Demo.ufnGetLastOrderDate
(

)
RETURNS DATE
AS
BEGIN
	-- Declare the return variable here
	DECLARE @LastOrderDate as DATE;

	-- Add the T-SQL statements to compute the return value here
	SELECT @LastOrderDate = CAST(MAX(SOH.OrderDate) AS DATE)
								from 
									Sales.SalesOrderHeader SOH
								LEFT JOIN Sales.SalesOrderDetail SOD
								on SOH.SalesOrderID = SOD.SalesOrderID
								LEFT JOIN Sales.SalesPerson SP
								on sp.BusinessEntityID = SOH.SalesPersonID
								LEFT JOIN HumanResources.Employee EMP
								on SP.BusinessEntityID = EMP.BusinessEntityID
								LEFT JOIN Person.Person PER
								on per.BusinessEntityID = EMP.BusinessEntityID
								LEFT JOIN Production.Product PRD
								on PRD.ProductID = SOD.ProductID;

	-- Return the result of the function
	RETURN @LastOrderDate;

END
GO

----------------------------------------------------------------------
--use function


select Demo.ufnGetLastOrderDate()

-----------------------------------------------------------------------
--Update function to use paramter



-- =============================================
-- Author:		Cleveland S
-- Create date: 01/01/2025
-- Description:	Demo Scalar Function
-- =============================================
ALTER FUNCTION Demo.ufnGetLastOrderDate
(
	@EmployeeID INT
)
RETURNS DATE
AS
BEGIN
	-- Declare the return variable here
	DECLARE @LastOrderDate as DATE;

	-- Add the T-SQL statements to compute the return value here
	SELECT @LastOrderDate = CAST(MAX(SOH.OrderDate) AS DATE)
								from 
									Sales.SalesOrderHeader SOH
								LEFT JOIN Sales.SalesOrderDetail SOD
								on SOH.SalesOrderID = SOD.SalesOrderID
								LEFT JOIN Sales.SalesPerson SP
								on sp.BusinessEntityID = SOH.SalesPersonID
								LEFT JOIN HumanResources.Employee EMP
								on SP.BusinessEntityID = EMP.BusinessEntityID
								LEFT JOIN Person.Person PER
								on per.BusinessEntityID = EMP.BusinessEntityID
								LEFT JOIN Production.Product PRD
								on PRD.ProductID = SOD.ProductID
								where 
									SP.BusinessEntityID = @EmployeeID
								;

	-- Return the result of the function
	RETURN @LastOrderDate;

END
GO



-----------------------------------------------------------------------
--use function with parameter


select Demo.ufnGetLastOrderDate(275)


select 
	*,
	Demo.ufnGetLastOrderDate(EmployeeID)
from
	Demo.RepPerformance

-----------------------------------------------------------------------
--View code

select 
	R.ID,
	R.EmployeeID,
	R.SalesQuantity,
	R.SalesRevenue,
	R.OrderYear,
	Demo.ufnGetLastOrderDate(R.EmployeeID) as LastOrderDate,
	P.FirstName,
	P.LastName,
	A.City,
	SP.Name AS ProvinceName,
	CR.Name RegionName

from 
	Demo.RepPerformance R
INNER JOIN Person.Person P
	on R.EmployeeID = P.BusinessEntityID
INNER JOIN Person.BusinessEntityAddress BEA
	on R.EmployeeID = BEA.BusinessEntityID
INNER JOIN Person.Address A
	on BEA.AddressID = A.AddressID
INNER JOIN Person.StateProvince SP
	on A.StateProvinceID = SP.StateProvinceID
INNER JOIN. Person.CountryRegion CR
	on SP.CountryRegionCode = CR.CountryRegionCode

-----------------------------------------------------------------------
--Use view 


select 
	*
from
	Demo.vRepPerformanceExt

-----------------------------------------------------------------------

select 
	EmployeeID,
	OrderYear,
	SalesRevenue,
	sum(SalesRevenue) over (partition by EmployeeID
					order by OrderYear
					ROWS UNBOUNDED PRECEDING) as EmprunningRevenue,
	FIRST_VALUE(SalesRevenue) OVER(partition by EmployeeID ORDER BY OrderYear) AS EmpFirstRevenue,
	LAST_VALUE(SalesRevenue) OVER(partition by EmployeeID ORDER BY OrderYear
		ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS EmpLastRevenue,
	100 * ((SalesRevenue - LAG(SalesRevenue) over (partition by EmployeeID order by OrderYear)) /
	LAG(SalesRevenue) over (partition by EmployeeID order by OrderYear)) AS EmpYOY_Pctchange,
	100 * (SalesRevenue / sum(SalesRevenue) over()) as pctall,
	100 * (SalesRevenue / sum(SalesRevenue) over (partition by EmployeeID)) as pctemployee,
	MAX(SalesRevenue) over (partition by EmployeeID
					order by OrderYear
					ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) as EMPPrevYearRevenue,
	MAX(SalesRevenue) over (partition by EmployeeID
					order by OrderYear
					ROWS BETWEEN 1 FOLLOWING AND 1 FOLLOWING) as EMPNextYearRevenye,
	AVG(SalesRevenue) over (partition by EmployeeID
					order by OrderYear
					ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) as EMPAvg_3_YearRevenue,
	row_number() over (partition by EmployeeID order by SalesRevenue) as rowNumber
from
	Demo.RepPerformance
where 
	EmployeeID is not null

order by
        EmployeeID ,
        OrderYear


-----------------------------------------------------------------------
--Segmentation by purchase patterns
WITH OrderREF as
(
	select
		C.CustomerID,
		LAG(SOH.OrderDate) over (partition by C.CustomerID order by SOH.OrderDate) PreVOrderDate,
		SOH.OrderDate,
		SOD.ProductID,
		SOH.SalesOrderID

	from
		Sales.Customer C
	Join
		Sales.SalesOrderHeader SOH
		on C.CustomerID = SOH.CreditCardID
	Join 
		Sales.SalesOrderDetail SOD
		on SOH.SalesOrderID = SOD.SalesOrderID
 ),
 CustProd as 
 (
  select
	  C.CustomerID,
	  SOH.SalesOrderID,
	  SOD.ProductID,
	  CASE 
		when 
		  count(SOD.ProductID) over (partition by C.CustomerID,SOD.ProductID order by SOH.SalesOrderID ) >
		  count(SOD.ProductID) THEN 1
		  ELSE 0
	   END AS PRIOR_PURCHASE

  from
		Sales.Customer C
	Join
		Sales.SalesOrderHeader SOH
		on C.CustomerID = SOH.CreditCardID
	Join 
		Sales.SalesOrderDetail SOD
		on SOH.SalesOrderID = SOD.SalesOrderID
  group by
	C.CustomerID,
	SOH.SalesOrderID,
    SOD.ProductID
 
 ),
 SegmentCust as
 (

	 select
		A.CustomerID,
		count(distinct A.SalesOrderID) as num_uniq_orders,
		AVG(DATEDIFF(day, PreVOrderDate, OrderDate)) orderFrequency, --Average days between orders
		DATEDIFF(day, MAX(OrderDate), CAST('2014-07-31' AS DATE)) daysSinceLastOrder,
		count(distinct A.ProductID) num_uniq_products,
		round(100 * AVG(CAST(PRIOR_PURCHASE AS float)),2) reorder_ratio -- Percentage of reordered items
	from
		OrderREF A
	JOIN
		CustProd B
		on A.CustomerID = B.CustomerID and A.SalesOrderID = B.SalesOrderID and A.ProductID = B.ProductID
	group by
		A.CustomerID

)
select
	*,
	/*NTILE(4) OVER(ORDER BY SC.num_uniq_orders DESC) AS Uniq_Order_Quartile, 
	NTILE(4) OVER(ORDER BY SC.orderFrequency DESC) AS Order_Freq_Quartile, 
	NTILE(4) OVER(ORDER BY SC.daysSinceLastOrder DESC) AS Days_Last_Order_Quartile, 
	NTILE(4) OVER(ORDER BY SC.num_uniq_products DESC) AS Uniq_Prod_Quartile,
	NTILE(4) OVER(ORDER BY SC.reorder_ratio DESC) AS Reorder_Quartile,*/
	CASE 
		WHEN NTILE(4) OVER(ORDER BY SC.num_uniq_orders ) >= 3
			and NTILE(4) OVER(ORDER BY SC.orderFrequency ) >= 3
			and NTILE(4) OVER(ORDER BY SC.daysSinceLastOrder ) >= 2
			THEN 'Loyal Customers'
		WHEN NTILE(4) OVER(ORDER BY SC.orderFrequency ) >= 2
			and NTILE(4) OVER(ORDER BY SC.daysSinceLastOrder ) >= 3
			THEN 'At-Risk Customers'
		WHEN NTILE(4) OVER(ORDER BY SC.num_uniq_orders ) >= 2
			and NTILE(4) OVER(ORDER BY SC.reorder_ratio ) >= 2
		    THEN 'Infrequent Customers'
		WHEN NTILE(4) OVER(ORDER BY SC.num_uniq_orders ) >= 3
			and NTILE(4) OVER(ORDER BY SC.reorder_ratio ) >= 3
			THEN 'Bulk Buyers'
		ELSE
			'Regular Customer'
   END CUSTOMER_SEGMENT
from
  SegmentCust SC
order by
	SC.CustomerID

-----------------------------------------------------------------------
--Customer Analysis

DECLARE @end_date AS DATE = '2014-07-31';
WITH OrderREF as
(
	select
		C.CustomerID,
		LAG(SOH.OrderDate) over (partition by C.CustomerID order by SOH.OrderDate) PreVOrderDate,
		SOH.OrderDate,
		SOD.ProductID,
		SOH.SalesOrderID,
		SOD.OrderQty * PRD.ListPrice AS Revenue

	from
		Sales.Customer C
	Join
		Sales.SalesOrderHeader SOH
		on C.CustomerID = SOH.CustomerID
	Join 
		Sales.SalesOrderDetail SOD
		on SOH.SalesOrderID = SOD.SalesOrderID
	LEFT JOIN Production.Product PRD
		on PRD.ProductID = SOD.ProductID
 ),
 CustProd as 
 (
  select
	  C.CustomerID,
	  SOH.SalesOrderID,
	  SOD.ProductID,
	  CASE 
		when 
		  count(SOD.ProductID) over (partition by C.CustomerID,SOD.ProductID order by SOH.SalesOrderID ) >
		  count(SOD.ProductID) THEN 1
		  ELSE 0
	   END AS PRIOR_PURCHASE

  from
		Sales.Customer C
	Join
		Sales.SalesOrderHeader SOH
		on C.CustomerID = SOH.CreditCardID
	Join 
		Sales.SalesOrderDetail SOD
		on SOH.SalesOrderID = SOD.SalesOrderID
  group by
	C.CustomerID,
	SOH.SalesOrderID,
    SOD.ProductID
 
 ),
 SegementCust as
 (

	 select
		A.CustomerID,
		count(distinct A.SalesOrderID) as num_uniq_orders,
		AVG(DATEDIFF(day, PreVOrderDate, OrderDate)) orderFrequency, --Average days between orders
		DATEDIFF(day, MAX(OrderDate), @end_date) daysSinceLastOrder,
		count(distinct A.ProductID) num_uniq_products,
		round(100 * AVG(CAST(PRIOR_PURCHASE AS float)),2) reorder_ratio, -- Percentage of reordered items
		round(SUM(A.revenue),2) AS TotalRevenue
	from
		OrderREF A
	JOIN
		CustProd B
		on A.CustomerID = B.CustomerID and A.SalesOrderID = B.SalesOrderID and A.ProductID = B.ProductID
	group by
		A.CustomerID

)
select
	*	
from
  SegementCust SC
order by
	SC.CustomerID
	
-----------------------------------------------------------------------
--Customer Cohort Analysis

with cust_orders  as 
(
	select
			C.CustomerID,
			SOH.SalesOrderID,
			--LAG(SOH.OrderDate) over (partition by C.CustomerID order by SOH.OrderDate) PreVOrderDate,
			SOH.OrderDate,
			SOD.ProductID,
			SOD.OrderQty,
			PRD.ListPrice,
			SOD.OrderQty * PRD.ListPrice AS Revenue

		from
			Sales.Customer C
		Join
			Sales.SalesOrderHeader SOH
			on C.CustomerID = SOH.CustomerID
		Join 
			Sales.SalesOrderDetail SOD
			on SOH.SalesOrderID = SOD.SalesOrderID
		LEFT JOIN Production.Product PRD
			on PRD.ProductID = SOD.ProductID
)
select 
	*
into 
	Demo.cust_orders
from
	cust_orders;
	
	
	
--create cohort table 
select
	CustomerID,
	MIN(OrderDate) as first_purchase_date,
	DATEFROMPARTS(year(min(OrderDate)), MONTH(MIN(OrderDate)),1) as cohort_date --Cohort date as start of month
into Demo.cohort
from
	Demo.cust_orders
group by
	CustomerID;
	

	WITH CTE as
(
	select
		o.*,
		c.cohort_date,
		year(o.OrderDate) as order_year,
		month(o.OrderDate) as order_month,
		year(c.cohort_date) as cohort_year,
		month(c.cohort_date) as cohort_month
	from
		Demo.cust_orders o
	left join 
		Demo.cohort c
	on c.CustomerID = o.CustomerID
),
CTE2 as
(
	select
		CTE.*,
		year_diff =  order_year - cohort_year,
		month_diff =  order_month - cohort_month
	from
		CTE
)
select
	--cohort index indicates month of subsequent purchase. Eg 1 - Same month, 2 - Next Month and so forth
	CTE2.*,
	year_diff * 12 + month_diff + 1 as cohort_index
into
	Demo.retention
from
	CTE2;
	
--Cohort Pivot table
select 
	*
into
	Demo.cohort_pivot
from
	(
	select
		distinct
		CustomerID,
		cohort_date,
		cohort_index
	from
		Demo.retention
	)tbl
PIVOT
	(
		count(CustomerID)
		for cohort_index in ([1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29],[30],[31],[32],[33],[34],[35],[36])
	) AS PIVOT_TABLE
order by 
	cohort_date;
	
	
	
---Retention rate
select
	cohort_date,
	1.0 * [1] / [1] * 100 as [1],  
	1.0 * [2] / [1] * 100 as [2],  
	1.0 * [3] / [1] * 100 as [3],  
	1.0 * [4] / [1] * 100 as [4],  
	1.0 * [5] / [1] * 100 as [5],  
	1.0 * [6] / [1] * 100 as [6],  
	1.0 * [7] / [1] * 100 as [7],  
	1.0 * [8] / [1] * 100 as [8],  
	1.0 * [9] / [1] * 100 as [9],  
	1.0 * [10] / [1] * 100 as [10],
	1.0 * [11] / [1] * 100 as [11],
	1.0 * [12] / [1] * 100 as [12],
	1.0 * [13] / [1] * 100 as [13],
	1.0 * [14] / [1] * 100 as [14],
	1.0 * [15] / [1] * 100 as [15],
	1.0 * [16] / [1] * 100 as [16],
	1.0 * [17] / [1] * 100 as [17],
	1.0 * [18] / [1] * 100 as [18],
	1.0 * [19] / [1] * 100 as [19],
	1.0 * [20] / [1] * 100 as [20],
	1.0 * [21] / [1] * 100 as [21],
	1.0 * [22] / [1] * 100 as [22],
	1.0 * [23] / [1] * 100 as [23],
	1.0 * [24] / [1] * 100 as [24],
	1.0 * [25] / [1] * 100 as [25],
	1.0 * [26] / [1] * 100 as [26],
	1.0 * [27] / [1] * 100 as [27],
	1.0 * [28] / [1] * 100 as [28],
	1.0 * [29] / [1] * 100 as [29],
	1.0 * [30] / [1] * 100 as [30],
	1.0 * [31] / [1] * 100 as [31],
	1.0 * [32] / [1] * 100 as [32],
	1.0 * [33] / [1] * 100 as [33],
	1.0 * [34] / [1] * 100 as [34],
	1.0 * [35] / [1] * 100 as [35],
	1.0 * [36] / [1] * 100 as [36]
from 
	Demo.cohort_pivot
	
	
---Revenue from Customer Cohort Analysis

select 
	*
into
	Demo.cohort_revenue_pivot
from
	(
	select
		distinct
		--CustomerID,
		Revenue,
		cohort_date,
		cohort_index
	from
		Demo.retention
	)tbl
PIVOT
	(
		sum(Revenue)
		for cohort_index in ([1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29],[30],[31],[32],[33],[34],[35],[36])
	) AS PIVOT_TABLE
order by 
	cohort_date

--Net Revenue Retention
select
	cohort_date,
	1.0 * [1] / [1] * 100 as [1],  
	1.0 * [2] / [1] * 100 as [2],  
	1.0 * [3] / [1] * 100 as [3],  
	1.0 * [4] / [1] * 100 as [4],  
	1.0 * [5] / [1] * 100 as [5],  
	1.0 * [6] / [1] * 100 as [6],  
	1.0 * [7] / [1] * 100 as [7],  
	1.0 * [8] / [1] * 100 as [8],  
	1.0 * [9] / [1] * 100 as [9],  
	1.0 * [10] / [1] * 100 as [10],
	1.0 * [11] / [1] * 100 as [11],
	1.0 * [12] / [1] * 100 as [12],
	1.0 * [13] / [1] * 100 as [13],
	1.0 * [14] / [1] * 100 as [14],
	1.0 * [15] / [1] * 100 as [15],
	1.0 * [16] / [1] * 100 as [16],
	1.0 * [17] / [1] * 100 as [17],
	1.0 * [18] / [1] * 100 as [18],
	1.0 * [19] / [1] * 100 as [19],
	1.0 * [20] / [1] * 100 as [20],
	1.0 * [21] / [1] * 100 as [21],
	1.0 * [22] / [1] * 100 as [22],
	1.0 * [23] / [1] * 100 as [23],
	1.0 * [24] / [1] * 100 as [24],
	1.0 * [25] / [1] * 100 as [25],
	1.0 * [26] / [1] * 100 as [26],
	1.0 * [27] / [1] * 100 as [27],
	1.0 * [28] / [1] * 100 as [28],
	1.0 * [29] / [1] * 100 as [29],
	1.0 * [30] / [1] * 100 as [30],
	1.0 * [31] / [1] * 100 as [31],
	1.0 * [32] / [1] * 100 as [32],
	1.0 * [33] / [1] * 100 as [33],
	1.0 * [34] / [1] * 100 as [34],
	1.0 * [35] / [1] * 100 as [35],
	1.0 * [36] / [1] * 100 as [36]
from 
	Demo.cohort_revenue_pivot
	
----Cummulative lifetime Revenue by Cohort

select
	cohort_date,
	ISNULL ([1],0) as [1],
	ISNULL ([1],0)+ISNULL ([2],0) as [2],
	ISNULL ([1],0)+ISNULL ([2],0)+ISNULL ([3],0) as [3],
	ISNULL ([1],0)+ISNULL ([2],0)+ISNULL ([3],0)+ISNULL ([4],0) as [4],
	ISNULL ([1],0)+ISNULL ([2],0)+ISNULL ([3],0)+ISNULL ([4],0)+ISNULL ([5],0) as [5],
	ISNULL ([1],0)+ISNULL ([2],0)+ISNULL ([3],0)+ISNULL ([4],0)+ISNULL ([5],0)+ISNULL ([6],0) as [6],
	ISNULL ([1],0)+ISNULL ([2],0)+ISNULL ([3],0)+ISNULL ([4],0)+ISNULL ([5],0)+ISNULL ([6],0)+ISNULL ([7],0) as [7],
	ISNULL ([1],0)+ISNULL ([2],0)+ISNULL ([3],0)+ISNULL ([4],0)+ISNULL ([5],0)+ISNULL ([6],0)+ISNULL ([7],0)+ISNULL ([8],0) as [8],
	ISNULL ([1],0)+ISNULL ([2],0)+ISNULL ([3],0)+ISNULL ([4],0)+ISNULL ([5],0)+ISNULL ([6],0)+ISNULL ([7],0)+ISNULL ([8],0)+ISNULL ([9],0) as [9],ISNULL ([1],0)+ISNULL ([2],0)+ISNULL ([3],0)+ISNULL ([4],0)+ISNULL ([5],0)+ISNULL ([6],0)+ISNULL ([7],0)+ISNULL ([8],0)+ISNULL ([9],0)+ISNULL 
	([10],0) as [10],
	ISNULL ([1],0)+ISNULL ([2],0)+ISNULL ([3],0)+ISNULL ([4],0)+ISNULL ([5],0)+ISNULL ([6],0)+ISNULL ([7],0)+ISNULL ([8],0)+ISNULL ([9],0)+ISNULL 
	([10],0)+ISNULL ([11],0) as [11],
	ISNULL ([1],0)+ISNULL ([2],0)+ISNULL ([3],0)+ISNULL ([4],0)+ISNULL ([5],0)+ISNULL ([6],0)+ISNULL ([7],0)+ISNULL ([8],0)+ISNULL ([9],0)+ISNULL 
	([10],0)+ISNULL ([11],0)+ISNULL ([12],0) as [12],
	ISNULL ([1],0)+ISNULL ([2],0)+ISNULL ([3],0)+ISNULL ([4],0)+ISNULL ([5],0)+ISNULL ([6],0)+ISNULL ([7],0)+ISNULL ([8],0)+ISNULL ([9],0)+ISNULL 
	([10],0)+ISNULL ([11],0)+ISNULL ([12],0)+ISNULL ([13],0) as [13],
	ISNULL ([1],0)+ISNULL ([2],0)+ISNULL ([3],0)+ISNULL ([4],0)+ISNULL ([5],0)+ISNULL ([6],0)+ISNULL ([7],0)+ISNULL ([8],0)+ISNULL ([9],0)+ISNULL 
	([10],0)+ISNULL ([11],0)+ISNULL ([12],0)+ISNULL ([13],0)+ISNULL ([14],0) as [14],
	ISNULL ([1],0)+ISNULL ([2],0)+ISNULL ([3],0)+ISNULL ([4],0)+ISNULL ([5],0)+ISNULL ([6],0)+ISNULL ([7],0)+ISNULL ([8],0)+ISNULL ([9],0)+ISNULL 
	([10],0)+ISNULL ([11],0)+ISNULL ([12],0)+ISNULL ([13],0)+ISNULL ([14],0)+ISNULL ([15],0) as [15],
	ISNULL ([1],0)+ISNULL ([2],0)+ISNULL ([3],0)+ISNULL ([4],0)+ISNULL ([5],0)+ISNULL ([6],0)+ISNULL ([7],0)+ISNULL ([8],0)+ISNULL ([9],0)+ISNULL 
	([10],0)+ISNULL ([11],0)+ISNULL ([12],0)+ISNULL ([13],0)+ISNULL ([14],0)+ISNULL ([15],0)+ISNULL ([16],0) as [16],
	ISNULL ([1],0)+ISNULL ([2],0)+ISNULL ([3],0)+ISNULL ([4],0)+ISNULL ([5],0)+ISNULL ([6],0)+ISNULL ([7],0)+ISNULL ([8],0)+ISNULL ([9],0)+ISNULL 
	([10],0)+ISNULL ([11],0)+ISNULL ([12],0)+ISNULL ([13],0)+ISNULL ([14],0)+ISNULL ([15],0)+ISNULL ([16],0)+ISNULL ([17],0) as [17],
	ISNULL ([1],0)+ISNULL ([2],0)+ISNULL ([3],0)+ISNULL ([4],0)+ISNULL ([5],0)+ISNULL ([6],0)+ISNULL ([7],0)+ISNULL ([8],0)+ISNULL ([9],0)+ISNULL 
	([10],0)+ISNULL ([11],0)+ISNULL ([12],0)+ISNULL ([13],0)+ISNULL ([14],0)+ISNULL ([15],0)+ISNULL ([16],0)+ISNULL ([17],0)+ISNULL ([18],0) as [18],
	ISNULL ([1],0)+ISNULL ([2],0)+ISNULL ([3],0)+ISNULL ([4],0)+ISNULL ([5],0)+ISNULL ([6],0)+ISNULL ([7],0)+ISNULL ([8],0)+ISNULL ([9],0)+ISNULL 
	([10],0)+ISNULL ([11],0)+ISNULL ([12],0)+ISNULL ([13],0)+ISNULL ([14],0)+ISNULL ([15],0)+ISNULL ([16],0)+ISNULL ([17],0)+ISNULL ([18],0)+ISNULL ([19],0) as [19],
	ISNULL ([1],0)+ISNULL ([2],0)+ISNULL ([3],0)+ISNULL ([4],0)+ISNULL ([5],0)+ISNULL ([6],0)+ISNULL ([7],0)+ISNULL ([8],0)+ISNULL ([9],0)+ISNULL 
	([10],0)+ISNULL ([11],0)+ISNULL ([12],0)+ISNULL ([13],0)+ISNULL ([14],0)+ISNULL ([15],0)+ISNULL ([16],0)+ISNULL ([17],0)+ISNULL ([18],0)+ISNULL ([19],0)+ISNULL ([20],0) as [20],
	ISNULL ([1],0)+ISNULL ([2],0)+ISNULL ([3],0)+ISNULL ([4],0)+ISNULL ([5],0)+ISNULL ([6],0)+ISNULL ([7],0)+ISNULL ([8],0)+ISNULL ([9],0)+ISNULL 
	([10],0)+ISNULL ([11],0)+ISNULL ([12],0)+ISNULL ([13],0)+ISNULL ([14],0)+ISNULL ([15],0)+ISNULL ([16],0)+ISNULL ([17],0)+ISNULL ([18],0)+ISNULL ([19],0)+ISNULL ([20],0)+ISNULL ([21],0) as [21],
	ISNULL ([1],0)+ISNULL ([2],0)+ISNULL ([3],0)+ISNULL ([4],0)+ISNULL ([5],0)+ISNULL ([6],0)+ISNULL ([7],0)+ISNULL ([8],0)+ISNULL ([9],0)+ISNULL 
	([10],0)+ISNULL ([11],0)+ISNULL ([12],0)+ISNULL ([13],0)+ISNULL ([14],0)+ISNULL ([15],0)+ISNULL ([16],0)+ISNULL ([17],0)+ISNULL ([18],0)+ISNULL ([19],0)+ISNULL ([20],0)+ISNULL ([21],0)+ISNULL ([22],0) as [22],
	ISNULL ([1],0)+ISNULL ([2],0)+ISNULL ([3],0)+ISNULL ([4],0)+ISNULL ([5],0)+ISNULL ([6],0)+ISNULL ([7],0)+ISNULL ([8],0)+ISNULL ([9],0)+ISNULL 
	([10],0)+ISNULL ([11],0)+ISNULL ([12],0)+ISNULL ([13],0)+ISNULL ([14],0)+ISNULL ([15],0)+ISNULL ([16],0)+ISNULL ([17],0)+ISNULL ([18],0)+ISNULL ([19],0)+ISNULL ([20],0)+ISNULL ([21],0)+ISNULL ([22],0)+ISNULL ([23],0) as [23],
	ISNULL ([1],0)+ISNULL ([2],0)+ISNULL ([3],0)+ISNULL ([4],0)+ISNULL ([5],0)+ISNULL ([6],0)+ISNULL ([7],0)+ISNULL ([8],0)+ISNULL ([9],0)+ISNULL 
	([10],0)+ISNULL ([11],0)+ISNULL ([12],0)+ISNULL ([13],0)+ISNULL ([14],0)+ISNULL ([15],0)+ISNULL ([16],0)+ISNULL ([17],0)+ISNULL ([18],0)+ISNULL ([19],0)+ISNULL ([20],0)+ISNULL ([21],0)+ISNULL ([22],0)+ISNULL ([23],0)+ISNULL ([24],0) as [24],
	ISNULL ([1],0)+ISNULL ([2],0)+ISNULL ([3],0)+ISNULL ([4],0)+ISNULL ([5],0)+ISNULL ([6],0)+ISNULL ([7],0)+ISNULL ([8],0)+ISNULL ([9],0)+ISNULL 
	([10],0)+ISNULL ([11],0)+ISNULL ([12],0)+ISNULL ([13],0)+ISNULL ([14],0)+ISNULL ([15],0)+ISNULL ([16],0)+ISNULL ([17],0)+ISNULL ([18],0)+ISNULL ([19],0)+ISNULL ([20],0)+ISNULL ([21],0)+ISNULL ([22],0)+ISNULL ([23],0)+ISNULL ([24],0)+ISNULL ([25],0) as [25],
	ISNULL ([1],0)+ISNULL ([2],0)+ISNULL ([3],0)+ISNULL ([4],0)+ISNULL ([5],0)+ISNULL ([6],0)+ISNULL ([7],0)+ISNULL ([8],0)+ISNULL ([9],0)+ISNULL 
	([10],0)+ISNULL ([11],0)+ISNULL ([12],0)+ISNULL ([13],0)+ISNULL ([14],0)+ISNULL ([15],0)+ISNULL ([16],0)+ISNULL ([17],0)+ISNULL ([18],0)+ISNULL ([19],0)+ISNULL ([20],0)+ISNULL ([21],0)+ISNULL ([22],0)+ISNULL ([23],0)+ISNULL ([24],0)+ISNULL ([25],0)+ISNULL ([26],0) as [26],
	ISNULL ([1],0)+ISNULL ([2],0)+ISNULL ([3],0)+ISNULL ([4],0)+ISNULL ([5],0)+ISNULL ([6],0)+ISNULL ([7],0)+ISNULL ([8],0)+ISNULL ([9],0)+ISNULL 
	([10],0)+ISNULL ([11],0)+ISNULL ([12],0)+ISNULL ([13],0)+ISNULL ([14],0)+ISNULL ([15],0)+ISNULL ([16],0)+ISNULL ([17],0)+ISNULL ([18],0)+ISNULL ([19],0)+ISNULL ([20],0)+ISNULL ([21],0)+ISNULL ([22],0)+ISNULL ([23],0)+ISNULL ([24],0)+ISNULL ([25],0)+ISNULL ([26],0)+ISNULL ([27],0) as 
	[27],
	ISNULL ([1],0)+ISNULL ([2],0)+ISNULL ([3],0)+ISNULL ([4],0)+ISNULL ([5],0)+ISNULL ([6],0)+ISNULL ([7],0)+ISNULL ([8],0)+ISNULL ([9],0)+ISNULL 
	([10],0)+ISNULL ([11],0)+ISNULL ([12],0)+ISNULL ([13],0)+ISNULL ([14],0)+ISNULL ([15],0)+ISNULL ([16],0)+ISNULL ([17],0)+ISNULL ([18],0)+ISNULL ([19],0)+ISNULL ([20],0)+ISNULL ([21],0)+ISNULL ([22],0)+ISNULL ([23],0)+ISNULL ([24],0)+ISNULL ([25],0)+ISNULL ([26],0)+ISNULL ([27],0)+ISNULL ([28],0) as [28],
	ISNULL ([1],0)+ISNULL ([2],0)+ISNULL ([3],0)+ISNULL ([4],0)+ISNULL ([5],0)+ISNULL ([6],0)+ISNULL ([7],0)+ISNULL ([8],0)+ISNULL ([9],0)+ISNULL 
	([10],0)+ISNULL ([11],0)+ISNULL ([12],0)+ISNULL ([13],0)+ISNULL ([14],0)+ISNULL ([15],0)+ISNULL ([16],0)+ISNULL ([17],0)+ISNULL ([18],0)+ISNULL ([19],0)+ISNULL ([20],0)+ISNULL ([21],0)+ISNULL ([22],0)+ISNULL ([23],0)+ISNULL ([24],0)+ISNULL ([25],0)+ISNULL ([26],0)+ISNULL ([27],0)+ISNULL ([28],0)+ISNULL ([29],0) as [29],
	ISNULL ([1],0)+ISNULL ([2],0)+ISNULL ([3],0)+ISNULL ([4],0)+ISNULL ([5],0)+ISNULL ([6],0)+ISNULL ([7],0)+ISNULL ([8],0)+ISNULL ([9],0)+ISNULL 
	([10],0)+ISNULL ([11],0)+ISNULL ([12],0)+ISNULL ([13],0)+ISNULL ([14],0)+ISNULL ([15],0)+ISNULL ([16],0)+ISNULL ([17],0)+ISNULL ([18],0)+ISNULL ([19],0)+ISNULL ([20],0)+ISNULL ([21],0)+ISNULL ([22],0)+ISNULL ([23],0)+ISNULL ([24],0)+ISNULL ([25],0)+ISNULL ([26],0)+ISNULL ([27],0)+ISNULL ([28],0)+ISNULL ([29],0)+ISNULL ([30],0) as [30],
	ISNULL ([1],0)+ISNULL ([2],0)+ISNULL ([3],0)+ISNULL ([4],0)+ISNULL ([5],0)+ISNULL ([6],0)+ISNULL ([7],0)+ISNULL ([8],0)+ISNULL ([9],0)+ISNULL 
	([10],0)+ISNULL ([11],0)+ISNULL ([12],0)+ISNULL ([13],0)+ISNULL ([14],0)+ISNULL ([15],0)+ISNULL ([16],0)+ISNULL ([17],0)+ISNULL ([18],0)+ISNULL ([19],0)+ISNULL ([20],0)+ISNULL ([21],0)+ISNULL ([22],0)+ISNULL ([23],0)+ISNULL ([24],0)+ISNULL ([25],0)+ISNULL ([26],0)+ISNULL ([27],0)+ISNULL ([28],0)+ISNULL ([29],0)+ISNULL ([30],0)+ISNULL ([31],0) as [31],
	ISNULL ([1],0)+ISNULL ([2],0)+ISNULL ([3],0)+ISNULL ([4],0)+ISNULL ([5],0)+ISNULL ([6],0)+ISNULL ([7],0)+ISNULL ([8],0)+ISNULL ([9],0)+ISNULL 
	([10],0)+ISNULL ([11],0)+ISNULL ([12],0)+ISNULL ([13],0)+ISNULL ([14],0)+ISNULL ([15],0)+ISNULL ([16],0)+ISNULL ([17],0)+ISNULL ([18],0)+ISNULL ([19],0)+ISNULL ([20],0)+ISNULL ([21],0)+ISNULL ([22],0)+ISNULL ([23],0)+ISNULL ([24],0)+ISNULL ([25],0)+ISNULL ([26],0)+ISNULL ([27],0)+ISNULL ([28],0)+ISNULL ([29],0)+ISNULL ([30],0)+ISNULL ([31],0)+ISNULL ([32],0) as [32],
	ISNULL ([1],0)+ISNULL ([2],0)+ISNULL ([3],0)+ISNULL ([4],0)+ISNULL ([5],0)+ISNULL ([6],0)+ISNULL ([7],0)+ISNULL ([8],0)+ISNULL ([9],0)+ISNULL 
	([10],0)+ISNULL ([11],0)+ISNULL ([12],0)+ISNULL ([13],0)+ISNULL ([14],0)+ISNULL ([15],0)+ISNULL ([16],0)+ISNULL ([17],0)+ISNULL ([18],0)+ISNULL ([19],0)+ISNULL ([20],0)+ISNULL ([21],0)+ISNULL ([22],0)+ISNULL ([23],0)+ISNULL ([24],0)+ISNULL ([25],0)+ISNULL ([26],0)+ISNULL ([27],0)+ISNULL ([28],0)+ISNULL ([29],0)+ISNULL ([30],0)+ISNULL ([31],0)+ISNULL ([32],0)+ISNULL ([33],0) as [33],
	ISNULL ([1],0)+ISNULL ([2],0)+ISNULL ([3],0)+ISNULL ([4],0)+ISNULL ([5],0)+ISNULL ([6],0)+ISNULL ([7],0)+ISNULL ([8],0)+ISNULL ([9],0)+ISNULL 
	([10],0)+ISNULL ([11],0)+ISNULL ([12],0)+ISNULL ([13],0)+ISNULL ([14],0)+ISNULL ([15],0)+ISNULL ([16],0)+ISNULL ([17],0)+ISNULL ([18],0)+ISNULL ([19],0)+ISNULL ([20],0)+ISNULL ([21],0)+ISNULL ([22],0)+ISNULL ([23],0)+ISNULL ([24],0)+ISNULL ([25],0)+ISNULL ([26],0)+ISNULL ([27],0)+ISNULL ([28],0)+ISNULL ([29],0)+ISNULL ([30],0)+ISNULL ([31],0)+ISNULL ([32],0)+ISNULL ([33],0)+ISNULL ([34],0) as [34],
	ISNULL ([1],0)+ISNULL ([2],0)+ISNULL ([3],0)+ISNULL ([4],0)+ISNULL ([5],0)+ISNULL ([6],0)+ISNULL ([7],0)+ISNULL ([8],0)+ISNULL ([9],0)+ISNULL 
	([10],0)+ISNULL ([11],0)+ISNULL ([12],0)+ISNULL ([13],0)+ISNULL ([14],0)+ISNULL ([15],0)+ISNULL ([16],0)+ISNULL ([17],0)+ISNULL ([18],0)+ISNULL ([19],0)+ISNULL ([20],0)+ISNULL ([21],0)+ISNULL ([22],0)+ISNULL ([23],0)+ISNULL ([24],0)+ISNULL ([25],0)+ISNULL ([26],0)+ISNULL ([27],0)+ISNULL ([28],0)+ISNULL ([29],0)+ISNULL ([30],0)+ISNULL ([31],0)+ISNULL ([32],0)+ISNULL ([33],0)+ISNULL ([34],0)+ISNULL ([35],0) as [35],
	ISNULL ([1],0)+ISNULL ([2],0)+ISNULL ([3],0)+ISNULL ([4],0)+ISNULL ([5],0)+ISNULL ([6],0)+ISNULL ([7],0)+ISNULL ([8],0)+ISNULL ([9],0)+ISNULL 
	([10],0)+ISNULL ([11],0)+ISNULL ([12],0)+ISNULL ([13],0)+ISNULL ([14],0)+ISNULL ([15],0)+ISNULL ([16],0)+ISNULL ([17],0)+ISNULL ([18],0)+ISNULL ([19],0)+ISNULL ([20],0)+ISNULL ([21],0)+ISNULL ([22],0)+ISNULL ([23],0)+ISNULL ([24],0)+ISNULL ([25],0)+ISNULL ([26],0)+ISNULL ([27],0)+ISNULL ([28],0)+ISNULL ([29],0)+ISNULL ([30],0)+ISNULL ([31],0)+ISNULL ([32],0)+ISNULL ([33],0)+ISNULL ([34],0)+ISNULL ([35],0)+ISNULL ([36],0) as [36]
from 
	Demo.cohort_revenue_pivot
	order by 
	cohort_date;
	
	
--Customer liferime revenue by cohort

with CUM_LTV_cohort as
(
	select
		cohort_date,
		[1] as [1],
		[1]+[2] as [2],
		[1]+[2]+[3] as [3],
		[1]+[2]+[3]+[4] as [4],
		[1]+[2]+[3]+[4]+[5] as [5],
		[1]+[2]+[3]+[4]+[5]+[6] as [6],
		[1]+[2]+[3]+[4]+[5]+[6]+[7] as [7],
		[1]+[2]+[3]+[4]+[5]+[6]+[7]+[8] as [8],
		[1]+[2]+[3]+[4]+[5]+[6]+[7]+[8]+[9] as [9],
		[1]+[2]+[3]+[4]+[5]+[6]+[7]+[8]+[9]+[10] as [10],
		[1]+[2]+[3]+[4]+[5]+[6]+[7]+[8]+[9]+[10]+[11] as [11],
		[1]+[2]+[3]+[4]+[5]+[6]+[7]+[8]+[9]+[10]+[11]+[12] as [12],
		[1]+[2]+[3]+[4]+[5]+[6]+[7]+[8]+[9]+[10]+[11]+[12]+[13] as [13],
		[1]+[2]+[3]+[4]+[5]+[6]+[7]+[8]+[9]+[10]+[11]+[12]+[13]+[14] as [14],
		[1]+[2]+[3]+[4]+[5]+[6]+[7]+[8]+[9]+[10]+[11]+[12]+[13]+[14]+[15] as [15],
		[1]+[2]+[3]+[4]+[5]+[6]+[7]+[8]+[9]+[10]+[11]+[12]+[13]+[14]+[15]+[16] as [16],
		[1]+[2]+[3]+[4]+[5]+[6]+[7]+[8]+[9]+[10]+[11]+[12]+[13]+[14]+[15]+[16]+[17] as [17],
		[1]+[2]+[3]+[4]+[5]+[6]+[7]+[8]+[9]+[10]+[11]+[12]+[13]+[14]+[15]+[16]+[17]+[18] as [18],
		[1]+[2]+[3]+[4]+[5]+[6]+[7]+[8]+[9]+[10]+[11]+[12]+[13]+[14]+[15]+[16]+[17]+[18]+[19] as [19],
		[1]+[2]+[3]+[4]+[5]+[6]+[7]+[8]+[9]+[10]+[11]+[12]+[13]+[14]+[15]+[16]+[17]+[18]+[19]+[20] as [20],
		[1]+[2]+[3]+[4]+[5]+[6]+[7]+[8]+[9]+[10]+[11]+[12]+[13]+[14]+[15]+[16]+[17]+[18]+[19]+[20]+[21] as [21],
		[1]+[2]+[3]+[4]+[5]+[6]+[7]+[8]+[9]+[10]+[11]+[12]+[13]+[14]+[15]+[16]+[17]+[18]+[19]+[20]+[21]+[22] as [22],
		[1]+[2]+[3]+[4]+[5]+[6]+[7]+[8]+[9]+[10]+[11]+[12]+[13]+[14]+[15]+[16]+[17]+[18]+[19]+[20]+[21]+[22]+[23] as [23],
		[1]+[2]+[3]+[4]+[5]+[6]+[7]+[8]+[9]+[10]+[11]+[12]+[13]+[14]+[15]+[16]+[17]+[18]+[19]+[20]+[21]+[22]+[23]+[24] as [24],
		[1]+[2]+[3]+[4]+[5]+[6]+[7]+[8]+[9]+[10]+[11]+[12]+[13]+[14]+[15]+[16]+[17]+[18]+[19]+[20]+[21]+[22]+[23]+[24]+[25] as [25],
		[1]+[2]+[3]+[4]+[5]+[6]+[7]+[8]+[9]+[10]+[11]+[12]+[13]+[14]+[15]+[16]+[17]+[18]+[19]+[20]+[21]+[22]+[23]+[24]+[25]+[26] as [26],
		[1]+[2]+[3]+[4]+[5]+[6]+[7]+[8]+[9]+[10]+[11]+[12]+[13]+[14]+[15]+[16]+[17]+[18]+[19]+[20]+[21]+[22]+[23]+[24]+[25]+[26]+[27] as [27],
		[1]+[2]+[3]+[4]+[5]+[6]+[7]+[8]+[9]+[10]+[11]+[12]+[13]+[14]+[15]+[16]+[17]+[18]+[19]+[20]+[21]+[22]+[23]+[24]+[25]+[26]+[27]+[28] as [28],
		[1]+[2]+[3]+[4]+[5]+[6]+[7]+[8]+[9]+[10]+[11]+[12]+[13]+[14]+[15]+[16]+[17]+[18]+[19]+[20]+[21]+[22]+[23]+[24]+[25]+[26]+[27]+[28]+[29] as [29],
		[1]+[2]+[3]+[4]+[5]+[6]+[7]+[8]+[9]+[10]+[11]+[12]+[13]+[14]+[15]+[16]+[17]+[18]+[19]+[20]+[21]+[22]+[23]+[24]+[25]+[26]+[27]+[28]+[29]+[30] as [30],
		[1]+[2]+[3]+[4]+[5]+[6]+[7]+[8]+[9]+[10]+[11]+[12]+[13]+[14]+[15]+[16]+[17]+[18]+[19]+[20]+[21]+[22]+[23]+[24]+[25]+[26]+[27]+[28]+[29]+[30]+[31] as [31],
		[1]+[2]+[3]+[4]+[5]+[6]+[7]+[8]+[9]+[10]+[11]+[12]+[13]+[14]+[15]+[16]+[17]+[18]+[19]+[20]+[21]+[22]+[23]+[24]+[25]+[26]+[27]+[28]+[29]+[30]+[31]+[32] as [32],
		[1]+[2]+[3]+[4]+[5]+[6]+[7]+[8]+[9]+[10]+[11]+[12]+[13]+[14]+[15]+[16]+[17]+[18]+[19]+[20]+[21]+[22]+[23]+[24]+[25]+[26]+[27]+[28]+[29]+[30]+[31]+[32]+[33] as [33],
		[1]+[2]+[3]+[4]+[5]+[6]+[7]+[8]+[9]+[10]+[11]+[12]+[13]+[14]+[15]+[16]+[17]+[18]+[19]+[20]+[21]+[22]+[23]+[24]+[25]+[26]+[27]+[28]+[29]+[30]+[31]+[32]+[33]+[34] as [34],
		[1]+[2]+[3]+[4]+[5]+[6]+[7]+[8]+[9]+[10]+[11]+[12]+[13]+[14]+[15]+[16]+[17]+[18]+[19]+[20]+[21]+[22]+[23]+[24]+[25]+[26]+[27]+[28]+[29]+[30]+[31]+[32]+[33]+[34]+[35] as [35],
		[1]+[2]+[3]+[4]+[5]+[6]+[7]+[8]+[9]+[10]+[11]+[12]+[13]+[14]+[15]+[16]+[17]+[18]+[19]+[20]+[21]+[22]+[23]+[24]+[25]+[26]+[27]+[28]+[29]+[30]+[31]+[32]+[33]+[34]+[35]+[36] as [36]
	from 
		Demo.cohort_revenue_pivot
)
select 
	A.cohort_date,
	  A.[1] / B.[1] as [1],
	 A.[2] / B.[1] as [2],
	 A.[3] / B.[1] as [3],
	 A.[4] / B.[1] as [4],
	 A.[5] / B.[1] as [5],
	 A.[6] / B.[1] as [6],
	 A.[7] / B.[1] as [7],
	 A.[8] / B.[1] as [8],
	 A.[9] / B.[1] as [9],
	 A.[10] / B.[1] as [10],
	 A.[11] / B.[1] as [11],
	 A.[12] / B.[1] as [12],
	 A.[13] / B.[1] as [13],
	 A.[14] / B.[1] as [14],
	 A.[15] / B.[1] as [15],
	 A.[16] / B.[1] as [16],
	 A.[17] / B.[1] as [17],
	 A.[18] / B.[1] as [18],
	 A.[19] / B.[1] as [19],
	 A.[20] / B.[1] as [20],
	 A.[21] / B.[1] as [21],
	 A.[22] / B.[1] as [22],
	 A.[23] / B.[1] as [23],
	 A.[24] / B.[1] as [24],
	 A.[25] / B.[1] as [25],
	 A.[26] / B.[1] as [26],
	 A.[27] / B.[1] as [27],
	 A.[28] / B.[1] as [28],
	 A.[29] / B.[1] as [29],
	 A.[30] / B.[1] as [30],
	 A.[31] / B.[1] as [31],
	 A.[32] / B.[1] as [32],
	 A.[33] / B.[1] as [33],
	 A.[34] / B.[1] as [34],
	 A.[35] / B.[1] as [35],
	 A.[36] / B.[1] as [36]

into
	Demo.Cust_LT_Revenue
from
	CUM_LTV_cohort A 
Join 
	Demo.cohort_pivot B
on B.cohort_date = A.cohort_date;

---Customer lifetime value
-- Assume gross margin of 65%
select 
	cohort_date,
	 [1] * 0.65 as [1],
	 [2] * 0.65 as [2],
	 [3] * 0.65 as [3],
	 [4] * 0.65 as [4],
	 [5] * 0.65 as [5],
	 [6] * 0.65 as [6],
	 [7] * 0.65 as [7],
	 [8] * 0.65 as [8],
	 [9] * 0.65 as [9],
	 [10] * 0.65 as [10],
	 [11] * 0.65 as [11],
	 [12] * 0.65 as [12],
	 [13] * 0.65 as [13],
	 [14] * 0.65 as [14],
	 [15] * 0.65 as [15],
	 [16] * 0.65 as [16],
	 [17] * 0.65 as [17],
	 [18] * 0.65 as [18],
	 [19] * 0.65 as [19],
	 [20] * 0.65 as [20],
	 [21] * 0.65 as [21],
	 [22] * 0.65 as [22],
	 [23] * 0.65 as [23],
	 [24] * 0.65 as [24],
	 [25] * 0.65 as [25],
	 [26] * 0.65 as [26],
	 [27] * 0.65 as [27],
	 [28] * 0.65 as [28],
	 [29] * 0.65 as [29],
	 [30] * 0.65 as [30],
	 [31] * 0.65 as [31],
	 [32] * 0.65 as [32],
	 [33] * 0.65 as [33],
	 [34] * 0.65 as [34],
	 [35] * 0.65 as [35],
	 [36] * 0.65 as [36]
from
	Demo.Cust_LT_Revenue;
	
	
---------------------------------------------
with cust_prod as 
(
Select
	CONCAT(CAST(YEAR(signup_date_time) as varchar(4)) , FORMAT (signup_date_time, 'MM')) signedUP_month,
	FORMAT (signup_date_time, 'MM') as ldate,
	DATEDIFF(MONTH, signup_date_time, cancel_date_time) months_to_cancel,
	CASE WHEN cancel_date_time is NULL then 1
		ELSE 0
	END signedUP,
	CASE WHEN cancel_date_time is not NULL then 1
		ELSE 0
	END cancelled,
	1 as customer
from
	Demo.customer_product
)
,cust_summary as 
(
select
	signedUP_month,
	sum(signedUP)  signedUP,
	sum(cancelled)  cancelled,
	sum(customer) customers,
	sum(signedUP -cancelled)  netCustomers
from
	cust_prod
group by
	signedUP_month


),
cust_at_month as
(
select
	*,
	sum(signedUP) over (order by signedUP_month
		ROWS UNBOUNDED PRECEDING) as runningSignUP,
	sum(cancelled) over (order by signedUP_month
		ROWS UNBOUNDED PRECEDING) as runningCancel,

	sum(signedUP) over (order by signedUP_month
		ROWS UNBOUNDED PRECEDING) - sum(cancelled) over (order by signedUP_month
		ROWS UNBOUNDED PRECEDING) as customers_at

from
	cust_summary
)
select
	*,
	round(100 * (CAST(cancelled as float) / LAG(cast(customers_at as float)) over (order by signedUP_month)),2)  churn_rate
from
	cust_at_month
order by
	signedUP_month
	;
	
-----------------yearly churn---------------------------------------
with cust_prod as 
(
Select
	CAST(YEAR(signup_date_time) as varchar(4))  signedUP_year,
	DATEDIFF(YEAR, signup_date_time, cancel_date_time) year_to_cancel,
	CASE WHEN cancel_date_time is NULL then 1
		ELSE 0
	END signedUP,
	CASE WHEN cancel_date_time is not NULL then 1
		ELSE 0
	END cancelled,
	1 as customer
from
	Demo.customer_product
)
,cust_summary as 
(
select
	signedUP_year,
	sum(signedUP)  signedUP,
	sum(cancelled)  cancelled,
	sum(customer) customers,
	sum(signedUP -cancelled)  netCustomers
from
	cust_prod
group by
	signedUP_year


),
cust_at_year as
(
select
	*,
	sum(signedUP) over (order by signedUP_year
		ROWS UNBOUNDED PRECEDING) as runningSignUP,
	sum(cancelled) over (order by signedUP_year
		ROWS UNBOUNDED PRECEDING) as runningCancel,

	sum(signedUP) over (order by signedUP_year
		ROWS UNBOUNDED PRECEDING) - sum(cancelled) over (order by signedUP_year
		ROWS UNBOUNDED PRECEDING) as customers_at

from
	cust_summary
)
select
	*,
	round(100 * (CAST(cancelled as float) / LAG(cast(customers_at as float)) over (order by signedUP_year)),2)  churn_rate
from
	cust_at_year
order by
	signedUP_year
	;	
	
	