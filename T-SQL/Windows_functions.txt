//
running total by employee and month

select 
	empid,
	ordermonth,
	val,
	sum(val) over (partition by empid
					order by ordermonth
					rows between unbound preceding and current row) as runningVal
from
	sales.orders
----------
select 
	EmployeeID,
	OrderYear,
	SalesRevenue,
	sum(SalesRevenue) over (partition by EmployeeID
					order by OrderYear
					ROWS UNBOUNDED PRECEDING) as runningRevenue
from
	Demo.RepPerformance
	
	
//generate a row number

select 
	id,
	custid,
	val,
	row_number() over (partition by custid order by val) as rowNumber
from
	sales.order 
group by 
	custid, val
		
//row number with distinct (row number is evaluated before distinct)
select Distinct
	val,
	row_number() over (partition by val) as rowNumber
from
	sales.orders
	
//first_value and last value - (needs windows framing to work correctly - last_value: ROWS bETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING, first_value: ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)

Select
	custid,
	id,
	val,
	FIRST_VALUE(val) over (partition by custid, order by transdate, id
		ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as firstValue,
	LAST_VALUE(val) over (partition by custid order by transdate, id
		ROWS bETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) as lastValue
from 
	sales.ordervalues
order by 
	custid, id 
	
//Sum 

select 
	id,
	custid,
	val,
	sum(val) over() as totalValue,
	sum(val) over (partition by custid) as custTotalValue
from 
	sales.ordervalues
	
//percentage by customer and percentage overall

select 
	id,
	custid,
	val,
	100 * (val / sum(val) over()) as pctall,
	100 * (val / sum(val) over (partition by custid)) as pctcust
from 
	sales.ordervalues
	
//Running and moving aggregates using window frame



//using windows clause to avoid repititions
//When considering all major queries clauses(SELECT, FROM, WHERE, GROUP BY, HAVING, ORDER BY) - place the WINDOW clause between the HAVING and ORDER by clauses

select
	empid,
	ordermonth,
	val,
	sum(val) over W as runningSUM,
	min(val) over W as runningMIN,
	max(val) over W as runningMAX,
	avg(val) over W as runningAVG
from
	sales.EmpOrders
WINDOW W as (partition by empid
			order by ordermonth
			ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW);
			
//Using windows clause to specify part of the specification
select 
	custid,
	id,
	val,
	FIRST_VALUE(val) OVER (PO
							ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) firstValue,
	LAST_VALUE(val) OVER (PO 
						ROWS bETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) as lastValue
from
	sales.ordervalues

WINDOW PO as (partition by custid
			order by transdate, id)
order by custid, transdate, id

//recursively use WINDOW clauses

select 
	id,
	custid,
	transdate,
	qty,
	val,
	row_number() over PO as orderNum,
	max(transdate) over P as maxOrderDate,
	sum(qty) over POF as runningQTY,
	sum(val) over POF as runningSUM
from
	sales.ordervalues
WINDOW P as (partition by custid),
	PO as (P order by transdate, id),
	POF as (PO ROWS UNBOUNDED PRECEDING)
order by
	custid, transdate, id 
	
	
	
select 
	empid,
	ordermonth,
	MAX(qty) over (partition by empid
					order by ordermonth
					ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) as prvQTY,
	MAX(qty) over (partition by empid
					order by ordermonth
					ROWS BETWEEN 1 FOLLOWING AND 1 FOLLOWING) as nxtQTY,
	AVG(qty) over (partition by empid
					order by ordermonth
					ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) as AVG_3_MTH_QTY
from 
	sales.orders
	
//Stop partition at 25 rows
select
	ordcol,
	datacol,
	sum(datacol) over (order by datacol
						RESET WHEN 
						sum(qty) over (order by datacol
							ROWS UNBOUNDED PRECEDING) > 50
							ROWS UNBOUNDED PRECEDING) as runningSUM 
from
	tt.sales
	

select 
		empid,
		transdate,
		id,
		custid,
		val,
		CASE 
			WHEN ROW_NUMBER() over (partition by empid, custid order by transdate) =1
			THEN custid
		END as distinctCUSTID
from 
	sales.orders
	

//use the preceding to calculate the number of customers for employees

WITH C AS
{
	select 
		empid,
		transdate,
		id,
		custid,
		val,
		CASE 
			WHEN ROW_NUMBER() over (partition by empid, custid order by transdate) =1
			THEN custid
		END as distinctCUSTID
from 
	sales.orders

}
select 
	empid,
		transdate,
		id,
		custid,
		val,
		count(distinctCUSTID) over (partition by empid order by transdate) as numCusts
from 
	C;
	
	
//using group functions

select 
	empid,
	sum(val) as emptotal,
	sum(val) / sum(sum(val)) over () * 100 as pct 
from
	sales.orders
group by 
	empid;
	
//alternately using CTE
	
WITH C as 
{
	select 
		empid,
		sum(val) as emptotal,
	from
		sales.orders
	group by empid
}
select
	empid,
	emptotal,
	emptotal / sum(emptotal) over () * 100 as pct
	
	
//bin records tile vs row_number

select 
	id,
	transdate,
	val
	ROW_NUMBER() over (order by val) as rowNumber,
	(ROW_NUMBER() over (order by val) -1) / 10 + 1 as binNum
from
	sales.ordervalues
	

	select 
	id,
	transdate,
	val
	ROW_NUMBER() over (order by val) as rowNumber,
	NTILE(10) over (order by val) as binNum
from
	sales.ordervalues
	
	
//STatistical
	PERCENT_RANK,
	CUME_DIST,
	PERCENTILE_CONT
	PERCENTILE_DISC