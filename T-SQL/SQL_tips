---Triggers

CREATE OR ALTER TRIGGER trgCustChanged
ON Demo.Cust
AFTER INSERT, UPDATE, DELETE
AS
BEGIN
IF EXISTS(
SELECT \* FROM
Sales.SalesPerson SP
INNER JOIN inserted I
on SP.BusinessEntityID = I.ID
WHERE
SP.Bonus is null
)
BEGIN
RAISERROR('Sorry, This employee has no bonus', 16, 1)
ROLLBACK TRANSACTION
RETURN
END
END
GO

------Dynamic SQL
Exec sp_executesql N'SELECT \* from Sales.SalesPerson where Bonus > @bonus and SalesQuota > @saleQ',
N'@bonus FLOAT, @saleQ FLOAT',
@bonus = 500,
@saleQ = 1000

-------CURSOR

DECLARE @ID INT, @Bonus FLOAT, @CommissionP FLOAT

DECLARE SalesCursor CURSOR
FOR SELECT BusinessEntityID, Bonus, CommissionPct FROM Sales.SalesPerson

OPEN SalesCursor
FETCH next FROM SalesCursor
into @ID, @Bonus, @CommissionP
WHILE @@FETCH_STATUS = 0
BEGIN
--ACTION FIRST ROW THEN
PRINT @ID

    		FETCH next FROM SalesCursor
    			into @ID, @Bonus, @CommissionP
    	END

CLOSE SalesCursor DEALLOCATE SalesCursor

GO
----------------TABLE-VALUE FUNCTION

CREATE OR ALTER FUNCTION fnHighBonus
(
@bonus FLOAT
)
RETURNS TABLE
AS
RETURN
SELECT \*
FROM
Sales.SalesPerson
WHERE Bonus >= @bonus

SELECT \* FROM fnHighBonus(1000)

----- SCALAR FUNCTION

CREATE OR ALTER FUNCTION Demo.fnLongDate
(
@flDate AS DATETIME
)
RETURNS VARCHAR(MAx)
AS
BEGIN
RETURN DATENAME(DW, @flDate) + ' ' +
DATENAME(D, @flDate) +
CASE
WHEN DAY(@flDate) in (1, 21, 31) then 'st'
WHEN DAY(@flDate) in (2, 22) then 'nd'
WHEN DAY(@flDate) in (3, 23) then 'rd'
ELSE 'th'
END + ' ' +
DATENAME(M, @flDate) + ' ' +
DATENAME(YY, @flDate)
END

GO

------Create comma list

DECLARE @fNames VARCHAR(max)
SET
    @fNames = ''
SELECT
    TOP 10 @fNames = @fNames + FirstName + ', '
FROM Person.Person
Select @fNames
    -----GROUP BY with ROLLUP
Select ISNULL(P.PersonType, 'GRAND'), ISNULL(P.LastName, 'Total'), SUM(Bonus), SUM(SalesQuota)
FROM Sales.SalesPerson SP
    JOIN Person.Person P on SP.BusinessEntityID = P.BusinessEntityID
WHERE
    TerritoryID is not null
GROUP BY
    P.PersonType,
    P.LastName
WITH
    ROLLUP
ORDER BY P.PersonType, P.LastName
    -------Constraints
CREATE TABLE Demo.Employees (
    empid INT PRIMARY KEY identity (1, 1) NOT NULL, firstname VARCHAR(30) NOT NULL, lastname VARCHAR(30) NOT NULL, hiredate DATE NOT NULL, mgrid INT NULL, department VARCHAR(30) DEFAULT 'SALES', ssn VARCHAR(20) UNIQUE NOT NULL, SALARY MONEY NOT NULL
);

ALTER TABLE Demo.Employees
ADD CONSTRAINT DF_Employees_HireDate DEFAULT GETDATE () FOR hiredate;

ALTER TABLE Demo.Employees
ADD middleName NVARCHAR (30) NULL;

ALTER TABLE Demo.Employees
DROP COLUMN middleName;

ALTER TABLE Employees
ALTER COLUMN PhoneNumber VARCHAR(15) NOT NULL;

--Similar synta for primary key/default
--create unique INDEXs
ALTER TABLE Demo.Employees
ADD CONSTRAINT UNIQ_employees_ssn UNIQUE (ssn);

------Referential integrity constraint
CREATE TABLE Demo.Orders (
    orderid INT NOT NULL,
    empid INT NOT NULL,
    custid VARCHAR(10) NOT NULL,
    orderts DATETIME2 NOT NULL,
    qty INT NOT NULL,
    CONSTRAINT PK_ORDERS PRIMARY KEY (orderid),
    CONSTRAINT FK_Orders_Employees FOREIGN KEY (empid) REFERENCES Demo.Employees (empid)
);

--alternatively
ALTER TABLE Demo.Orders
ADD CONSTRAINT FK_Orders_Employees Foreign KEY (empid) REFERENCES Demo.Employees (empid);

--foreign key with cascade
CREATE TABLE ParentTable (
    ParentID INT PRIMARY KEY,
    ParentName NVARCHAR (50)
);

CREATE TABLE ChildTable (
    ChildID INT PRIMARY KEY,
    ParentID INT,
    ChildName NVARCHAR (50),
    CONSTRAINT FK_Child_Parent FOREIGN KEY (ParentID) REFERENCES ParentTable (ParentID) ON DELETE CASCADE
);

-- Drop the existing foreign key
ALTER TABLE ChildTable
DROP CONSTRAINT FK_Child_Parent;

-- Recreate the foreign key with cascading delete
ALTER TABLE ChildTable
ADD CONSTRAINT FK_Child_Parent FOREIGN KEY (ParentID) REFERENCES ParentTable (ParentID) ON DELETE CASCADE;

--------Check constraint
-- no negative values
ALTER TABLE Demo.Employees
ADD CONSTRAINT CHK_Employee_Salary CHECK (salary > 0.00);

-----USING TOP
SELECT TOP (10)
SELECT TOP (10) PERCENT
    -------OFFSET FETCH
    --requires order by clause
    ---skips first 50 rows and return the next 25 rows
Select
    SalesOrderID,
    OrderQty,
    LineTotal,
    ModifiedDate
FROM SALES.SalesOrderDetail
order by SalesOrderID, OrderQty
OFFSET
    50 ROWS FETCH next 25 ROWS ONLY;

----use EXISTS
SELECT CustomerID, TerritoryID
FROM SALES.Customer C
WHERE
    TerritoryID = 1
    AND Exists (
        SELECT *
        from Sales.SalesOrderHeader H
        where
            C.CustomerID = H.CustomerID
    )
    -------
SELECT country, region, city
FROM SALES.SalesPerson Except
SELECT country, region, city
FROM HR.Employees
    --------------Create INDEX
CREATE INDEX IX_Employees_LastName ON Demo.Employees (LastName);

CREATE INDEX IX_Employees_LastName_FirstName ON Demo.Employees (LastName, FirstName);

---View
CREATE VIEW OrderDetailsView AS
-------Table INSERT
--enhanced insert (transaction --all or none)
DROP TABLE IF exists Demo.Orders;

CREATE TABLE Demo.orders (
    orderid int NOT NULL CONSTRAINT PK_Orders PRIMARY KEY,
    orderdate DATE NOT NULL CONSTRAINT DFT_orderdate DEFAULT(SYSDATETIME ()),
    empid INT NOT NULL,
    custid VARCHAR(10) NOT NULL
);

INSERT INTO
    Demo.orders (
        orderid,
        orderdate,
        empid,
        custid
    )
VALUES (10003, '20250213', 4, 'B'),
    (10004, '20250214', 1, 'A'),
    (10005, '20250213', 1, 'C'),
    (10006, '20250213', 4, 'B');

--table value constructor
select *
FROM (
        VALUES (10003, '20250213', 4, 'B'), (10004, '20250214', 1, 'A'), (10005, '20250213', 1, 'C'), (10006, '20250213', 4, 'B')
    ) AS O (
        orderid, orderdate, empid, custid
    );

---Insert SELECT
insert into
    Demo.orders (
        orderid,
        orderdate,
        empid,
        custid
    )
select --------
    ------Select INTO
DROP TABLE IF exists Demo.Orders;

SELECT
    orderid,
    orderdate,
    empid,
    custid into dbo.orders
FROM Demo.orders;

---------Bulk insert from file
BULK
INSERT
    Demo.orders
FROM 'c:\temp\orders.csv'
WITH (
        DATAFILE = 'char',
        FIELDTERMINATOR = ',',
        ROWTERMINATOR = '\n'
    );

---retrive last identity value to use in reference TABLESPACE
--Last identity generated by session regardless of scope
@@identity
--Last identity generated by scope eg. stored procedure
or SCOPE_IDENTITY
--note identity values are generated even when inserts fails
-----A sequencing with cycling
CREATE SEQUENCE demo.SeqOrderIDs as INT MINVALUE 1 CYCLE;

SELECT next value for Demo.SeqOrderIDs;

-------update base on JOIN
UPDATE OD
set
    disc = + = 0.05
FROM Demo.orderDetails AS OD
    inner join Demo.orders AS O on OD.orderid = o.orderID
WHERE
    O.custid = 1;

--------------Find Duplicates
create table Demo.cust2
(
	ID INT PRIMARY KEY identity(1,1),
	EmployeeID INT,
	Fname VARCHAR(25),
	Lname Varchar(25),

)

BEGIN TRAN; -- start transaction
BEGIN TRY -- Error handling try block

INSERT INTO Demo.cust2 (EmployeeID, Fname, Lname)
			values (1, 'Tanis','Sullivan');

COMMIT TRAN; -- commit transaction if no failure
	
END TRY -- end error handling try block
BEGIN CATCH -- begin error handling catch block
	ROLLBACK TRAN; --rollback transaction if error in try block
	PRINT ' Error Number : ' + CAST(ERROR_NUMBER() AS VARCHAR(10));
	PRINT ' Error Message : ' + ERROR_MESSAGE();
	PRINT ' Error Severity : ' + CAST(ERROR_SEVERITY() AS VARCHAR(10));
	PRINT ' Error State : ' + CAST(ERROR_STATE() AS VARCHAR(10));
	PRINT ' Error Line : ' + CAST(ERROR_LINE() AS VARCHAR(10));
	PRINT ' Error Proc : ' + COALESCE(ERROR_NUMBER(), 'Not within Proc');
END CATCH; -- end catch block

SELECT
	Fname,
	Lname,
	count(1) AS [counter]
FROM
	Demo.cust2
GROUP BY
	Fname,
	Lname
HAVING
   count(1) > 1;

WITH DCUST AS
(
SELECT
	Fname,
	Lname,
	ROW_NUMBER() OVER (PARTITION BY Fname, Lname order by Fname) rownum
FROM
	Demo.cust2
)
SELECT
	*
FROM
  DCUST
WHERE 
	rownum >1

------Delete Duplicates

WITH DCUST AS
(
SELECT
	Fname,
	Lname,
	ROW_NUMBER() OVER (PARTITION BY Fname, Lname order by Fname) rownum
FROM
	Demo.cust2
)
DELETE
FROM
  DCUST
WHERE 
	rownum >1

---------Data Merge


BEGIN TRAN; -- start transaction
BEGIN TRY -- Error handling try block
COMMIT TRAN; -- commit transaction if no failure

MERGE INTO Demo.cust2 AS target
USING (VALUES (2, 'Don', 'Sullivan')) AS source (EmployeeId, Fname, Lname)
ON target.EmployeeId = source.EmployeeID
WHEN MATCHED THEN
    UPDATE SET EmployeeID = source.EmployeeID, Fname = source.Fname, Lname = source.Lname
WHEN NOT MATCHED THEN
    INSERT (EmployeeId, Fname, Lname)
    VALUES (source.EmployeeId, source.Fname, source.Lname);
	
END TRY -- end error handling try block
BEGIN CATCH -- begin error handling catch block
	ROLLBACK TRAN; --rollback transaction if error in try block
	PRINT ' Error Number : ' + CAST(ERROR_NUMBER() AS VARCHAR(10));
	PRINT ' Error Message : ' + ERROR_MESSAGE();
	PRINT ' Error Severity : ' + CAST(ERROR_SEVERITY() AS VARCHAR(10));
	PRINT ' Error State : ' + CAST(ERROR_STATE() AS VARCHAR(10));
	PRINT ' Error Line : ' + CAST(ERROR_LINE() AS VARCHAR(10));
	PRINT ' Error Proc : ' + COALESCE(ERROR_NUMBER(), 'Not within Proc');
END CATCH; -- end catch block


---------Verifying Data Completeness:

--Ensure all records in the source exist in the target.
SELECT source.id
FROM source_table source
LEFT JOIN target_table target
ON source.id = target.id
WHERE target.id IS NULL;